<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="138" failures="1" errors="0" time="9.313">
  <testsuite name="School Model" errors="0" failures="0" skipped="13" timestamp="2025-01-23T12:15:55" time="2.12" tests="13">
    <testcase classname="School Model Creation should create a valid school" name="School Model Creation should create a valid school" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Creation should fail without required fields" name="School Model Creation should fail without required fields" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Validation should validate name is required" name="School Model Validation should validate name is required" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Validation should validate address is required" name="School Model Validation should validate address is required" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Validation should validate contact number format" name="School Model Validation should validate contact number format" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Validation should accept valid contact number formats" name="School Model Validation should accept valid contact number formats" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Validation should validate name length" name="School Model Validation should validate name length" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Validation should not allow empty contact number" name="School Model Validation should not allow empty contact number" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Associations should have many users" name="School Model Associations should have many users" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Constraints should enforce unique school name" name="School Model Constraints should enforce unique school name" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Soft Deletion should soft delete school" name="School Model Soft Deletion should soft delete school" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Updates should update school details" name="School Model Updates should update school details" time="0">
      <skipped/>
    </testcase>
    <testcase classname="School Model Cascade Behavior should not delete school with active users" name="School Model Cascade Behavior should not delete school with active users" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="User Model" errors="0" failures="1" skipped="29" timestamp="2025-01-23T12:15:58" time="1.726" tests="30">
    <testcase classname="User Model Valid Users should create a user with valid data" name="User Model Valid Users should create a user with valid data" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Valid Users should create user with valid birthdate in past" name="User Model Valid Users should create user with valid birthdate in past" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 1" name="User Model Invalid Users should not create user with invalid data - case 1" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 2" name="User Model Invalid Users should not create user with invalid data - case 2" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 3" name="User Model Invalid Users should not create user with invalid data - case 3" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 4" name="User Model Invalid Users should not create user with invalid data - case 4" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with future birthdate" name="User Model Invalid Users should not create user with future birthdate" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with today as birthdate" name="User Model Invalid Users should not create user with today as birthdate" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Associations should belong to a school" name="User Model Associations should belong to a school" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Associations should have one StudentTeacher" name="User Model Associations should have one StudentTeacher" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Associations should have one Teacher" name="User Model Associations should have one Teacher" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Associations should have one Admin" name="User Model Associations should have one Admin" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Associations should have one Learner" name="User Model Associations should have one Learner" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Associations should cascade soft delete to associated roles" name="User Model Associations should cascade soft delete to associated roles" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Password Management should hash password on create" name="User Model Password Management should hash password on create" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Password Management should rehash password on update" name="User Model Password Management should rehash password on update" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Data Validation should enforce contact number format" name="User Model Data Validation should enforce contact number format" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Data Validation should enforce unique email" name="User Model Data Validation should enforce unique email" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Data Validation should validate email format" name="User Model Data Validation should validate email format" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Data Validation should require school_id" name="User Model Data Validation should require school_id" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Role Management should enforce valid role types" name="User Model Role Management should enforce valid role types" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Soft Delete should soft delete user" name="User Model Soft Delete should soft delete user" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Soft Delete should restore soft deleted user" name="User Model Soft Delete should restore soft deleted user" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Update Operations should update user details" name="User Model Update Operations should update user details" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Query Operations should find user by email" name="User Model Query Operations should find user by email" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Query Operations should not return soft deleted users in normal queries" name="User Model Query Operations should not return soft deleted users in normal queries" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Attributes should have all required attributes" name="User Model Attributes should have all required attributes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Instance Methods should compare password correctly" name="User Model Instance Methods should compare password correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Model Data Sanitization should trim whitespace from string fields" name="User Model Data Sanitization should trim whitespace from string fields" time="0.002">
      <failure>SequelizeValidationError: notNull Violation: Email cannot be null.
    at InstanceValidator._validate (C:\Users\johnl\Desktop\School\College\3rd Year\ICS26010\AralKademy Backend\node_modules\sequelize\src\instance-validator.js:78:13)
    at InstanceValidator._validateAndRunHooks (C:\Users\johnl\Desktop\School\College\3rd Year\ICS26010\AralKademy Backend\node_modules\sequelize\src\instance-validator.js:111:7)
    at InstanceValidator.validate (C:\Users\johnl\Desktop\School\College\3rd Year\ICS26010\AralKademy Backend\node_modules\sequelize\src\instance-validator.js:93:12)
    at model.save (C:\Users\johnl\Desktop\School\College\3rd Year\ICS26010\AralKademy Backend\node_modules\sequelize\src\model.js:4077:7)
    at Function.create (C:\Users\johnl\Desktop\School\College\3rd Year\ICS26010\AralKademy Backend\node_modules\sequelize\src\model.js:2305:12)
    at createTestUser (C:\Users\johnl\Desktop\School\College\3rd Year\ICS26010\AralKademy Backend\tests\helpers\testData.js:130:18)
    at setupTestEnvironment (C:\Users\johnl\Desktop\School\College\3rd Year\ICS26010\AralKademy Backend\tests\helpers\testSetup.js:11:5)
    at Object.&lt;anonymous&gt; (C:\Users\johnl\Desktop\School\College\3rd Year\ICS26010\AralKademy Backend\tests\unit\models\User.test.js:15:5)</failure>
    </testcase>
    <testcase classname="User Model Error Handling should handle concurrent updates correctly" name="User Model Error Handling should handle concurrent updates correctly" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="User Service" errors="0" failures="0" skipped="8" timestamp="2025-01-23T12:15:59" time="0.194" tests="8">
    <testcase classname="User Service createUser should create a user successfully with hashed password" name="User Service createUser should create a user successfully with hashed password" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Service createUser should throw an error when creating a user with existing email" name="User Service createUser should throw an error when creating a user with existing email" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Service createUser should throw an error when creating a user with existing username" name="User Service createUser should throw an error when creating a user with existing username" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Service loginUser should login a user successfully and return user and token" name="User Service loginUser should login a user successfully and return user and token" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Service loginUser should throw &quot;Invalid credentials&quot; if user does not exist" name="User Service loginUser should throw &quot;Invalid credentials&quot; if user does not exist" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Service loginUser should throw &quot;Invalid credentials&quot; if password is incorrect" name="User Service loginUser should throw &quot;Invalid credentials&quot; if password is incorrect" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Service getAllUsers should return all users" name="User Service getAllUsers should return all users" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Service getAllUsers should return an empty array when no users exist" name="User Service getAllUsers should return an empty array when no users exist" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Course Service" errors="0" failures="0" skipped="5" timestamp="2025-01-23T12:16:00" time="0.137" tests="5">
    <testcase classname="Course Service getAllCourses should retrieve all courses" name="Course Service getAllCourses should retrieve all courses" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Service getAllCourses should return empty array when no courses exist" name="Course Service getAllCourses should return empty array when no courses exist" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Service createCourse should create a course successfully" name="Course Service createCourse should create a course successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Service createCourse should throw error when course name is empty" name="Course Service createCourse should throw error when course name is empty" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Service createCourse should throw error when course name is too long" name="Course Service createCourse should throw error when course name is too long" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Learner Model" errors="0" failures="0" skipped="13" timestamp="2025-01-23T12:16:00" time="0.486" tests="13">
    <testcase classname="Learner Model Creation should create a valid learner" name="Learner Model Creation should create a valid learner" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Creation should fail with invalid year level" name="Learner Model Creation should fail with invalid year level" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Creation should fail without enrollment_id" name="Learner Model Creation should fail without enrollment_id" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Associations should associate with enrollment" name="Learner Model Associations should associate with enrollment" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Associations should associate with user" name="Learner Model Associations should associate with user" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Associations should allow null group association" name="Learner Model Associations should allow null group association" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Associations should associate with user through belongsTo" name="Learner Model Associations should associate with user through belongsTo" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Associations should associate with group through belongsTo" name="Learner Model Associations should associate with group through belongsTo" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Associations should delete learner when user is deleted" name="Learner Model Associations should delete learner when user is deleted" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Constraints should enforce unique user_id" name="Learner Model Constraints should enforce unique user_id" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Validation should fail with zero year level" name="Learner Model Validation should fail with zero year level" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Validation should fail with non-existent user_id" name="Learner Model Validation should fail with non-existent user_id" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Learner Model Validation should fail with non-existent enrollment_id" name="Learner Model Validation should fail with non-existent enrollment_id" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Course Model" errors="0" failures="0" skipped="14" timestamp="2025-01-23T12:16:00" time="0.508" tests="14">
    <testcase classname="Course Model Creation should create a valid course" name="Course Model Creation should create a valid course" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Creation should fail without required fields" name="Course Model Creation should fail without required fields" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Validation should validate name length" name="Course Model Validation should validate name length" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Validation should validate description length" name="Course Model Validation should validate description length" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Validation should fail with empty course name" name="Course Model Validation should fail with empty course name" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Validation should fail with non-existent teacher_id" name="Course Model Validation should fail with non-existent teacher_id" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Validation should fail with non-existent student_teacher_group_id" name="Course Model Validation should fail with non-existent student_teacher_group_id" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Associations should associate with teacher" name="Course Model Associations should associate with teacher" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Associations should associate with groups" name="Course Model Associations should associate with groups" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Constraints should enforce unique course name" name="Course Model Constraints should enforce unique course name" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Cascade Behavior should delete course when teacher is deleted" name="Course Model Cascade Behavior should delete course when teacher is deleted" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Soft Deletion should soft delete course" name="Course Model Soft Deletion should soft delete course" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Multiple Courses should allow multiple courses per teacher" name="Course Model Multiple Courses should allow multiple courses per teacher" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Model Updates should update course details" name="Course Model Updates should update course details" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Teacher Model" errors="0" failures="0" skipped="10" timestamp="2025-01-23T12:16:01" time="0.466" tests="10">
    <testcase classname="Teacher Model Creation should create a valid teacher" name="Teacher Model Creation should create a valid teacher" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Teacher Model Creation should fail without user_id" name="Teacher Model Creation should fail without user_id" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Teacher Model Creation should fail with non-existent user_id" name="Teacher Model Creation should fail with non-existent user_id" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Teacher Model Associations should associate with user" name="Teacher Model Associations should associate with user" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Teacher Model Associations should have many courses" name="Teacher Model Associations should have many courses" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Teacher Model Deletion should soft delete teacher" name="Teacher Model Deletion should soft delete teacher" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Teacher Model Deletion should cascade delete when user is deleted" name="Teacher Model Deletion should cascade delete when user is deleted" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Teacher Model Constraints should enforce unique user_id" name="Teacher Model Constraints should enforce unique user_id" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Teacher Model Course Management should allow multiple courses" name="Teacher Model Course Management should allow multiple courses" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Teacher Model Course Management should cascade delete courses when teacher is deleted" name="Teacher Model Course Management should cascade delete courses when teacher is deleted" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Security Middleware" errors="0" failures="0" skipped="7" timestamp="2025-01-23T12:16:01" time="0.533" tests="7">
    <testcase classname="Security Middleware CORS should allow requests from allowed origins" name="Security Middleware CORS should allow requests from allowed origins" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Security Middleware CORS should block requests from unauthorized origins" name="Security Middleware CORS should block requests from unauthorized origins" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Security Middleware Helmet should set security headers" name="Security Middleware Helmet should set security headers" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Security Middleware Rate Limiting should limit standard requests" name="Security Middleware Rate Limiting should limit standard requests" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Security Middleware Rate Limiting should apply stricter limits to auth endpoints" name="Security Middleware Rate Limiting should apply stricter limits to auth endpoints" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Security Middleware XSS Protection should sanitize input with potential XSS" name="Security Middleware XSS Protection should sanitize input with potential XSS" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Security Middleware MongoDB Sanitization should remove MongoDB operators from request" name="Security Middleware MongoDB Sanitization should remove MongoDB operators from request" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="User Controller" errors="0" failures="0" skipped="4" timestamp="2025-01-23T12:16:02" time="0.444" tests="4">
    <testcase classname="User Controller login should login user successfully" name="User Controller login should login user successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Controller login should handle invalid credentials" name="User Controller login should handle invalid credentials" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Controller login should handle general server errors during login" name="User Controller login should handle general server errors during login" time="0">
      <skipped/>
    </testcase>
    <testcase classname="User Controller getAllUsers should return all users successfully" name="User Controller getAllUsers should return all users successfully" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Auth Middleware" errors="0" failures="0" skipped="7" timestamp="2025-01-23T12:16:02" time="0.466" tests="7">
    <testcase classname="Auth Middleware should authenticate valid token and call next" name="Auth Middleware should authenticate valid token and call next" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Auth Middleware should return 401 when no token provided" name="Auth Middleware should return 401 when no token provided" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Auth Middleware should return 401 for invalid token format" name="Auth Middleware should return 401 for invalid token format" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Auth Middleware should return 401 for expired token" name="Auth Middleware should return 401 for expired token" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Auth Middleware should return 401 for invalid JWT" name="Auth Middleware should return 401 for invalid JWT" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Auth Middleware should return 401 for user not found" name="Auth Middleware should return 401 for user not found" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Auth Middleware should return 500 for database errors" name="Auth Middleware should return 500 for database errors" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Course Controller" errors="0" failures="0" skipped="5" timestamp="2025-01-23T12:16:03" time="0.473" tests="5">
    <testcase classname="Course Controller getAllCourses should retrieve all courses successfully" name="Course Controller getAllCourses should retrieve all courses successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Controller getAllCourses should handle error when retrieving courses fails" name="Course Controller getAllCourses should handle error when retrieving courses fails" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Controller createCourse should create course successfully" name="Course Controller createCourse should create course successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Controller createCourse should handle missing course name error" name="Course Controller createCourse should handle missing course name error" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Course Controller createCourse should handle duplicate course error" name="Course Controller createCourse should handle duplicate course error" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Server Setup" errors="0" failures="0" skipped="9" timestamp="2025-01-23T12:16:03" time="0.37" tests="9">
    <testcase classname="Server Setup GET / should return API is running message" name="Server Setup GET / should return API is running message" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should use compression, JSON, and pagination middleware" name="Server Setup Middleware Configuration should use compression, JSON, and pagination middleware" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should set up the security middleware" name="Server Setup Middleware Configuration should set up the security middleware" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should not use cache middleware in test environment" name="Server Setup Middleware Configuration should not use cache middleware in test environment" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should cache responses for /courses route when not in test environment" name="Server Setup Middleware Configuration should cache responses for /courses route when not in test environment" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Server Setup Routing should register /users and /courses routes" name="Server Setup Routing should register /users and /courses routes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Server Setup Error Handling should handle unknown routes with 404" name="Server Setup Error Handling should handle unknown routes with 404" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Server Setup Error Handling should handle server errors gracefully" name="Server Setup Error Handling should handle server errors gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Server Setup Database Connection should connect to the database on server start" name="Server Setup Database Connection should connect to the database on server start" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Log Middleware" errors="0" failures="0" skipped="3" timestamp="2025-01-23T12:16:04" time="0.295" tests="3">
    <testcase classname="Log Middleware should log incoming GET requests" name="Log Middleware should log incoming GET requests" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Log Middleware should log incoming POST requests with body" name="Log Middleware should log incoming POST requests with body" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Log Middleware should handle responses correctly" name="Log Middleware should handle responses correctly" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Logger" errors="0" failures="0" skipped="3" timestamp="2025-01-23T12:16:04" time="0.188" tests="3">
    <testcase classname="Logger should log info messages" name="Logger should log info messages" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger should log error messages" name="Logger should log error messages" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Logger should include additional metadata" name="Logger should include additional metadata" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Error Middleware" errors="0" failures="0" skipped="7" timestamp="2025-01-23T12:16:04" time="0.198" tests="7">
    <testcase classname="Error Middleware should handle SpecificError" name="Error Middleware should handle SpecificError" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Error Middleware should handle SequelizeUniqueConstraintError" name="Error Middleware should handle SequelizeUniqueConstraintError" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Error Middleware should handle SequelizeValidationError" name="Error Middleware should handle SequelizeValidationError" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Error Middleware should handle JsonWebTokenError" name="Error Middleware should handle JsonWebTokenError" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Error Middleware should handle TokenExpiredError" name="Error Middleware should handle TokenExpiredError" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Error Middleware should handle generic error" name="Error Middleware should handle generic error" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Error Middleware should log error details" name="Error Middleware should log error details" time="0">
      <skipped/>
    </testcase>
  </testsuite>
</testsuites>