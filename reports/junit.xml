<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="411" failures="0" errors="0" time="73.678">
  <testsuite name="Server Setup" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:15:39" time="2.836" tests="22">
    <testcase classname="Server Setup GET / should return API is running message" name="Server Setup GET / should return API is running message" time="0.047">
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should use compression, JSON, and pagination middleware" name="Server Setup Middleware Configuration should use compression, JSON, and pagination middleware" time="0.003">
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should set up the security middleware" name="Server Setup Middleware Configuration should set up the security middleware" time="0.002">
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should not use cache middleware in test environment" name="Server Setup Middleware Configuration should not use cache middleware in test environment" time="0.001">
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should cache responses for /courses route when not in test environment" name="Server Setup Middleware Configuration should cache responses for /courses route when not in test environment" time="0.001">
    </testcase>
    <testcase classname="Server Setup Routing should register /users and /courses routes" name="Server Setup Routing should register /users and /courses routes" time="0.002">
    </testcase>
    <testcase classname="Server Setup Error Handling should handle unknown routes with 404" name="Server Setup Error Handling should handle unknown routes with 404" time="0.058">
    </testcase>
    <testcase classname="Server Setup Error Handling should handle server errors gracefully" name="Server Setup Error Handling should handle server errors gracefully" time="0.031">
    </testcase>
    <testcase classname="Server Setup Database Connection should connect to the database on server start" name="Server Setup Database Connection should connect to the database on server start" time="0.004">
    </testcase>
    <testcase classname="Server Setup Rate Limiting General Rate Limiting should allow requests within the rate limit" name="Server Setup Rate Limiting General Rate Limiting should allow requests within the rate limit" time="0.043">
    </testcase>
    <testcase classname="Server Setup Rate Limiting General Rate Limiting should block requests exceeding the rate limit" name="Server Setup Rate Limiting General Rate Limiting should block requests exceeding the rate limit" time="0.047">
    </testcase>
    <testcase classname="Server Setup Rate Limiting General Rate Limiting should include rate limit headers" name="Server Setup Rate Limiting General Rate Limiting should include rate limit headers" time="0.014">
    </testcase>
    <testcase classname="Server Setup Rate Limiting Authentication Rate Limiting should allow authentication requests within the limit" name="Server Setup Rate Limiting Authentication Rate Limiting should allow authentication requests within the limit" time="0.059">
    </testcase>
    <testcase classname="Server Setup Rate Limiting Authentication Rate Limiting should block authentication requests exceeding the limit" name="Server Setup Rate Limiting Authentication Rate Limiting should block authentication requests exceeding the limit" time="0.06">
    </testcase>
    <testcase classname="Server Setup Rate Limiting Authentication Rate Limiting should have separate limits for different endpoints" name="Server Setup Rate Limiting Authentication Rate Limiting should have separate limits for different endpoints" time="0.07">
    </testcase>
    <testcase classname="Server Setup Rate Limiting Environment-based Rate Limiting should not apply rate limiting in test environment" name="Server Setup Rate Limiting Environment-based Rate Limiting should not apply rate limiting in test environment" time="0.096">
    </testcase>
    <testcase classname="Server Setup Server Initialization should handle database connection failure" name="Server Setup Server Initialization should handle database connection failure" time="0.002">
    </testcase>
    <testcase classname="Server Setup Server Initialization should use default port 3000 when PORT env variable is not set" name="Server Setup Server Initialization should use default port 3000 when PORT env variable is not set" time="0.002">
    </testcase>
    <testcase classname="Server Setup Error Middleware should sanitize error stack in production" name="Server Setup Error Middleware should sanitize error stack in production" time="0.032">
    </testcase>
    <testcase classname="Server Setup Server Startup should not initialize app in test environment" name="Server Setup Server Startup should not initialize app in test environment" time="0.001">
    </testcase>
    <testcase classname="Server Setup Server Startup should handle database connection refused error" name="Server Setup Server Startup should handle database connection refused error" time="0.002">
    </testcase>
    <testcase classname="Server Setup Server Startup should handle general startup errors" name="Server Setup Server Startup should handle general startup errors" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Password Utils" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:15:42" time="0.96" tests="12">
    <testcase classname="Password Utils hashPassword should hash a password successfully" name="Password Utils hashPassword should hash a password successfully" time="0.088">
    </testcase>
    <testcase classname="Password Utils hashPassword should create different hashes for the same password" name="Password Utils hashPassword should create different hashes for the same password" time="0.135">
    </testcase>
    <testcase classname="Password Utils hashPassword should use the provided salt rounds" name="Password Utils hashPassword should use the provided salt rounds" time="0.275">
    </testcase>
    <testcase classname="Password Utils comparePassword should return true for matching passwords" name="Password Utils comparePassword should return true for matching passwords" time="0.139">
    </testcase>
    <testcase classname="Password Utils comparePassword should return false for non-matching passwords" name="Password Utils comparePassword should return false for non-matching passwords" time="0.135">
    </testcase>
    <testcase classname="Password Utils validatePassword should return true for valid passwords" name="Password Utils validatePassword should return true for valid passwords" time="0.001">
    </testcase>
    <testcase classname="Password Utils validatePassword should reject passwords shorter than 8 characters" name="Password Utils validatePassword should reject passwords shorter than 8 characters" time="0.001">
    </testcase>
    <testcase classname="Password Utils validatePassword should reject passwords without uppercase letters" name="Password Utils validatePassword should reject passwords without uppercase letters" time="0.001">
    </testcase>
    <testcase classname="Password Utils validatePassword should reject passwords without lowercase letters" name="Password Utils validatePassword should reject passwords without lowercase letters" time="0.001">
    </testcase>
    <testcase classname="Password Utils validatePassword should reject passwords without numbers" name="Password Utils validatePassword should reject passwords without numbers" time="0">
    </testcase>
    <testcase classname="Password Utils validatePassword should reject passwords without special characters" name="Password Utils validatePassword should reject passwords without special characters" time="0.005">
    </testcase>
    <testcase classname="Password Utils validatePassword should handle null or invalid values" name="Password Utils validatePassword should handle null or invalid values" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Logger" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:15:43" time="0.219" tests="3">
    <testcase classname="Logger should log info messages" name="Logger should log info messages" time="0.006">
    </testcase>
    <testcase classname="Logger should log error messages" name="Logger should log error messages" time="0.004">
    </testcase>
    <testcase classname="Logger should include additional metadata" name="Logger should include additional metadata" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Drive Utilities" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:15:44" time="0.165" tests="7">
    <testcase classname="Drive Utilities validateDriveUrl should return true for valid Google Drive file URLs" name="Drive Utilities validateDriveUrl should return true for valid Google Drive file URLs" time="0.003">
    </testcase>
    <testcase classname="Drive Utilities validateDriveUrl should return true for valid Google Drive folder URLs" name="Drive Utilities validateDriveUrl should return true for valid Google Drive folder URLs" time="0.001">
    </testcase>
    <testcase classname="Drive Utilities validateDriveUrl should return false for invalid Google Drive URLs" name="Drive Utilities validateDriveUrl should return false for invalid Google Drive URLs" time="0.001">
    </testcase>
    <testcase classname="Drive Utilities generatePreviewUrl should convert file URLs to preview URLs" name="Drive Utilities generatePreviewUrl should convert file URLs to preview URLs" time="0.001">
    </testcase>
    <testcase classname="Drive Utilities generatePreviewUrl should handle file URLs with different query parameters" name="Drive Utilities generatePreviewUrl should handle file URLs with different query parameters" time="0.001">
    </testcase>
    <testcase classname="Drive Utilities generatePreviewUrl should return the original URL for folder URLs" name="Drive Utilities generatePreviewUrl should return the original URL for folder URLs" time="0.001">
    </testcase>
    <testcase classname="Drive Utilities generatePreviewUrl should return the original URL for non-Google Drive URLs" name="Drive Utilities generatePreviewUrl should return the original URL for non-Google Drive URLs" time="0">
    </testcase>
  </testsuite>
  <testsuite name="User Model" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:15:44" time="2.057" tests="29">
    <testcase classname="User Model Valid Users should create a user with valid data" name="User Model Valid Users should create a user with valid data" time="0.077">
    </testcase>
    <testcase classname="User Model Valid Users should create user with valid birthdate in past" name="User Model Valid Users should create user with valid birthdate in past" time="0.074">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 1" name="User Model Invalid Users should not create user with invalid data - case 1" time="0.002">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 2" name="User Model Invalid Users should not create user with invalid data - case 2" time="0.001">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 3" name="User Model Invalid Users should not create user with invalid data - case 3" time="0.002">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 4" name="User Model Invalid Users should not create user with invalid data - case 4" time="0.002">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with future birthdate" name="User Model Invalid Users should not create user with future birthdate" time="0.043">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with today as birthdate" name="User Model Invalid Users should not create user with today as birthdate" time="0.004">
    </testcase>
    <testcase classname="User Model Associations should belong to a school" name="User Model Associations should belong to a school" time="0.021">
    </testcase>
    <testcase classname="User Model Associations should have one StudentTeacher" name="User Model Associations should have one StudentTeacher" time="0.028">
    </testcase>
    <testcase classname="User Model Associations should have one Teacher" name="User Model Associations should have one Teacher" time="0.007">
    </testcase>
    <testcase classname="User Model Associations should have one Admin" name="User Model Associations should have one Admin" time="0.01">
    </testcase>
    <testcase classname="User Model Associations should have one Learner" name="User Model Associations should have one Learner" time="0.16">
    </testcase>
    <testcase classname="User Model Associations should cascade soft delete to associated roles" name="User Model Associations should cascade soft delete to associated roles" time="0.015">
    </testcase>
    <testcase classname="User Model Password Management should rehash password on update" name="User Model Password Management should rehash password on update" time="0.01">
    </testcase>
    <testcase classname="User Model Password Management should have comparePassword instance method" name="User Model Password Management should have comparePassword instance method" time="0.006">
    </testcase>
    <testcase classname="User Model Data Validation should enforce contact number format" name="User Model Data Validation should enforce contact number format" time="0.036">
    </testcase>
    <testcase classname="User Model Data Validation should enforce unique email" name="User Model Data Validation should enforce unique email" time="0.049">
    </testcase>
    <testcase classname="User Model Data Validation should validate email format" name="User Model Data Validation should validate email format" time="0.011">
    </testcase>
    <testcase classname="User Model Data Validation should require school_id" name="User Model Data Validation should require school_id" time="0.011">
    </testcase>
    <testcase classname="User Model Role Management should enforce valid role types" name="User Model Role Management should enforce valid role types" time="0.012">
    </testcase>
    <testcase classname="User Model Soft Delete should soft delete user" name="User Model Soft Delete should soft delete user" time="0.01">
    </testcase>
    <testcase classname="User Model Soft Delete should restore soft deleted user" name="User Model Soft Delete should restore soft deleted user" time="0.014">
    </testcase>
    <testcase classname="User Model Update Operations should update user details" name="User Model Update Operations should update user details" time="0.012">
    </testcase>
    <testcase classname="User Model Query Operations should find user by email" name="User Model Query Operations should find user by email" time="0.008">
    </testcase>
    <testcase classname="User Model Query Operations should not return soft deleted users in normal queries" name="User Model Query Operations should not return soft deleted users in normal queries" time="0.01">
    </testcase>
    <testcase classname="User Model Attributes should have all required attributes" name="User Model Attributes should have all required attributes" time="0.007">
    </testcase>
    <testcase classname="User Model Data Sanitization should trim whitespace from string fields" name="User Model Data Sanitization should trim whitespace from string fields" time="0.01">
    </testcase>
    <testcase classname="User Model Error Handling should handle concurrent updates correctly" name="User Model Error Handling should handle concurrent updates correctly" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="Teacher Model" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:15:46" time="3.509" tests="11">
    <testcase classname="Teacher Model Creation should create a valid teacher" name="Teacher Model Creation should create a valid teacher" time="0.461">
    </testcase>
    <testcase classname="Teacher Model Creation should fail without user_id" name="Teacher Model Creation should fail without user_id" time="0.264">
    </testcase>
    <testcase classname="Teacher Model Creation should fail with non-existent user_id" name="Teacher Model Creation should fail with non-existent user_id" time="0.244">
    </testcase>
    <testcase classname="Teacher Model Associations should associate with user" name="Teacher Model Associations should associate with user" time="0.251">
    </testcase>
    <testcase classname="Teacher Model Associations should have many courses" name="Teacher Model Associations should have many courses" time="0.238">
    </testcase>
    <testcase classname="Teacher Model Deletion should soft delete teacher" name="Teacher Model Deletion should soft delete teacher" time="0.24">
    </testcase>
    <testcase classname="Teacher Model Deletion should cascade delete when user is deleted" name="Teacher Model Deletion should cascade delete when user is deleted" time="0.246">
    </testcase>
    <testcase classname="Teacher Model Constraints should enforce unique user_id" name="Teacher Model Constraints should enforce unique user_id" time="0.237">
    </testcase>
    <testcase classname="Teacher Model Course Management should allow multiple courses" name="Teacher Model Course Management should allow multiple courses" time="0.258">
    </testcase>
    <testcase classname="Teacher Model Course Management should cascade delete courses when teacher is deleted" name="Teacher Model Course Management should cascade delete courses when teacher is deleted" time="0.253">
    </testcase>
    <testcase classname="Teacher Model Query Operations should find active teachers" name="Teacher Model Query Operations should find active teachers" time="0.241">
    </testcase>
  </testsuite>
  <testsuite name="StudentTeacher Model" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:15:49" time="3.46" tests="12">
    <testcase classname="StudentTeacher Model Creation should create a valid student teacher" name="StudentTeacher Model Creation should create a valid student teacher" time="0.412">
    </testcase>
    <testcase classname="StudentTeacher Model Creation should fail without required fields" name="StudentTeacher Model Creation should fail without required fields" time="0.265">
    </testcase>
    <testcase classname="StudentTeacher Model Validation should require section" name="StudentTeacher Model Validation should require section" time="0.237">
    </testcase>
    <testcase classname="StudentTeacher Model Validation should require department" name="StudentTeacher Model Validation should require department" time="0.223">
    </testcase>
    <testcase classname="StudentTeacher Model Validation should not allow empty section" name="StudentTeacher Model Validation should not allow empty section" time="0.216">
    </testcase>
    <testcase classname="StudentTeacher Model Associations should associate with user" name="StudentTeacher Model Associations should associate with user" time="0.226">
    </testcase>
    <testcase classname="StudentTeacher Model Associations should associate with group" name="StudentTeacher Model Associations should associate with group" time="0.231">
    </testcase>
    <testcase classname="StudentTeacher Model Constraints should enforce unique user_id" name="StudentTeacher Model Constraints should enforce unique user_id" time="0.241">
    </testcase>
    <testcase classname="StudentTeacher Model Query Operations should find by department" name="StudentTeacher Model Query Operations should find by department" time="0.224">
    </testcase>
    <testcase classname="StudentTeacher Model Soft Delete should soft delete student teacher" name="StudentTeacher Model Soft Delete should soft delete student teacher" time="0.228">
    </testcase>
    <testcase classname="StudentTeacher Model Soft Delete should cascade delete when user is deleted" name="StudentTeacher Model Soft Delete should cascade delete when user is deleted" time="0.234">
    </testcase>
    <testcase classname="StudentTeacher Model Updates should update student teacher details" name="StudentTeacher Model Updates should update student teacher details" time="0.227">
    </testcase>
  </testsuite>
  <testsuite name="School Model" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:15:53" time="3.914" tests="15">
    <testcase classname="School Model Creation should create a valid school" name="School Model Creation should create a valid school" time="0.394">
    </testcase>
    <testcase classname="School Model Creation should fail without required fields" name="School Model Creation should fail without required fields" time="0.248">
    </testcase>
    <testcase classname="School Model Validation should validate name is required" name="School Model Validation should validate name is required" time="0.209">
    </testcase>
    <testcase classname="School Model Validation should validate address is required" name="School Model Validation should validate address is required" time="0.208">
    </testcase>
    <testcase classname="School Model Validation should validate contact number format" name="School Model Validation should validate contact number format" time="0.214">
    </testcase>
    <testcase classname="School Model Validation should accept valid contact number formats" name="School Model Validation should accept valid contact number formats" time="0.219">
    </testcase>
    <testcase classname="School Model Validation should validate name length" name="School Model Validation should validate name length" time="0.211">
    </testcase>
    <testcase classname="School Model Validation should not allow empty contact number" name="School Model Validation should not allow empty contact number" time="0.2">
    </testcase>
    <testcase classname="School Model Associations should have many users" name="School Model Associations should have many users" time="0.22">
    </testcase>
    <testcase classname="School Model Constraints should enforce unique school name" name="School Model Constraints should enforce unique school name" time="0.23">
    </testcase>
    <testcase classname="School Model Soft Deletion should soft delete school" name="School Model Soft Deletion should soft delete school" time="0.227">
    </testcase>
    <testcase classname="School Model Updates should update school details" name="School Model Updates should update school details" time="0.214">
    </testcase>
    <testcase classname="School Model Cascade Behavior should not delete school with active users" name="School Model Cascade Behavior should not delete school with active users" time="0.214">
    </testcase>
    <testcase classname="School Model Query Operations should find schools with pagination" name="School Model Query Operations should find schools with pagination" time="0.23">
    </testcase>
    <testcase classname="School Model Query Operations should search schools by name" name="School Model Query Operations should search schools by name" time="0.212">
    </testcase>
  </testsuite>
  <testsuite name="Learner Model" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:15:57" time="8.24" tests="16">
    <testcase classname="Learner Model Creation should create a valid learner" name="Learner Model Creation should create a valid learner" time="0.639">
    </testcase>
    <testcase classname="Learner Model Creation should fail with invalid year level" name="Learner Model Creation should fail with invalid year level" time="0.501">
    </testcase>
    <testcase classname="Learner Model Creation should fail without enrollment_id" name="Learner Model Creation should fail without enrollment_id" time="0.457">
    </testcase>
    <testcase classname="Learner Model Associations should associate with enrollment" name="Learner Model Associations should associate with enrollment" time="0.466">
    </testcase>
    <testcase classname="Learner Model Associations should associate with user" name="Learner Model Associations should associate with user" time="0.481">
    </testcase>
    <testcase classname="Learner Model Associations should allow null group association" name="Learner Model Associations should allow null group association" time="0.469">
    </testcase>
    <testcase classname="Learner Model Associations should associate with user through belongsTo" name="Learner Model Associations should associate with user through belongsTo" time="0.456">
    </testcase>
    <testcase classname="Learner Model Associations should associate with group through belongsTo" name="Learner Model Associations should associate with group through belongsTo" time="0.462">
    </testcase>
    <testcase classname="Learner Model Associations should delete learner when user is deleted" name="Learner Model Associations should delete learner when user is deleted" time="0.671">
    </testcase>
    <testcase classname="Learner Model Constraints should enforce unique user_id" name="Learner Model Constraints should enforce unique user_id" time="0.476">
    </testcase>
    <testcase classname="Learner Model Validation should fail with zero year level" name="Learner Model Validation should fail with zero year level" time="0.447">
    </testcase>
    <testcase classname="Learner Model Validation should fail with non-existent user_id" name="Learner Model Validation should fail with non-existent user_id" time="0.444">
    </testcase>
    <testcase classname="Learner Model Validation should fail with non-existent enrollment_id" name="Learner Model Validation should fail with non-existent enrollment_id" time="0.455">
    </testcase>
    <testcase classname="Learner Model Query Operations should find learner with associations" name="Learner Model Query Operations should find learner with associations" time="0.452">
    </testcase>
    <testcase classname="Learner Model Update Operations should update year level" name="Learner Model Update Operations should update year level" time="0.454">
    </testcase>
    <testcase classname="Learner Model Data Integrity should cascade delete when enrollment is deleted" name="Learner Model Data Integrity should cascade delete when enrollment is deleted" time="0.449">
    </testcase>
  </testsuite>
  <testsuite name="Group Model" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:05" time="3.308" tests="11">
    <testcase classname="Group Model Creation should create a valid group" name="Group Model Creation should create a valid group" time="0.41">
    </testcase>
    <testcase classname="Group Model Creation should fail without required fields" name="Group Model Creation should fail without required fields" time="0.264">
    </testcase>
    <testcase classname="Group Model Validation should validate group type" name="Group Model Validation should validate group type" time="0.21">
    </testcase>
    <testcase classname="Group Model Validation should not allow empty name" name="Group Model Validation should not allow empty name" time="0.216">
    </testcase>
    <testcase classname="Group Model Associations should have many learners" name="Group Model Associations should have many learners" time="0.403">
    </testcase>
    <testcase classname="Group Model Associations should have many student teachers when type is student_teacher" name="Group Model Associations should have many student teachers when type is student_teacher" time="0.237">
    </testcase>
    <testcase classname="Group Model Query Operations should find groups by type" name="Group Model Query Operations should find groups by type" time="0.213">
    </testcase>
    <testcase classname="Group Model Soft Delete should soft delete group" name="Group Model Soft Delete should soft delete group" time="0.22">
    </testcase>
    <testcase classname="Group Model Course Associations should associate with courses" name="Group Model Course Associations should associate with courses" time="0.233">
    </testcase>
    <testcase classname="Group Model Updates should update group name" name="Group Model Updates should update group name" time="0.217">
    </testcase>
    <testcase classname="Group Model Cascade Delete should handle associations on delete" name="Group Model Cascade Delete should handle associations on delete" time="0.226">
    </testcase>
  </testsuite>
  <testsuite name="Enrollment Model" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:08" time="5.618" tests="16">
    <testcase classname="Enrollment Model Creation should create valid enrollment" name="Enrollment Model Creation should create valid enrollment" time="0.5">
    </testcase>
    <testcase classname="Enrollment Model Validation should require all mandatory fields" name="Enrollment Model Validation should require all mandatory fields" time="0.33">
    </testcase>
    <testcase classname="Enrollment Model Validation should validate email format" name="Enrollment Model Validation should validate email format" time="0.303">
    </testcase>
    <testcase classname="Enrollment Model Validation should validate year level range" name="Enrollment Model Validation should validate year level range" time="0.308">
    </testcase>
    <testcase classname="Enrollment Model Validation should validate status values" name="Enrollment Model Validation should validate status values" time="0.303">
    </testcase>
    <testcase classname="Enrollment Model Validation should not allow future birth dates" name="Enrollment Model Validation should not allow future birth dates" time="0.304">
    </testcase>
    <testcase classname="Enrollment Model Validation should allow valid past birth dates" name="Enrollment Model Validation should allow valid past birth dates" time="0.314">
    </testcase>
    <testcase classname="Enrollment Model Associations should associate with school" name="Enrollment Model Associations should associate with school" time="0.308">
    </testcase>
    <testcase classname="Enrollment Model Associations should associate with admin" name="Enrollment Model Associations should associate with admin" time="0.295">
    </testcase>
    <testcase classname="Enrollment Model Status Management should update enrollment status" name="Enrollment Model Status Management should update enrollment status" time="0.315">
    </testcase>
    <testcase classname="Enrollment Model Soft Delete should soft delete enrollment" name="Enrollment Model Soft Delete should soft delete enrollment" time="0.307">
    </testcase>
    <testcase classname="Enrollment Model Query Operations should find enrollments by status" name="Enrollment Model Query Operations should find enrollments by status" time="0.305">
    </testcase>
    <testcase classname="Enrollment Model Query Operations should paginate enrollments" name="Enrollment Model Query Operations should paginate enrollments" time="0.304">
    </testcase>
    <testcase classname="Enrollment Model Data Updates should update enrollment details" name="Enrollment Model Data Updates should update enrollment details" time="0.304">
    </testcase>
    <testcase classname="Enrollment Model Data Integrity should enforce unique email" name="Enrollment Model Data Integrity should enforce unique email" time="0.342">
    </testcase>
    <testcase classname="Enrollment Model Data Integrity should validate contact number format" name="Enrollment Model Data Integrity should validate contact number format" time="0.311">
    </testcase>
  </testsuite>
  <testsuite name="Course Model" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:14" time="4.427" tests="15">
    <testcase classname="Course Model Creation should create a valid course" name="Course Model Creation should create a valid course" time="0.427">
    </testcase>
    <testcase classname="Course Model Creation should fail without required fields" name="Course Model Creation should fail without required fields" time="0.273">
    </testcase>
    <testcase classname="Course Model Validation should validate name length" name="Course Model Validation should validate name length" time="0.246">
    </testcase>
    <testcase classname="Course Model Validation should validate description length" name="Course Model Validation should validate description length" time="0.231">
    </testcase>
    <testcase classname="Course Model Validation should fail with empty course name" name="Course Model Validation should fail with empty course name" time="0.227">
    </testcase>
    <testcase classname="Course Model Validation should fail with non-existent teacher_id" name="Course Model Validation should fail with non-existent teacher_id" time="0.249">
    </testcase>
    <testcase classname="Course Model Validation should fail with non-existent student_teacher_group_id" name="Course Model Validation should fail with non-existent student_teacher_group_id" time="0.243">
    </testcase>
    <testcase classname="Course Model Associations should associate with teacher" name="Course Model Associations should associate with teacher" time="0.245">
    </testcase>
    <testcase classname="Course Model Associations should associate with groups" name="Course Model Associations should associate with groups" time="0.233">
    </testcase>
    <testcase classname="Course Model Constraints should enforce unique course name" name="Course Model Constraints should enforce unique course name" time="0.236">
    </testcase>
    <testcase classname="Course Model Cascade Behavior should delete course when teacher is deleted" name="Course Model Cascade Behavior should delete course when teacher is deleted" time="0.242">
    </testcase>
    <testcase classname="Course Model Soft Deletion should soft delete course" name="Course Model Soft Deletion should soft delete course" time="0.234">
    </testcase>
    <testcase classname="Course Model Multiple Courses should allow multiple courses per teacher" name="Course Model Multiple Courses should allow multiple courses per teacher" time="0.232">
    </testcase>
    <testcase classname="Course Model Updates should update course details" name="Course Model Updates should update course details" time="0.247">
    </testcase>
    <testcase classname="Course Model Query Operations should find courses with pagination" name="Course Model Query Operations should find courses with pagination" time="0.252">
    </testcase>
  </testsuite>
  <testsuite name="UserService" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:18" time="10.371" tests="19">
    <testcase classname="UserService Validation should validate email format" name="UserService Validation should validate email format" time="0.603">
    </testcase>
    <testcase classname="UserService Validation should validate contact number format" name="UserService Validation should validate contact number format" time="0.384">
    </testcase>
    <testcase classname="UserService Validation should validate role" name="UserService Validation should validate role" time="0.384">
    </testcase>
    <testcase classname="UserService Validation should validate password length" name="UserService Validation should validate password length" time="0.38">
    </testcase>
    <testcase classname="UserService User Creation should create teacher user with role data" name="UserService User Creation should create teacher user with role data" time="0.463">
    </testcase>
    <testcase classname="UserService User Creation should fail creating user with existing email" name="UserService User Creation should fail creating user with existing email" time="0.563">
    </testcase>
    <testcase classname="UserService Authentication should login user with valid credentials" name="UserService Authentication should login user with valid credentials" time="0.525">
    </testcase>
    <testcase classname="UserService Authentication should fail logout with an invalid token" name="UserService Authentication should fail logout with an invalid token" time="0.366">
    </testcase>
    <testcase classname="UserService User Retrieval should get user by id with role details" name="UserService User Retrieval should get user by id with role details" time="0.468">
    </testcase>
    <testcase classname="UserService User Retrieval should fail with non-existent user id" name="UserService User Retrieval should fail with non-existent user id" time="0.393">
    </testcase>
    <testcase classname="UserService User Retrieval should get paginated users" name="UserService User Retrieval should get paginated users" time="1.481">
    </testcase>
    <testcase classname="UserService User Update should update user data" name="UserService User Update should update user data" time="0.486">
    </testcase>
    <testcase classname="UserService Password Management should change password with valid credentials" name="UserService Password Management should change password with valid credentials" time="0.584">
    </testcase>
    <testcase classname="UserService Password Management should fail password change with invalid old password" name="UserService Password Management should fail password change with invalid old password" time="0.511">
    </testcase>
    <testcase classname="UserService User Deletion should delete existing user" name="UserService User Deletion should delete existing user" time="0.458">
    </testcase>
    <testcase classname="UserService User Deletion should throw error for non-existent user" name="UserService User Deletion should throw error for non-existent user" time="0.45">
    </testcase>
    <testcase classname="UserService User Deletion should rollback transaction on error" name="UserService User Deletion should rollback transaction on error" time="0.446">
    </testcase>
    <testcase classname="UserService Role and School Queries should get users by role" name="UserService Role and School Queries should get users by role" time="0.456">
    </testcase>
    <testcase classname="UserService Role and School Queries should get users by school" name="UserService Role and School Queries should get users by school" time="0.451">
    </testcase>
  </testsuite>
  <testsuite name="Blacklist Model" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:29" time="0.876" tests="2">
    <testcase classname="Blacklist Model Creation should create a valid blacklist" name="Blacklist Model Creation should create a valid blacklist" time="0.384">
    </testcase>
    <testcase classname="Blacklist Model Creation should fail without required fields" name="Blacklist Model Creation should fail without required fields" time="0.056">
    </testcase>
  </testsuite>
  <testsuite name="Admin Model" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:30" time="3.016" tests="9">
    <testcase classname="Admin Model Creation should create a valid admin" name="Admin Model Creation should create a valid admin" time="0.514">
    </testcase>
    <testcase classname="Admin Model Creation should fail without user_id" name="Admin Model Creation should fail without user_id" time="0.28">
    </testcase>
    <testcase classname="Admin Model Associations should associate with user" name="Admin Model Associations should associate with user" time="0.268">
    </testcase>
    <testcase classname="Admin Model Associations should have many enrollments" name="Admin Model Associations should have many enrollments" time="0.248">
    </testcase>
    <testcase classname="Admin Model Constraints should enforce unique user_id" name="Admin Model Constraints should enforce unique user_id" time="0.257">
    </testcase>
    <testcase classname="Admin Model Soft Delete should soft delete admin" name="Admin Model Soft Delete should soft delete admin" time="0.249">
    </testcase>
    <testcase classname="Admin Model Soft Delete should cascade delete when user is deleted" name="Admin Model Soft Delete should cascade delete when user is deleted" time="0.257">
    </testcase>
    <testcase classname="Admin Model Attributes should have all required attributes" name="Admin Model Attributes should have all required attributes" time="0.246">
    </testcase>
    <testcase classname="Admin Model Query Operations should find active admins" name="Admin Model Query Operations should find active admins" time="0.238">
    </testcase>
  </testsuite>
  <testsuite name="Enrollment Service" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:33" time="0.352" tests="21">
    <testcase classname="Enrollment Service enroll should enroll a new user successfully (enroll)" name="Enrollment Service enroll should enroll a new user successfully (enroll)" time="0.003">
    </testcase>
    <testcase classname="Enrollment Service enroll should throw an error if email already exists (enroll)" name="Enrollment Service enroll should throw an error if email already exists (enroll)" time="0.023">
    </testcase>
    <testcase classname="Enrollment Service enroll should throw an error if enrollment fails (enroll)" name="Enrollment Service enroll should throw an error if enrollment fails (enroll)" time="0.006">
    </testcase>
    <testcase classname="Enrollment Service approveEnrollment should approve an enrollment successfully (approve enrollment)" name="Enrollment Service approveEnrollment should approve an enrollment successfully (approve enrollment)" time="0.002">
    </testcase>
    <testcase classname="Enrollment Service approveEnrollment should throw an error if enrollment is not found (approve enrollment)" name="Enrollment Service approveEnrollment should throw an error if enrollment is not found (approve enrollment)" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service approveEnrollment should throw an error if updating enrollment fails (approve enrollment)" name="Enrollment Service approveEnrollment should throw an error if updating enrollment fails (approve enrollment)" time="0.013">
    </testcase>
    <testcase classname="Enrollment Service rejectEnrollment should reject an enrollment successfully (reject enrollment)" name="Enrollment Service rejectEnrollment should reject an enrollment successfully (reject enrollment)" time="0.002">
    </testcase>
    <testcase classname="Enrollment Service rejectEnrollment should throw an error if enrollment is not found (reject enrollment)" name="Enrollment Service rejectEnrollment should throw an error if enrollment is not found (reject enrollment)" time="0.006">
    </testcase>
    <testcase classname="Enrollment Service rejectEnrollment should throw an error if updating enrollment fails (reject enrollment)" name="Enrollment Service rejectEnrollment should throw an error if updating enrollment fails (reject enrollment)" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentById should retrieve an enrollment by ID successfully (get enrollment by id)" name="Enrollment Service getEnrollmentById should retrieve an enrollment by ID successfully (get enrollment by id)" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentById should throw an error when the enrollment does not exist (get enrollment by id)" name="Enrollment Service getEnrollmentById should throw an error when the enrollment does not exist (get enrollment by id)" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentById should throw an error when fetching of enrollment fails (get enrollment by id)" name="Enrollment Service getEnrollmentById should throw an error when fetching of enrollment fails (get enrollment by id)" time="0.006">
    </testcase>
    <testcase classname="Enrollment Service getAllEnrollments should retrieve all enrollments successfully (get all enrollments)" name="Enrollment Service getAllEnrollments should retrieve all enrollments successfully (get all enrollments)" time="0.003">
    </testcase>
    <testcase classname="Enrollment Service getAllEnrollments should throw an error when fetching enrollments fails (get all enrollments)" name="Enrollment Service getAllEnrollments should throw an error when fetching enrollments fails (get all enrollments)" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service getAllEnrollments should return an empty list if no enrollments exist (get all enrollments)" name="Enrollment Service getAllEnrollments should return an empty list if no enrollments exist (get all enrollments)" time="0.001">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentsBySchool should retrieve enrollments by school successfully (get enrollments by school)" name="Enrollment Service getEnrollmentsBySchool should retrieve enrollments by school successfully (get enrollments by school)" time="0.001">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentsBySchool should throw an error if the school does not exist (get enrollments by school)" name="Enrollment Service getEnrollmentsBySchool should throw an error if the school does not exist (get enrollments by school)" time="0.007">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentsBySchool should throw an error if fetching enrollments by school fails (get enrollments by school)" name="Enrollment Service getEnrollmentsBySchool should throw an error if fetching enrollments by school fails (get enrollments by school)" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service checkEnrollmentStatus should retrieve the enrollment status by email successfully (check enrollment status)" name="Enrollment Service checkEnrollmentStatus should retrieve the enrollment status by email successfully (check enrollment status)" time="0.001">
    </testcase>
    <testcase classname="Enrollment Service checkEnrollmentStatus should return null if the enrollment does not exist (check enrollment status)" name="Enrollment Service checkEnrollmentStatus should return null if the enrollment does not exist (check enrollment status)" time="0.002">
    </testcase>
    <testcase classname="Enrollment Service checkEnrollmentStatus should throw an error if fetching the enrollment status fails (check enrollment status)" name="Enrollment Service checkEnrollmentStatus should throw an error if fetching the enrollment status fails (check enrollment status)" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="RoleService" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:33" time="7.776" tests="18">
    <testcase classname="RoleService assignRole should assign teacher role" name="RoleService assignRole should assign teacher role" time="0.68">
    </testcase>
    <testcase classname="RoleService assignRole should fail with invalid role" name="RoleService assignRole should fail with invalid role" time="0.393">
    </testcase>
    <testcase classname="RoleService assignRole should fail with non-existent user" name="RoleService assignRole should fail with non-existent user" time="0.386">
    </testcase>
    <testcase classname="RoleService assignRole should fail when assigning learner without enrollment_id" name="RoleService assignRole should fail when assigning learner without enrollment_id" time="0.382">
    </testcase>
    <testcase classname="RoleService assignRole should fail when assigning student_teacher without required fields" name="RoleService assignRole should fail when assigning student_teacher without required fields" time="0.389">
    </testcase>
    <testcase classname="RoleService assignRole should fail when assigning learner without year_level" name="RoleService assignRole should fail when assigning learner without year_level" time="0.385">
    </testcase>
    <testcase classname="RoleService assignRole should fail when assigning same role" name="RoleService assignRole should fail when assigning same role" time="0.41">
    </testcase>
    <testcase classname="RoleService changeRole should change from teacher to admin" name="RoleService changeRole should change from teacher to admin" time="0.409">
    </testcase>
    <testcase classname="RoleService changeRole should maintain role data integrity during change" name="RoleService changeRole should maintain role data integrity during change" time="0.404">
    </testcase>
    <testcase classname="RoleService changeRole should validate role data during change" name="RoleService changeRole should validate role data during change" time="0.396">
    </testcase>
    <testcase classname="RoleService changeRole should handle concurrent role changes" name="RoleService changeRole should handle concurrent role changes" time="0.401">
    </testcase>
    <testcase classname="RoleService changeRole should fail when changing role for non-existent user" name="RoleService changeRole should fail when changing role for non-existent user" time="0.365">
    </testcase>
    <testcase classname="RoleService changeRole should fail when changing to same role" name="RoleService changeRole should fail when changing to same role" time="0.395">
    </testcase>
    <testcase classname="RoleService changeRole should rollback on failure" name="RoleService changeRole should rollback on failure" time="0.393">
    </testcase>
    <testcase classname="RoleService validateRole should validate correct roles" name="RoleService validateRole should validate correct roles" time="0.378">
    </testcase>
    <testcase classname="RoleService validateRole should reject invalid roles" name="RoleService validateRole should reject invalid roles" time="0.367">
    </testcase>
    <testcase classname="RoleService getRoleModel should return correct model for each role" name="RoleService getRoleModel should return correct model for each role" time="0.369">
    </testcase>
    <testcase classname="RoleService getRoleModel should throw error for invalid role" name="RoleService getRoleModel should throw error for invalid role" time="0.393">
    </testcase>
  </testsuite>
  <testsuite name="Group Service" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:41" time="0.211" tests="14">
    <testcase classname="Group Service createGroup should successfully create a group (create group)" name="Group Service createGroup should successfully create a group (create group)" time="0.003">
    </testcase>
    <testcase classname="Group Service createGroup should throw error if required fields are missing (create group)" name="Group Service createGroup should throw error if required fields are missing (create group)" time="0.016">
    </testcase>
    <testcase classname="Group Service createGroup should throw error if group creation fails (create group)" name="Group Service createGroup should throw error if group creation fails (create group)" time="0.001">
    </testcase>
    <testcase classname="Group Service getAllGroups should retrieve all groups (get all groups)" name="Group Service getAllGroups should retrieve all groups (get all groups)" time="0.001">
    </testcase>
    <testcase classname="Group Service getAllGroups should throw error if fetching all groups fails (get all groups)" name="Group Service getAllGroups should throw error if fetching all groups fails (get all groups)" time="0.001">
    </testcase>
    <testcase classname="Group Service assignStudentTeacherMembers should assign student-teacher members to a group successfully (assign student teacher members)" name="Group Service assignStudentTeacherMembers should assign student-teacher members to a group successfully (assign student teacher members)" time="0.003">
    </testcase>
    <testcase classname="Group Service assignStudentTeacherMembers should throw error if required fields are missing (assign student teacher members)" name="Group Service assignStudentTeacherMembers should throw error if required fields are missing (assign student teacher members)" time="0.002">
    </testcase>
    <testcase classname="Group Service assignStudentTeacherMembers should throw error if assignment fails (assign student teacher members)" name="Group Service assignStudentTeacherMembers should throw error if assignment fails (assign student teacher members)" time="0.002">
    </testcase>
    <testcase classname="Group Service assignLearnerMembers should assign learner members to a group successfully (assign learner members)" name="Group Service assignLearnerMembers should assign learner members to a group successfully (assign learner members)" time="0.002">
    </testcase>
    <testcase classname="Group Service assignLearnerMembers should throw error if required fields are missing (assign learner members)" name="Group Service assignLearnerMembers should throw error if required fields are missing (assign learner members)" time="0.002">
    </testcase>
    <testcase classname="Group Service assignLearnerMembers should throw error if assignment fails (assign learner members)" name="Group Service assignLearnerMembers should throw error if assignment fails (assign learner members)" time="0.002">
    </testcase>
    <testcase classname="Group Service getGroupById should retrieve a group by ID (get group by id)" name="Group Service getGroupById should retrieve a group by ID (get group by id)" time="0.001">
    </testcase>
    <testcase classname="Group Service getGroupById should throw error if group is not found (get group by id)" name="Group Service getGroupById should throw error if group is not found (get group by id)" time="0.001">
    </testcase>
    <testcase classname="Group Service getGroupById should throw error if fetching the group fails (get group by id)" name="Group Service getGroupById should throw error if fetching the group fails (get group by id)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Course Service" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:41" time="0.26" tests="26">
    <testcase classname="Course Service getAllCourses should retrieve all courses (get all courses)" name="Course Service getAllCourses should retrieve all courses (get all courses)" time="0.003">
    </testcase>
    <testcase classname="Course Service getAllCourses should throw an error when the query fails (get all courses)" name="Course Service getAllCourses should throw an error when the query fails (get all courses)" time="0.014">
    </testcase>
    <testcase classname="Course Service createCourse should create a course successfully (create course)" name="Course Service createCourse should create a course successfully (create course)" time="0.002">
    </testcase>
    <testcase classname="Course Service createCourse should throw error when course name is empty (create course)" name="Course Service createCourse should throw error when course name is empty (create course)" time="0.003">
    </testcase>
    <testcase classname="Course Service createCourse should throw error when course name is too long (create course)" name="Course Service createCourse should throw error when course name is too long (create course)" time="0.003">
    </testcase>
    <testcase classname="Course Service createCourse should throw error when course creation fails (create course)" name="Course Service createCourse should throw error when course creation fails (create course)" time="0.008">
    </testcase>
    <testcase classname="Course Service getCourseById should return the course when it exists (get course by id)" name="Course Service getCourseById should return the course when it exists (get course by id)" time="0.002">
    </testcase>
    <testcase classname="Course Service getCourseById should throw an error when the course does not exist (get course by id)" name="Course Service getCourseById should throw an error when the course does not exist (get course by id)" time="0.002">
    </testcase>
    <testcase classname="Course Service getCourseById should throw an error when the query fails (get course by id)" name="Course Service getCourseById should throw an error when the query fails (get course by id)" time="0.002">
    </testcase>
    <testcase classname="Course Service assignStudentTeacherGroupCourse should successfully assign student teacher group to a course (assign student teacher group course)" name="Course Service assignStudentTeacherGroupCourse should successfully assign student teacher group to a course (assign student teacher group course)" time="0.002">
    </testcase>
    <testcase classname="Course Service assignStudentTeacherGroupCourse should throw an error if the course does not exist (assign student teacher group course)" name="Course Service assignStudentTeacherGroupCourse should throw an error if the course does not exist (assign student teacher group course)" time="0.006">
    </testcase>
    <testcase classname="Course Service assignStudentTeacherGroupCourse should throw an error if assigning fails (assign student teacher group course)" name="Course Service assignStudentTeacherGroupCourse should throw an error if assigning fails (assign student teacher group course)" time="0.002">
    </testcase>
    <testcase classname="Course Service assignLearnerGroupCourse should successfully assign learner group to a course (assign learner group course)" name="Course Service assignLearnerGroupCourse should successfully assign learner group to a course (assign learner group course)" time="0.003">
    </testcase>
    <testcase classname="Course Service assignLearnerGroupCourse should throw an error if the course does not exist (assign learner group course)" name="Course Service assignLearnerGroupCourse should throw an error if the course does not exist (assign learner group course)" time="0.002">
    </testcase>
    <testcase classname="Course Service assignLearnerGroupCourse should throw an error if assigning fails (assign learner group course)" name="Course Service assignLearnerGroupCourse should throw an error if assigning fails (assign learner group course)" time="0.002">
    </testcase>
    <testcase classname="Course Service assignTeacherCourse should successfully assign teacher to a course (assign teacher course)" name="Course Service assignTeacherCourse should successfully assign teacher to a course (assign teacher course)" time="0.002">
    </testcase>
    <testcase classname="Course Service assignTeacherCourse should throw an error if the course does not exist (assign teacher course)" name="Course Service assignTeacherCourse should throw an error if the course does not exist (assign teacher course)" time="0.002">
    </testcase>
    <testcase classname="Course Service assignTeacherCourse should throw an error if assigning fails (assign teacher course)" name="Course Service assignTeacherCourse should throw an error if assigning fails (assign teacher course)" time="0.002">
    </testcase>
    <testcase classname="Course Service softDeleteCourse should successfully soft delete a course (soft delete course)" name="Course Service softDeleteCourse should successfully soft delete a course (soft delete course)" time="0.002">
    </testcase>
    <testcase classname="Course Service softDeleteCourse should throw an error if the course does not exist (soft delete course)" name="Course Service softDeleteCourse should throw an error if the course does not exist (soft delete course)" time="0.002">
    </testcase>
    <testcase classname="Course Service softDeleteCourse should throw an error if deleting the course fails (soft delete course)" name="Course Service softDeleteCourse should throw an error if deleting the course fails (soft delete course)" time="0.002">
    </testcase>
    <testcase classname="Course Service editCourse should successfully edit a course (edit course)" name="Course Service editCourse should successfully edit a course (edit course)" time="0.002">
    </testcase>
    <testcase classname="Course Service editCourse should throw an error if the course does not exist (edit course)" name="Course Service editCourse should throw an error if the course does not exist (edit course)" time="0.002">
    </testcase>
    <testcase classname="Course Service editCourse should throw an error if saving the course fails (edit course)" name="Course Service editCourse should throw an error if saving the course fails (edit course)" time="0.001">
    </testcase>
    <testcase classname="Course Service editCourse should throw an error if the course name is empty (edit course)" name="Course Service editCourse should throw an error if the course name is empty (edit course)" time="0.001">
    </testcase>
    <testcase classname="Course Service editCourse should throw an error if the course name is too long (edit course)" name="Course Service editCourse should throw an error if the course name is too long (edit course)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Security Middleware" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:41" time="1.377" tests="7">
    <testcase classname="Security Middleware CORS should allow requests from allowed origins" name="Security Middleware CORS should allow requests from allowed origins" time="0.032">
    </testcase>
    <testcase classname="Security Middleware CORS should block requests from unauthorized origins" name="Security Middleware CORS should block requests from unauthorized origins" time="0.013">
    </testcase>
    <testcase classname="Security Middleware Helmet should set security headers" name="Security Middleware Helmet should set security headers" time="0.016">
    </testcase>
    <testcase classname="Security Middleware Rate Limiting should limit standard requests" name="Security Middleware Rate Limiting should limit standard requests" time="0.859">
    </testcase>
    <testcase classname="Security Middleware Rate Limiting should apply stricter limits to auth endpoints" name="Security Middleware Rate Limiting should apply stricter limits to auth endpoints" time="0.087">
    </testcase>
    <testcase classname="Security Middleware XSS Protection should sanitize input with potential XSS" name="Security Middleware XSS Protection should sanitize input with potential XSS" time="0.015">
    </testcase>
    <testcase classname="Security Middleware MongoDB Sanitization should remove MongoDB operators from request" name="Security Middleware MongoDB Sanitization should remove MongoDB operators from request" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Log Middleware" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:43" time="0.425" tests="3">
    <testcase classname="Log Middleware should log incoming GET requests" name="Log Middleware should log incoming GET requests" time="0.041">
    </testcase>
    <testcase classname="Log Middleware should log incoming POST requests with body" name="Log Middleware should log incoming POST requests with body" time="0.044">
    </testcase>
    <testcase classname="Log Middleware should handle responses correctly" name="Log Middleware should handle responses correctly" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="User Controller" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:43" time="0.895" tests="9">
    <testcase classname="User Controller login should login user successfully" name="User Controller login should login user successfully" time="0.023">
    </testcase>
    <testcase classname="User Controller login should handle missing CAPTCHA response" name="User Controller login should handle missing CAPTCHA response" time="0.006">
    </testcase>
    <testcase classname="User Controller login should handle CAPTCHA verification failure" name="User Controller login should handle CAPTCHA verification failure" time="0.014">
    </testcase>
    <testcase classname="User Controller login should handle invalid credentials" name="User Controller login should handle invalid credentials" time="0.114">
    </testcase>
    <testcase classname="User Controller login should handle general server errors during login" name="User Controller login should handle general server errors during login" time="0.158">
    </testcase>
    <testcase classname="User Controller logoutUser should logout user successfully" name="User Controller logoutUser should logout user successfully" time="0.013">
    </testcase>
    <testcase classname="User Controller logoutUser should return 401 if no token is provided" name="User Controller logoutUser should return 401 if no token is provided" time="0.002">
    </testcase>
    <testcase classname="User Controller logoutUser should handle errors during logout" name="User Controller logoutUser should handle errors during logout" time="0.007">
    </testcase>
    <testcase classname="User Controller getAllUsers should return all users successfully" name="User Controller getAllUsers should return all users successfully" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Error Middleware" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:44" time="0.332" tests="7">
    <testcase classname="Error Middleware should handle SpecificError" name="Error Middleware should handle SpecificError" time="0.024">
    </testcase>
    <testcase classname="Error Middleware should handle SequelizeUniqueConstraintError" name="Error Middleware should handle SequelizeUniqueConstraintError" time="0.007">
    </testcase>
    <testcase classname="Error Middleware should handle SequelizeValidationError" name="Error Middleware should handle SequelizeValidationError" time="0.008">
    </testcase>
    <testcase classname="Error Middleware should handle JsonWebTokenError" name="Error Middleware should handle JsonWebTokenError" time="0.013">
    </testcase>
    <testcase classname="Error Middleware should handle TokenExpiredError" name="Error Middleware should handle TokenExpiredError" time="0.007">
    </testcase>
    <testcase classname="Error Middleware should handle generic error" name="Error Middleware should handle generic error" time="0.006">
    </testcase>
    <testcase classname="Error Middleware should log error details" name="Error Middleware should log error details" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Auth Middleware" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:45" time="0.575" tests="7">
    <testcase classname="Auth Middleware should authenticate valid token and call next" name="Auth Middleware should authenticate valid token and call next" time="0.005">
    </testcase>
    <testcase classname="Auth Middleware should return 401 when no token provided" name="Auth Middleware should return 401 when no token provided" time="0.011">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for invalid token format" name="Auth Middleware should return 401 for invalid token format" time="0.012">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for expired token" name="Auth Middleware should return 401 for expired token" time="0.006">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for invalid JWT" name="Auth Middleware should return 401 for invalid JWT" time="0.005">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for user not found" name="Auth Middleware should return 401 for user not found" time="0.005">
    </testcase>
    <testcase classname="Auth Middleware should return 500 for database errors" name="Auth Middleware should return 500 for database errors" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Enrollment Controller" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:45" time="0.798" tests="35">
    <testcase classname="Enrollment Controller createEnrollment should create enrollment successfully" name="Enrollment Controller createEnrollment should create enrollment successfully" time="0.023">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle missing required fields" name="Enrollment Controller createEnrollment should handle missing required fields" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle password mismatch" name="Enrollment Controller createEnrollment should handle password mismatch" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle weak password (no number and symbol)" name="Enrollment Controller createEnrollment should handle weak password (no number and symbol)" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle invalid contact number format" name="Enrollment Controller createEnrollment should handle invalid contact number format" time="0.011">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle middle initial too long" name="Enrollment Controller createEnrollment should handle middle initial too long" time="0.005">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle duplicate email error" name="Enrollment Controller createEnrollment should handle duplicate email error" time="0.025">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle Sequelize validation errors" name="Enrollment Controller createEnrollment should handle Sequelize validation errors" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle unexpected server errors during enrollment" name="Enrollment Controller createEnrollment should handle unexpected server errors during enrollment" time="0.01">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentById should retrieve enrollment by ID successfully" name="Enrollment Controller getEnrollmentById should retrieve enrollment by ID successfully" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentById should handle enrollment not found" name="Enrollment Controller getEnrollmentById should handle enrollment not found" time="0.009">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentById should handle unexpected server errors during retrieval" name="Enrollment Controller getEnrollmentById should handle unexpected server errors during retrieval" time="0.011">
    </testcase>
    <testcase classname="Enrollment Controller approveEnrollment should approve enrollment successfully" name="Enrollment Controller approveEnrollment should approve enrollment successfully" time="0.005">
    </testcase>
    <testcase classname="Enrollment Controller approveEnrollment should handle enrollment not found" name="Enrollment Controller approveEnrollment should handle enrollment not found" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller approveEnrollment should handle unexpected server errors during approval" name="Enrollment Controller approveEnrollment should handle unexpected server errors during approval" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller rejectEnrollment should reject enrollment successfully" name="Enrollment Controller rejectEnrollment should reject enrollment successfully" time="0.004">
    </testcase>
    <testcase classname="Enrollment Controller rejectEnrollment should handle enrollment not found during rejection" name="Enrollment Controller rejectEnrollment should handle enrollment not found during rejection" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller rejectEnrollment should handle unexpected server errors during rejection" name="Enrollment Controller rejectEnrollment should handle unexpected server errors during rejection" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller getAllEnrollments should retrieve all enrollments successfully" name="Enrollment Controller getAllEnrollments should retrieve all enrollments successfully" time="0.009">
    </testcase>
    <testcase classname="Enrollment Controller getAllEnrollments should handle unexpected server errors during retrieving all enrollments" name="Enrollment Controller getAllEnrollments should handle unexpected server errors during retrieving all enrollments" time="0.008">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentsBySchool should retrieve enrollments by school ID successfully" name="Enrollment Controller getEnrollmentsBySchool should retrieve enrollments by school ID successfully" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentsBySchool should handle school not found" name="Enrollment Controller getEnrollmentsBySchool should handle school not found" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentsBySchool should handle errors when retrieving enrollments by school" name="Enrollment Controller getEnrollmentsBySchool should handle errors when retrieving enrollments by school" time="0.005">
    </testcase>
    <testcase classname="Enrollment Controller checkEnrollmentStatus should check enrollment status by email successfully" name="Enrollment Controller checkEnrollmentStatus should check enrollment status by email successfully" time="0.002">
    </testcase>
    <testcase classname="Enrollment Controller checkEnrollmentStatus should handle enrollment not found" name="Enrollment Controller checkEnrollmentStatus should handle enrollment not found" time="0.002">
    </testcase>
    <testcase classname="Enrollment Controller checkEnrollmentStatus should handle errors when checking enrollment status" name="Enrollment Controller checkEnrollmentStatus should handle errors when checking enrollment status" time="0.009">
    </testcase>
    <testcase classname="Enrollment Controller checkEnrollmentStatus should handle missing email" name="Enrollment Controller checkEnrollmentStatus should handle missing email" time="0.002">
    </testcase>
    <testcase classname="Enrollment Controller updateEnrollment should update enrollment successfully" name="Enrollment Controller updateEnrollment should update enrollment successfully" time="0.004">
    </testcase>
    <testcase classname="Enrollment Controller updateEnrollment should handle enrollment not found during update" name="Enrollment Controller updateEnrollment should handle enrollment not found during update" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller updateEnrollment should handle Sequelize validation errors during update" name="Enrollment Controller updateEnrollment should handle Sequelize validation errors during update" time="0.01">
    </testcase>
    <testcase classname="Enrollment Controller updateEnrollment should handle duplicate email error during update" name="Enrollment Controller updateEnrollment should handle duplicate email error during update" time="0.012">
    </testcase>
    <testcase classname="Enrollment Controller updateEnrollment should handle unexpected server errors during update" name="Enrollment Controller updateEnrollment should handle unexpected server errors during update" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller deleteEnrollment should delete enrollment successfully" name="Enrollment Controller deleteEnrollment should delete enrollment successfully" time="0.004">
    </testcase>
    <testcase classname="Enrollment Controller deleteEnrollment should handle enrollment not found during delete" name="Enrollment Controller deleteEnrollment should handle enrollment not found during delete" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller deleteEnrollment should handle unexpected server errors during delete" name="Enrollment Controller deleteEnrollment should handle unexpected server errors during delete" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Course Controller" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:46" time="0.679" tests="28">
    <testcase classname="Course Controller getAllCourses should retrieve all courses successfully (get all courses)" name="Course Controller getAllCourses should retrieve all courses successfully (get all courses)" time="0.019">
    </testcase>
    <testcase classname="Course Controller getAllCourses should handle errors (get all courses)" name="Course Controller getAllCourses should handle errors (get all courses)" time="0.022">
    </testcase>
    <testcase classname="Course Controller createCourse should create a new course successfully (create course)" name="Course Controller createCourse should create a new course successfully (create course)" time="0.008">
    </testcase>
    <testcase classname="Course Controller createCourse should handle validation errors (create course)" name="Course Controller createCourse should handle validation errors (create course)" time="0.007">
    </testcase>
    <testcase classname="Course Controller createCourse should handle unique constraint errors (create course)" name="Course Controller createCourse should handle unique constraint errors (create course)" time="0.011">
    </testcase>
    <testcase classname="Course Controller createCourse should handle when course name is too long (create course)" name="Course Controller createCourse should handle when course name is too long (create course)" time="0.006">
    </testcase>
    <testcase classname="Course Controller createCourse should handle error when creating the course (create course)" name="Course Controller createCourse should handle error when creating the course (create course)" time="0.005">
    </testcase>
    <testcase classname="Course Controller assignStudentTeacherGroupCourse should assign a student-teacher group to a course (assign student teacher group course)" name="Course Controller assignStudentTeacherGroupCourse should assign a student-teacher group to a course (assign student teacher group course)" time="0.004">
    </testcase>
    <testcase classname="Course Controller assignStudentTeacherGroupCourse should handle when course not found (assign student teacher group course)" name="Course Controller assignStudentTeacherGroupCourse should handle when course not found (assign student teacher group course)" time="0.008">
    </testcase>
    <testcase classname="Course Controller assignStudentTeacherGroupCourse should handle error when assigning the student-teacher group (assign student teacher group course)" name="Course Controller assignStudentTeacherGroupCourse should handle error when assigning the student-teacher group (assign student teacher group course)" time="0.008">
    </testcase>
    <testcase classname="Course Controller assignLearnerGroupCourse should assign a learner group to a course (assign learner group course)" name="Course Controller assignLearnerGroupCourse should assign a learner group to a course (assign learner group course)" time="0.004">
    </testcase>
    <testcase classname="Course Controller assignLearnerGroupCourse should handle when course not found (assign learner group course)" name="Course Controller assignLearnerGroupCourse should handle when course not found (assign learner group course)" time="0.005">
    </testcase>
    <testcase classname="Course Controller assignLearnerGroupCourse should handle error when assigning the learner group (assign learner group course)" name="Course Controller assignLearnerGroupCourse should handle error when assigning the learner group (assign learner group course)" time="0.008">
    </testcase>
    <testcase classname="Course Controller assignTeacherCourse should assign a teacher to a course (assign teacher course)" name="Course Controller assignTeacherCourse should assign a teacher to a course (assign teacher course)" time="0.004">
    </testcase>
    <testcase classname="Course Controller assignTeacherCourse should handle when course not found (assign teacher course)" name="Course Controller assignTeacherCourse should handle when course not found (assign teacher course)" time="0.004">
    </testcase>
    <testcase classname="Course Controller assignTeacherCourse should handle error when assigning the teacher (assign teacher course)" name="Course Controller assignTeacherCourse should handle error when assigning the teacher (assign teacher course)" time="0.005">
    </testcase>
    <testcase classname="Course Controller getCourseById should return a course by ID successfully (get course by id)" name="Course Controller getCourseById should return a course by ID successfully (get course by id)" time="0.002">
    </testcase>
    <testcase classname="Course Controller getCourseById should handle when course not found (get course by id)" name="Course Controller getCourseById should handle when course not found (get course by id)" time="0.005">
    </testcase>
    <testcase classname="Course Controller getCourseById should handle error when fetching the course (get course by id)" name="Course Controller getCourseById should handle error when fetching the course (get course by id)" time="0.006">
    </testcase>
    <testcase classname="Course Controller softDeleteCourse should soft delete a course successfully (soft delete course)" name="Course Controller softDeleteCourse should soft delete a course successfully (soft delete course)" time="0.003">
    </testcase>
    <testcase classname="Course Controller softDeleteCourse should handle when course not found (soft delete course)" name="Course Controller softDeleteCourse should handle when course not found (soft delete course)" time="0.005">
    </testcase>
    <testcase classname="Course Controller softDeleteCourse should handle error when deleting the course (soft delete course)" name="Course Controller softDeleteCourse should handle error when deleting the course (soft delete course)" time="0.006">
    </testcase>
    <testcase classname="Course Controller editCourse should edit a course successfully (edit course)" name="Course Controller editCourse should edit a course successfully (edit course)" time="0.003">
    </testcase>
    <testcase classname="Course Controller editCourse should handle when course not found (edit course)" name="Course Controller editCourse should handle when course not found (edit course)" time="0.008">
    </testcase>
    <testcase classname="Course Controller editCourse should handle course name is required (edit course)" name="Course Controller editCourse should handle course name is required (edit course)" time="0.005">
    </testcase>
    <testcase classname="Course Controller editCourse should handle course name is too long (edit course)" name="Course Controller editCourse should handle course name is too long (edit course)" time="0.004">
    </testcase>
    <testcase classname="Course Controller editCourse should handle error when editing the course (edit course)" name="Course Controller editCourse should handle error when editing the course (edit course)" time="0.005">
    </testcase>
    <testcase classname="Course Controller editCourse should handle course name already exists (edit course)" name="Course Controller editCourse should handle course name already exists (edit course)" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Group Controller" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:47" time="0.577" tests="14">
    <testcase classname="Group Controller getAllGroups should retrieve all groups successfully (get all groups)" name="Group Controller getAllGroups should retrieve all groups successfully (get all groups)" time="0.011">
    </testcase>
    <testcase classname="Group Controller getAllGroups should handle errors when retrieving all groups (get all groups)" name="Group Controller getAllGroups should handle errors when retrieving all groups (get all groups)" time="0.024">
    </testcase>
    <testcase classname="Group Controller createGroup should create a new group successfully (create group)" name="Group Controller createGroup should create a new group successfully (create group)" time="0.005">
    </testcase>
    <testcase classname="Group Controller createGroup should handle missing fields when creating a group (create group)" name="Group Controller createGroup should handle missing fields when creating a group (create group)" time="0.007">
    </testcase>
    <testcase classname="Group Controller createGroup should handle errors when creating a group (create group)" name="Group Controller createGroup should handle errors when creating a group (create group)" time="0.01">
    </testcase>
    <testcase classname="Group Controller getGroupById should return a group by ID successfully (get group by id)" name="Group Controller getGroupById should return a group by ID successfully (get group by id)" time="0.005">
    </testcase>
    <testcase classname="Group Controller getGroupById should handle when group is not found (get group by id)" name="Group Controller getGroupById should handle when group is not found (get group by id)" time="0.001">
    </testcase>
    <testcase classname="Group Controller getGroupById should handle errors when retrieving a group by ID (get group by id)" name="Group Controller getGroupById should handle errors when retrieving a group by ID (get group by id)" time="0.007">
    </testcase>
    <testcase classname="Group Controller assignLearnerMembers should assign learners to a group successfully (assign learner members)" name="Group Controller assignLearnerMembers should assign learners to a group successfully (assign learner members)" time="0.004">
    </testcase>
    <testcase classname="Group Controller assignLearnerMembers should handle errors when assigning learners to a group (assign learner members)" name="Group Controller assignLearnerMembers should handle errors when assigning learners to a group (assign learner members)" time="0.009">
    </testcase>
    <testcase classname="Group Controller assignLearnerMembers should handle missing fields when assigning learners to a group (assign learner members)" name="Group Controller assignLearnerMembers should handle missing fields when assigning learners to a group (assign learner members)" time="0.007">
    </testcase>
    <testcase classname="Group Controller assignStudentTeacherMembers should assign student teachers to a group successfully (assign student teacher members)" name="Group Controller assignStudentTeacherMembers should assign student teachers to a group successfully (assign student teacher members)" time="0.006">
    </testcase>
    <testcase classname="Group Controller assignStudentTeacherMembers should handle errors when assigning student teachers to a group (assign student teacher members)" name="Group Controller assignStudentTeacherMembers should handle errors when assigning student teachers to a group (assign student teacher members)" time="0.007">
    </testcase>
    <testcase classname="Group Controller assignStudentTeacherMembers should handle missing fields when assigning student teachers to a group (assign student teacher members)" name="Group Controller assignStudentTeacherMembers should handle missing fields when assigning student teachers to a group (assign student teacher members)" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="AuthController" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:47" time="0.48" tests="5">
    <testcase classname="AuthController refreshToken should return 401 if refresh token is not provided" name="AuthController refreshToken should return 401 if refresh token is not provided" time="0.006">
    </testcase>
    <testcase classname="AuthController refreshToken should return 401 if refresh token is invalid" name="AuthController refreshToken should return 401 if refresh token is invalid" time="0.001">
    </testcase>
    <testcase classname="AuthController refreshToken should return 401 if user is not found" name="AuthController refreshToken should return 401 if user is not found" time="0.001">
    </testcase>
    <testcase classname="AuthController refreshToken should generate new access token for valid refresh token" name="AuthController refreshToken should generate new access token for valid refresh token" time="0.005">
    </testcase>
    <testcase classname="AuthController refreshToken should handle unexpected errors during token refresh" name="AuthController refreshToken should handle unexpected errors during token refresh" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Database Configuration" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:48" time="0.496" tests="6">
    <testcase classname="Database Configuration should create Sequelize instance with correct config" name="Database Configuration should create Sequelize instance with correct config" time="0.004">
    </testcase>
    <testcase classname="Database Configuration should establish database connection successfully" name="Database Configuration should establish database connection successfully" time="0.03">
    </testcase>
    <testcase classname="Database Configuration should handle connection failure" name="Database Configuration should handle connection failure" time="0.017">
    </testcase>
    <testcase classname="Database Configuration should handle sync failure" name="Database Configuration should handle sync failure" time="0.004">
    </testcase>
    <testcase classname="Database Configuration Environment Configuration should validate required environment variables" name="Database Configuration Environment Configuration should validate required environment variables" time="0.003">
    </testcase>
    <testcase classname="Database Configuration Connection Timeout should handle connection timeout" name="Database Configuration Connection Timeout should handle connection timeout" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Users API Integration Tests" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:48" time="1.769" tests="4">
    <testcase classname="Users API Integration Tests POST /users/login should log in a user and return a valid token" name="Users API Integration Tests POST /users/login should log in a user and return a valid token" time="0.153">
    </testcase>
    <testcase classname="Users API Integration Tests GET /users should retrieve all users" name="Users API Integration Tests GET /users should retrieve all users" time="0.054">
    </testcase>
    <testcase classname="Users API Integration Tests GET /users/:id should retrieve a specific user when authorized" name="Users API Integration Tests GET /users/:id should retrieve a specific user when authorized" time="0.068">
    </testcase>
    <testcase classname="Users API Integration Tests GET /users/:id should return 401 Unauthorized when token is missing" name="Users API Integration Tests GET /users/:id should return 401 Unauthorized when token is missing" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="Course Endpoints (Integration Tests)" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:50" time="1.758" tests="4">
    <testcase classname="Course Endpoints (Integration Tests) POST /courses should create a new course" name="Course Endpoints (Integration Tests) POST /courses should create a new course" time="0.045">
    </testcase>
    <testcase classname="Course Endpoints (Integration Tests) POST /courses error handling should handle empty course name" name="Course Endpoints (Integration Tests) POST /courses error handling should handle empty course name" time="0.047">
    </testcase>
    <testcase classname="Course Endpoints (Integration Tests) POST /courses error handling should handle course name too long" name="Course Endpoints (Integration Tests) POST /courses error handling should handle course name too long" time="0.032">
    </testcase>
    <testcase classname="Course Endpoints (Integration Tests) GET /courses should retrieve all courses" name="Course Endpoints (Integration Tests) GET /courses should retrieve all courses" time="0.053">
    </testcase>
  </testsuite>
  <testsuite name="Token Refresh API" errors="0" failures="0" skipped="0" timestamp="2025-02-27T11:16:52" time="1.318" tests="4">
    <testcase classname="Token Refresh API should return new access token when valid refresh token is provided" name="Token Refresh API should return new access token when valid refresh token is provided" time="0.067">
    </testcase>
    <testcase classname="Token Refresh API should reject with 401 when invalid refresh token is provided" name="Token Refresh API should reject with 401 when invalid refresh token is provided" time="0.029">
    </testcase>
    <testcase classname="Token Refresh API should reject with 401 when refresh token is not provided" name="Token Refresh API should reject with 401 when refresh token is not provided" time="0.029">
    </testcase>
    <testcase classname="Token Refresh API should reject with 401 when user has no stored refresh token" name="Token Refresh API should reject with 401 when user has no stored refresh token" time="0.033">
    </testcase>
  </testsuite>
</testsuites>