<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="945" failures="0" errors="0" time="223.561">
  <testsuite name="UserService" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:12:46" time="69.678" tests="23">
    <testcase classname="UserService Validation should validate email format" name="UserService Validation should validate email format" time="1.093">
    </testcase>
    <testcase classname="UserService Validation should validate contact number format" name="UserService Validation should validate contact number format" time="0.68">
    </testcase>
    <testcase classname="UserService Validation should validate role" name="UserService Validation should validate role" time="0.699">
    </testcase>
    <testcase classname="UserService Validation should validate password length" name="UserService Validation should validate password length" time="0.68">
    </testcase>
    <testcase classname="UserService User Creation should create teacher user with role data" name="UserService User Creation should create teacher user with role data" time="3.741">
    </testcase>
    <testcase classname="UserService User Creation should fail creating user with existing email" name="UserService User Creation should fail creating user with existing email" time="2.957">
    </testcase>
    <testcase classname="UserService Authentication should login user with valid credentials" name="UserService Authentication should login user with valid credentials" time="3.513">
    </testcase>
    <testcase classname="UserService Authentication should fail logout with an invalid token" name="UserService Authentication should fail logout with an invalid token" time="0.684">
    </testcase>
    <testcase classname="UserService User Retrieval should get user by id with role details" name="UserService User Retrieval should get user by id with role details" time="3.65">
    </testcase>
    <testcase classname="UserService User Retrieval should fail with non-existent user id" name="UserService User Retrieval should fail with non-existent user id" time="0.695">
    </testcase>
    <testcase classname="UserService User Retrieval should get paginated users" name="UserService User Retrieval should get paginated users" time="9.612">
    </testcase>
    <testcase classname="UserService User Update should update user data" name="UserService User Update should update user data" time="2.876">
    </testcase>
    <testcase classname="UserService Password Management should change password with valid credentials" name="UserService Password Management should change password with valid credentials" time="3.705">
    </testcase>
    <testcase classname="UserService Password Management should fail password change with invalid old password" name="UserService Password Management should fail password change with invalid old password" time="3.062">
    </testcase>
    <testcase classname="UserService User Deletion should delete existing user" name="UserService User Deletion should delete existing user" time="3.864">
    </testcase>
    <testcase classname="UserService User Deletion should throw error for non-existent user" name="UserService User Deletion should throw error for non-existent user" time="3.453">
    </testcase>
    <testcase classname="UserService User Deletion should rollback transaction on error" name="UserService User Deletion should rollback transaction on error" time="2.911">
    </testcase>
    <testcase classname="UserService Role and School Queries should get users by role" name="UserService Role and School Queries should get users by role" time="3.526">
    </testcase>
    <testcase classname="UserService Role and School Queries should get users by school" name="UserService Role and School Queries should get users by school" time="3.311">
    </testcase>
    <testcase classname="UserService Password Reset should fail for non-existent email" name="UserService Password Reset should fail for non-existent email" time="2.974">
    </testcase>
    <testcase classname="UserService Password Reset should fail verification for incorrect reset code" name="UserService Password Reset should fail verification for incorrect reset code" time="2.91">
    </testcase>
    <testcase classname="UserService Password Reset should reset password with valid reset code" name="UserService Password Reset should reset password with valid reset code" time="3.609">
    </testcase>
    <testcase classname="UserService Password Reset should fail to reset password for non-existent user" name="UserService Password Reset should fail to reset password for non-existent user" time="2.945">
    </testcase>
  </testsuite>
  <testsuite name="Learner Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:13:56" time="13.655" tests="16">
    <testcase classname="Learner Model Creation should create a valid learner" name="Learner Model Creation should create a valid learner" time="1.017">
    </testcase>
    <testcase classname="Learner Model Creation should fail with invalid year level" name="Learner Model Creation should fail with invalid year level" time="0.822">
    </testcase>
    <testcase classname="Learner Model Creation should fail without enrollment_id" name="Learner Model Creation should fail without enrollment_id" time="0.766">
    </testcase>
    <testcase classname="Learner Model Associations should associate with enrollment" name="Learner Model Associations should associate with enrollment" time="0.765">
    </testcase>
    <testcase classname="Learner Model Associations should associate with user" name="Learner Model Associations should associate with user" time="0.763">
    </testcase>
    <testcase classname="Learner Model Associations should allow null group association" name="Learner Model Associations should allow null group association" time="0.75">
    </testcase>
    <testcase classname="Learner Model Associations should associate with user through belongsTo" name="Learner Model Associations should associate with user through belongsTo" time="0.754">
    </testcase>
    <testcase classname="Learner Model Associations should associate with group through belongsTo" name="Learner Model Associations should associate with group through belongsTo" time="0.765">
    </testcase>
    <testcase classname="Learner Model Associations should delete learner when user is deleted" name="Learner Model Associations should delete learner when user is deleted" time="1.235">
    </testcase>
    <testcase classname="Learner Model Constraints should enforce unique user_id" name="Learner Model Constraints should enforce unique user_id" time="0.76">
    </testcase>
    <testcase classname="Learner Model Validation should fail with zero year level" name="Learner Model Validation should fail with zero year level" time="0.744">
    </testcase>
    <testcase classname="Learner Model Validation should fail with non-existent user_id" name="Learner Model Validation should fail with non-existent user_id" time="0.762">
    </testcase>
    <testcase classname="Learner Model Validation should fail with non-existent enrollment_id" name="Learner Model Validation should fail with non-existent enrollment_id" time="0.755">
    </testcase>
    <testcase classname="Learner Model Query Operations should find learner with associations" name="Learner Model Query Operations should find learner with associations" time="0.752">
    </testcase>
    <testcase classname="Learner Model Update Operations should update year level" name="Learner Model Update Operations should update year level" time="0.747">
    </testcase>
    <testcase classname="Learner Model Data Integrity should cascade delete when enrollment is deleted" name="Learner Model Data Integrity should cascade delete when enrollment is deleted" time="0.762">
    </testcase>
  </testsuite>
  <testsuite name="RoleService" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:14:10" time="13.253" tests="18">
    <testcase classname="RoleService assignRole should assign teacher role" name="RoleService assignRole should assign teacher role" time="1.02">
    </testcase>
    <testcase classname="RoleService assignRole should fail with invalid role" name="RoleService assignRole should fail with invalid role" time="0.697">
    </testcase>
    <testcase classname="RoleService assignRole should fail with non-existent user" name="RoleService assignRole should fail with non-existent user" time="0.688">
    </testcase>
    <testcase classname="RoleService assignRole should fail when assigning learner without enrollment_id" name="RoleService assignRole should fail when assigning learner without enrollment_id" time="0.696">
    </testcase>
    <testcase classname="RoleService assignRole should fail when assigning student_teacher without required fields" name="RoleService assignRole should fail when assigning student_teacher without required fields" time="0.677">
    </testcase>
    <testcase classname="RoleService assignRole should fail when assigning learner without year_level" name="RoleService assignRole should fail when assigning learner without year_level" time="0.699">
    </testcase>
    <testcase classname="RoleService assignRole should fail when assigning same role" name="RoleService assignRole should fail when assigning same role" time="0.68">
    </testcase>
    <testcase classname="RoleService changeRole should change from teacher to admin" name="RoleService changeRole should change from teacher to admin" time="0.692">
    </testcase>
    <testcase classname="RoleService changeRole should maintain role data integrity during change" name="RoleService changeRole should maintain role data integrity during change" time="0.694">
    </testcase>
    <testcase classname="RoleService changeRole should validate role data during change" name="RoleService changeRole should validate role data during change" time="0.691">
    </testcase>
    <testcase classname="RoleService changeRole should handle concurrent role changes" name="RoleService changeRole should handle concurrent role changes" time="0.685">
    </testcase>
    <testcase classname="RoleService changeRole should fail when changing role for non-existent user" name="RoleService changeRole should fail when changing role for non-existent user" time="0.658">
    </testcase>
    <testcase classname="RoleService changeRole should fail when changing to same role" name="RoleService changeRole should fail when changing to same role" time="0.677">
    </testcase>
    <testcase classname="RoleService changeRole should rollback on failure" name="RoleService changeRole should rollback on failure" time="0.677">
    </testcase>
    <testcase classname="RoleService validateRole should validate correct roles" name="RoleService validateRole should validate correct roles" time="0.669">
    </testcase>
    <testcase classname="RoleService validateRole should reject invalid roles" name="RoleService validateRole should reject invalid roles" time="0.657">
    </testcase>
    <testcase classname="RoleService getRoleModel should return correct model for each role" name="RoleService getRoleModel should return correct model for each role" time="0.663">
    </testcase>
    <testcase classname="RoleService getRoleModel should throw error for invalid role" name="RoleService getRoleModel should throw error for invalid role" time="0.667">
    </testcase>
  </testsuite>
  <testsuite name="Enrollment Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:14:23" time="10.871" tests="16">
    <testcase classname="Enrollment Model Creation should create valid enrollment" name="Enrollment Model Creation should create valid enrollment" time="0.847">
    </testcase>
    <testcase classname="Enrollment Model Validation should require all mandatory fields" name="Enrollment Model Validation should require all mandatory fields" time="0.676">
    </testcase>
    <testcase classname="Enrollment Model Validation should validate email format" name="Enrollment Model Validation should validate email format" time="0.634">
    </testcase>
    <testcase classname="Enrollment Model Validation should validate year level range" name="Enrollment Model Validation should validate year level range" time="0.641">
    </testcase>
    <testcase classname="Enrollment Model Validation should validate status values" name="Enrollment Model Validation should validate status values" time="0.678">
    </testcase>
    <testcase classname="Enrollment Model Validation should not allow future birth dates" name="Enrollment Model Validation should not allow future birth dates" time="0.608">
    </testcase>
    <testcase classname="Enrollment Model Validation should allow valid past birth dates" name="Enrollment Model Validation should allow valid past birth dates" time="0.598">
    </testcase>
    <testcase classname="Enrollment Model Associations should associate with school" name="Enrollment Model Associations should associate with school" time="0.622">
    </testcase>
    <testcase classname="Enrollment Model Associations should associate with admin" name="Enrollment Model Associations should associate with admin" time="0.596">
    </testcase>
    <testcase classname="Enrollment Model Status Management should update enrollment status" name="Enrollment Model Status Management should update enrollment status" time="0.623">
    </testcase>
    <testcase classname="Enrollment Model Soft Delete should soft delete enrollment" name="Enrollment Model Soft Delete should soft delete enrollment" time="0.597">
    </testcase>
    <testcase classname="Enrollment Model Query Operations should find enrollments by status" name="Enrollment Model Query Operations should find enrollments by status" time="0.635">
    </testcase>
    <testcase classname="Enrollment Model Query Operations should paginate enrollments" name="Enrollment Model Query Operations should paginate enrollments" time="0.615">
    </testcase>
    <testcase classname="Enrollment Model Data Updates should update enrollment details" name="Enrollment Model Data Updates should update enrollment details" time="0.621">
    </testcase>
    <testcase classname="Enrollment Model Data Integrity should enforce unique email" name="Enrollment Model Data Integrity should enforce unique email" time="0.628">
    </testcase>
    <testcase classname="Enrollment Model Data Integrity should validate contact number format" name="Enrollment Model Data Integrity should validate contact number format" time="0.594">
    </testcase>
  </testsuite>
  <testsuite name="Course Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:14:34" time="8.689" tests="14">
    <testcase classname="Course Model Creation should create a valid course" name="Course Model Creation should create a valid course" time="0.894">
    </testcase>
    <testcase classname="Course Model Creation should fail without required fields" name="Course Model Creation should fail without required fields" time="0.602">
    </testcase>
    <testcase classname="Course Model Validation should validate name length" name="Course Model Validation should validate name length" time="0.532">
    </testcase>
    <testcase classname="Course Model Validation should validate description length" name="Course Model Validation should validate description length" time="0.537">
    </testcase>
    <testcase classname="Course Model Validation should fail with empty course name" name="Course Model Validation should fail with empty course name" time="0.514">
    </testcase>
    <testcase classname="Course Model Validation should fail with non-existent teacher_id" name="Course Model Validation should fail with non-existent teacher_id" time="0.54">
    </testcase>
    <testcase classname="Course Model Validation should fail with non-existent student_teacher_group_id" name="Course Model Validation should fail with non-existent student_teacher_group_id" time="0.536">
    </testcase>
    <testcase classname="Course Model Associations should associate with teacher" name="Course Model Associations should associate with teacher" time="0.564">
    </testcase>
    <testcase classname="Course Model Associations should associate with groups" name="Course Model Associations should associate with groups" time="0.528">
    </testcase>
    <testcase classname="Course Model Constraints should enforce unique course name" name="Course Model Constraints should enforce unique course name" time="0.545">
    </testcase>
    <testcase classname="Course Model Soft Deletion should soft delete course" name="Course Model Soft Deletion should soft delete course" time="0.536">
    </testcase>
    <testcase classname="Course Model Multiple Courses should allow multiple courses per teacher" name="Course Model Multiple Courses should allow multiple courses per teacher" time="0.555">
    </testcase>
    <testcase classname="Course Model Updates should update course details" name="Course Model Updates should update course details" time="0.528">
    </testcase>
    <testcase classname="Course Model Query Operations should find courses with pagination" name="Course Model Query Operations should find courses with pagination" time="0.544">
    </testcase>
  </testsuite>
  <testsuite name="School Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:14:42" time="8.89" tests="15">
    <testcase classname="School Model Creation should create a valid school" name="School Model Creation should create a valid school" time="0.721">
    </testcase>
    <testcase classname="School Model Creation should fail without required fields" name="School Model Creation should fail without required fields" time="0.59">
    </testcase>
    <testcase classname="School Model Validation should validate name is required" name="School Model Validation should validate name is required" time="0.519">
    </testcase>
    <testcase classname="School Model Validation should validate address is required" name="School Model Validation should validate address is required" time="0.511">
    </testcase>
    <testcase classname="School Model Validation should validate contact number format" name="School Model Validation should validate contact number format" time="0.5">
    </testcase>
    <testcase classname="School Model Validation should accept valid contact number formats" name="School Model Validation should accept valid contact number formats" time="0.523">
    </testcase>
    <testcase classname="School Model Validation should validate name length" name="School Model Validation should validate name length" time="0.527">
    </testcase>
    <testcase classname="School Model Validation should not allow empty contact number" name="School Model Validation should not allow empty contact number" time="0.504">
    </testcase>
    <testcase classname="School Model Associations should have many users" name="School Model Associations should have many users" time="0.513">
    </testcase>
    <testcase classname="School Model Constraints should enforce unique school name" name="School Model Constraints should enforce unique school name" time="0.528">
    </testcase>
    <testcase classname="School Model Soft Deletion should soft delete school" name="School Model Soft Deletion should soft delete school" time="0.516">
    </testcase>
    <testcase classname="School Model Updates should update school details" name="School Model Updates should update school details" time="0.51">
    </testcase>
    <testcase classname="School Model Cascade Behavior should not delete school with active users" name="School Model Cascade Behavior should not delete school with active users" time="0.531">
    </testcase>
    <testcase classname="School Model Query Operations should find schools with pagination" name="School Model Query Operations should find schools with pagination" time="0.53">
    </testcase>
    <testcase classname="School Model Query Operations should search schools by name" name="School Model Query Operations should search schools by name" time="0.733">
    </testcase>
  </testsuite>
  <testsuite name="StudentTeacher Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:14:51" time="7.703" tests="12">
    <testcase classname="StudentTeacher Model Creation should create a valid student teacher" name="StudentTeacher Model Creation should create a valid student teacher" time="0.704">
    </testcase>
    <testcase classname="StudentTeacher Model Creation should fail without required fields" name="StudentTeacher Model Creation should fail without required fields" time="0.705">
    </testcase>
    <testcase classname="StudentTeacher Model Validation should require section" name="StudentTeacher Model Validation should require section" time="0.664">
    </testcase>
    <testcase classname="StudentTeacher Model Validation should require department" name="StudentTeacher Model Validation should require department" time="0.58">
    </testcase>
    <testcase classname="StudentTeacher Model Validation should not allow empty section" name="StudentTeacher Model Validation should not allow empty section" time="0.597">
    </testcase>
    <testcase classname="StudentTeacher Model Associations should associate with user" name="StudentTeacher Model Associations should associate with user" time="0.553">
    </testcase>
    <testcase classname="StudentTeacher Model Associations should associate with group" name="StudentTeacher Model Associations should associate with group" time="0.532">
    </testcase>
    <testcase classname="StudentTeacher Model Constraints should enforce unique user_id" name="StudentTeacher Model Constraints should enforce unique user_id" time="0.559">
    </testcase>
    <testcase classname="StudentTeacher Model Query Operations should find by department" name="StudentTeacher Model Query Operations should find by department" time="0.526">
    </testcase>
    <testcase classname="StudentTeacher Model Soft Delete should soft delete student teacher" name="StudentTeacher Model Soft Delete should soft delete student teacher" time="0.524">
    </testcase>
    <testcase classname="StudentTeacher Model Soft Delete should cascade delete when user is deleted" name="StudentTeacher Model Soft Delete should cascade delete when user is deleted" time="0.534">
    </testcase>
    <testcase classname="StudentTeacher Model Updates should update student teacher details" name="StudentTeacher Model Updates should update student teacher details" time="0.532">
    </testcase>
  </testsuite>
  <testsuite name="Group Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:14:59" time="6.819" tests="11">
    <testcase classname="Group Model Creation should create a valid group" name="Group Model Creation should create a valid group" time="0.709">
    </testcase>
    <testcase classname="Group Model Creation should fail without required fields" name="Group Model Creation should fail without required fields" time="0.567">
    </testcase>
    <testcase classname="Group Model Validation should validate group type" name="Group Model Validation should validate group type" time="0.536">
    </testcase>
    <testcase classname="Group Model Validation should not allow empty name" name="Group Model Validation should not allow empty name" time="0.513">
    </testcase>
    <testcase classname="Group Model Associations should have many learners" name="Group Model Associations should have many learners" time="0.731">
    </testcase>
    <testcase classname="Group Model Associations should have many student teachers when type is student_teacher" name="Group Model Associations should have many student teachers when type is student_teacher" time="0.567">
    </testcase>
    <testcase classname="Group Model Query Operations should find groups by type" name="Group Model Query Operations should find groups by type" time="0.52">
    </testcase>
    <testcase classname="Group Model Soft Delete should soft delete group" name="Group Model Soft Delete should soft delete group" time="0.51">
    </testcase>
    <testcase classname="Group Model Course Associations should associate with courses" name="Group Model Course Associations should associate with courses" time="0.535">
    </testcase>
    <testcase classname="Group Model Updates should update group name" name="Group Model Updates should update group name" time="0.51">
    </testcase>
    <testcase classname="Group Model Cascade Delete should handle associations on delete" name="Group Model Cascade Delete should handle associations on delete" time="0.501">
    </testcase>
  </testsuite>
  <testsuite name="Module Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:06" time="6.717" tests="9">
    <testcase classname="Module Model Creation should create a valid module" name="Module Model Creation should create a valid module" time="0.853">
    </testcase>
    <testcase classname="Module Model Creation should fail without required fields" name="Module Model Creation should fail without required fields" time="0.705">
    </testcase>
    <testcase classname="Module Model Validation should validate name length" name="Module Model Validation should validate name length" time="0.668">
    </testcase>
    <testcase classname="Module Model Validation should validate description length" name="Module Model Validation should validate description length" time="0.629">
    </testcase>
    <testcase classname="Module Model Validation should fail with empty module name" name="Module Model Validation should fail with empty module name" time="0.625">
    </testcase>
    <testcase classname="Module Model Associations should associate with course" name="Module Model Associations should associate with course" time="0.63">
    </testcase>
    <testcase classname="Module Model Soft Deletion should soft delete module" name="Module Model Soft Deletion should soft delete module" time="0.617">
    </testcase>
    <testcase classname="Module Model Updates should update module details" name="Module Model Updates should update module details" time="0.615">
    </testcase>
    <testcase classname="Module Model Query Operations should find modules with pagination" name="Module Model Query Operations should find modules with pagination" time="0.63">
    </testcase>
  </testsuite>
  <testsuite name="Teacher Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:13" time="5.993" tests="9">
    <testcase classname="Teacher Model Creation should create a valid teacher" name="Teacher Model Creation should create a valid teacher" time="0.884">
    </testcase>
    <testcase classname="Teacher Model Creation should fail without user_id" name="Teacher Model Creation should fail without user_id" time="0.647">
    </testcase>
    <testcase classname="Teacher Model Creation should fail with non-existent user_id" name="Teacher Model Creation should fail with non-existent user_id" time="0.56">
    </testcase>
    <testcase classname="Teacher Model Associations should associate with user" name="Teacher Model Associations should associate with user" time="0.558">
    </testcase>
    <testcase classname="Teacher Model Associations should have many courses" name="Teacher Model Associations should have many courses" time="0.554">
    </testcase>
    <testcase classname="Teacher Model Deletion should soft delete teacher" name="Teacher Model Deletion should soft delete teacher" time="0.542">
    </testcase>
    <testcase classname="Teacher Model Constraints should enforce unique user_id" name="Teacher Model Constraints should enforce unique user_id" time="0.532">
    </testcase>
    <testcase classname="Teacher Model Course Management should allow multiple courses" name="Teacher Model Course Management should allow multiple courses" time="0.545">
    </testcase>
    <testcase classname="Teacher Model Query Operations should find active teachers" name="Teacher Model Query Operations should find active teachers" time="0.555">
    </testcase>
  </testsuite>
  <testsuite name="Admin Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:19" time="5.854" tests="9">
    <testcase classname="Admin Model Creation should create a valid admin" name="Admin Model Creation should create a valid admin" time="0.763">
    </testcase>
    <testcase classname="Admin Model Creation should fail without user_id" name="Admin Model Creation should fail without user_id" time="0.611">
    </testcase>
    <testcase classname="Admin Model Associations should associate with user" name="Admin Model Associations should associate with user" time="0.567">
    </testcase>
    <testcase classname="Admin Model Associations should have many enrollments" name="Admin Model Associations should have many enrollments" time="0.563">
    </testcase>
    <testcase classname="Admin Model Constraints should enforce unique user_id" name="Admin Model Constraints should enforce unique user_id" time="0.556">
    </testcase>
    <testcase classname="Admin Model Soft Delete should soft delete admin" name="Admin Model Soft Delete should soft delete admin" time="0.554">
    </testcase>
    <testcase classname="Admin Model Soft Delete should cascade delete when user is deleted" name="Admin Model Soft Delete should cascade delete when user is deleted" time="0.554">
    </testcase>
    <testcase classname="Admin Model Attributes should have all required attributes" name="Admin Model Attributes should have all required attributes" time="0.523">
    </testcase>
    <testcase classname="Admin Model Query Operations should find active admins" name="Admin Model Query Operations should find active admins" time="0.54">
    </testcase>
  </testsuite>
  <testsuite name="Assessment API Endpoints (Integration Tests)" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:25" time="5.339" tests="23">
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments should create a new assessment when teacher is authenticated" name="Assessment API Endpoints (Integration Tests) POST /api/assessments should create a new assessment when teacher is authenticated" time="0.055">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments should return 401 when no auth token is provided" name="Assessment API Endpoints (Integration Tests) POST /api/assessments should return 401 when no auth token is provided" time="0.05">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments should return 403 when learner tries to create assessment" name="Assessment API Endpoints (Integration Tests) POST /api/assessments should return 403 when learner tries to create assessment" time="0.071">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) GET /api/assessments/module/:moduleId should get all assessments for a module when authenticated" name="Assessment API Endpoints (Integration Tests) GET /api/assessments/module/:moduleId should get all assessments for a module when authenticated" time="0.063">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) GET /api/assessments/module/:moduleId should return 401 when no auth token is provided" name="Assessment API Endpoints (Integration Tests) GET /api/assessments/module/:moduleId should return 401 when no auth token is provided" time="0.065">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) GET /api/assessments/module/:moduleId should return 404 for non-existent module" name="Assessment API Endpoints (Integration Tests) GET /api/assessments/module/:moduleId should return 404 for non-existent module" time="0.133">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId should get assessment by ID when authenticated" name="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId should get assessment by ID when authenticated" time="0.04">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId should include questions when includeQuestions=true" name="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId should include questions when includeQuestions=true" time="0.123">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId should return 404 for non-existent assessment" name="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId should return 404 for non-existent assessment" time="0.048">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments/:assessmentId/questions should add a question to an assessment" name="Assessment API Endpoints (Integration Tests) POST /api/assessments/:assessmentId/questions should add a question to an assessment" time="0.053">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments/:assessmentId/questions should return 403 when learner tries to add a question" name="Assessment API Endpoints (Integration Tests) POST /api/assessments/:assessmentId/questions should return 403 when learner tries to add a question" time="0.04">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments/:assessmentId/submissions should start a submission when authenticated" name="Assessment API Endpoints (Integration Tests) POST /api/assessments/:assessmentId/submissions should start a submission when authenticated" time="0.054">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments/:assessmentId/submissions should return existing submission if one is in progress" name="Assessment API Endpoints (Integration Tests) POST /api/assessments/:assessmentId/submissions should return existing submission if one is in progress" time="0.09">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/questions/:questionId/answers should save a multiple choice answer" name="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/questions/:questionId/answers should save a multiple choice answer" time="0.044">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/questions/:questionId/answers should save a text answer for short answer questions" name="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/questions/:questionId/answers should save a text answer for short answer questions" time="0.081">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/submit should submit an assessment" name="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/submit should submit an assessment" time="0.055">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/submit should return 403 when another user tries to submit" name="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/submit should return 403 when another user tries to submit" time="0.085">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId/my-submission should get user&apos;s own submission" name="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId/my-submission should get user&apos;s own submission" time="0.042">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId/my-submission should include answers when includeAnswers=true" name="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId/my-submission should include answers when includeAnswers=true" time="0.164">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId/submissions should get all submissions for an assessment when teacher" name="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId/submissions should get all submissions for an assessment when teacher" time="0.035">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId/submissions should return 403 when learner tries to access all submissions" name="Assessment API Endpoints (Integration Tests) GET /api/assessments/:assessmentId/submissions should return 403 when learner tries to access all submissions" time="0.044">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/grade should grade a submission when teacher" name="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/grade should grade a submission when teacher" time="0.04">
    </testcase>
    <testcase classname="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/grade should return 403 when learner tries to grade submissions" name="Assessment API Endpoints (Integration Tests) POST /api/assessments/submissions/:submissionId/grade should return 403 when learner tries to grade submissions" time="0.039">
    </testcase>
  </testsuite>
  <testsuite name="Passwordless Authentication API" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:30" time="3.956" tests="12">
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/magic-link should generate a magic link when email is valid" name="Passwordless Authentication API POST /api/auth/passwordless/magic-link should generate a magic link when email is valid" time="0.077">
    </testcase>
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/magic-link should return 404 when email is not found" name="Passwordless Authentication API POST /api/auth/passwordless/magic-link should return 404 when email is not found" time="0.06">
    </testcase>
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/magic-link should return 400 when email is not provided" name="Passwordless Authentication API POST /api/auth/passwordless/magic-link should return 400 when email is not provided" time="0.036">
    </testcase>
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/numeric-code should generate a numeric code when email is valid" name="Passwordless Authentication API POST /api/auth/passwordless/numeric-code should generate a numeric code when email is valid" time="0.324">
    </testcase>
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/numeric-code should return 404 when email is not found" name="Passwordless Authentication API POST /api/auth/passwordless/numeric-code should return 404 when email is not found" time="0.158">
    </testcase>
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/picture-code should generate a picture code when email is valid" name="Passwordless Authentication API POST /api/auth/passwordless/picture-code should generate a picture code when email is valid" time="0.166">
    </testcase>
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/verify should verify magic link token and return JWT tokens" name="Passwordless Authentication API POST /api/auth/passwordless/verify should verify magic link token and return JWT tokens" time="0.091">
    </testcase>
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/verify should verify numeric code and return JWT tokens" name="Passwordless Authentication API POST /api/auth/passwordless/verify should verify numeric code and return JWT tokens" time="0.357">
    </testcase>
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/verify should verify picture code and return JWT tokens" name="Passwordless Authentication API POST /api/auth/passwordless/verify should verify picture code and return JWT tokens" time="0.219">
    </testcase>
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/verify should return 401 when token is invalid" name="Passwordless Authentication API POST /api/auth/passwordless/verify should return 401 when token is invalid" time="0.032">
    </testcase>
    <testcase classname="Passwordless Authentication API POST /api/auth/passwordless/verify should return 401 when token is already used" name="Passwordless Authentication API POST /api/auth/passwordless/verify should return 401 when token is already used" time="0.034">
    </testcase>
    <testcase classname="Passwordless Authentication API Complete passwordless authentication flow" name="Passwordless Authentication API Complete passwordless authentication flow" time="0.149">
    </testcase>
  </testsuite>
  <testsuite name="Token Refresh API" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:34" time="4.355" tests="10">
    <testcase classname="Token Refresh API should return new access token when valid refresh token is provided" name="Token Refresh API should return new access token when valid refresh token is provided" time="0.072">
    </testcase>
    <testcase classname="Token Refresh API should reject with 401 when invalid refresh token is provided" name="Token Refresh API should reject with 401 when invalid refresh token is provided" time="0.036">
    </testcase>
    <testcase classname="Token Refresh API should reject with 400 when refresh token is not provided" name="Token Refresh API should reject with 400 when refresh token is not provided" time="0.046">
    </testcase>
    <testcase classname="Token Refresh API should reject with 401 when user has no stored refresh token" name="Token Refresh API should reject with 401 when user has no stored refresh token" time="0.038">
    </testcase>
    <testcase classname="Role-Based Access Control Admin-only routes should be accessible only by admins" name="Role-Based Access Control Admin-only routes should be accessible only by admins" time="0.169">
    </testcase>
    <testcase classname="Role-Based Access Control Teacher and admin routes should be accessible by appropriate roles" name="Role-Based Access Control Teacher and admin routes should be accessible by appropriate roles" time="0.37">
    </testcase>
    <testcase classname="Role-Based Access Control Protected routes should reject unauthenticated requests" name="Role-Based Access Control Protected routes should reject unauthenticated requests" time="0.052">
    </testcase>
    <testcase classname="Role-Based Access Control Should reject requests with invalid tokens" name="Role-Based Access Control Should reject requests with invalid tokens" time="0.058">
    </testcase>
    <testcase classname="Role-Based Access Control Token validation should return user info for valid token" name="Role-Based Access Control Token validation should return user info for valid token" time="0.042">
    </testcase>
    <testcase classname="Role-Based Access Control Should invalidate token on logout" name="Role-Based Access Control Should invalidate token on logout" time="0.095">
    </testcase>
  </testsuite>
  <testsuite name="User Journey End-to-End Tests" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:39" time="3.228" tests="1">
    <testcase classname="User Journey End-to-End Tests Complete enrollment to approval flow" name="User Journey End-to-End Tests Complete enrollment to approval flow" time="0.797">
    </testcase>
  </testsuite>
  <testsuite name="Enrollment API (Integration Tests)" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:42" time="2.839" tests="3">
    <testcase classname="Enrollment API (Integration Tests) POST /api/enrollments should create a new enrollment" name="Enrollment API (Integration Tests) POST /api/enrollments should create a new enrollment" time="0.367">
    </testcase>
    <testcase classname="Enrollment API (Integration Tests) POST /api/enrollments should reject enrollment with invalid data" name="Enrollment API (Integration Tests) POST /api/enrollments should reject enrollment with invalid data" time="0.034">
    </testcase>
    <testcase classname="Enrollment API (Integration Tests) POST /api/enrollments/check-status should check enrollment status" name="Enrollment API (Integration Tests) POST /api/enrollments/check-status should check enrollment status" time="0.357">
    </testcase>
  </testsuite>
  <testsuite name="Token Cleanup" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:45" time="2.967" tests="4">
    <testcase classname="Token Cleanup cleanupExpiredTokens should remove only expired tokens" name="Token Cleanup cleanupExpiredTokens should remove only expired tokens" time="0.733">
    </testcase>
    <testcase classname="Token Cleanup cleanupExpiredTokens should log and throw an error when database operation fails" name="Token Cleanup cleanupExpiredTokens should log and throw an error when database operation fails" time="0.567">
    </testcase>
    <testcase classname="Token Cleanup scheduleTokenCleanup should schedule token cleanup immediately and periodically" name="Token Cleanup scheduleTokenCleanup should schedule token cleanup immediately and periodically" time="0.525">
    </testcase>
    <testcase classname="Token Cleanup scheduleTokenCleanup should return a valid interval id" name="Token Cleanup scheduleTokenCleanup should return a valid interval id" time="0.565">
    </testcase>
  </testsuite>
  <testsuite name="Course Endpoints (Integration Tests)" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:48" time="2.723" tests="4">
    <testcase classname="Course Endpoints (Integration Tests) POST /courses should create a new course" name="Course Endpoints (Integration Tests) POST /courses should create a new course" time="0.057">
    </testcase>
    <testcase classname="Course Endpoints (Integration Tests) POST /courses error handling should handle empty course name" name="Course Endpoints (Integration Tests) POST /courses error handling should handle empty course name" time="0.039">
    </testcase>
    <testcase classname="Course Endpoints (Integration Tests) POST /courses error handling should handle course name too long" name="Course Endpoints (Integration Tests) POST /courses error handling should handle course name too long" time="0.036">
    </testcase>
    <testcase classname="Course Endpoints (Integration Tests) GET /courses should retrieve all courses" name="Course Endpoints (Integration Tests) GET /courses should retrieve all courses" time="0.067">
    </testcase>
  </testsuite>
  <testsuite name="Users API Integration Tests" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:51" time="2.896" tests="3">
    <testcase classname="Users API Integration Tests GET /users should retrieve all users" name="Users API Integration Tests GET /users should retrieve all users" time="0.072">
    </testcase>
    <testcase classname="Users API Integration Tests GET /users/:id should retrieve a specific user when authorized" name="Users API Integration Tests GET /users/:id should retrieve a specific user when authorized" time="0.077">
    </testcase>
    <testcase classname="Users API Integration Tests GET /users/:id should return 401 Unauthorized when token is missing" name="Users API Integration Tests GET /users/:id should return 401 Unauthorized when token is missing" time="0.045">
    </testcase>
  </testsuite>
  <testsuite name="Password Reset Flow" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:54" time="2.384" tests="1">
    <testcase classname="Password Reset Flow Complete password reset flow" name="Password Reset Flow Complete password reset flow" time="0.289">
    </testcase>
  </testsuite>
  <testsuite name="User Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:15:56" time="6.754" tests="29">
    <testcase classname="User Model Valid Users should create a user with valid data" name="User Model Valid Users should create a user with valid data" time="0.086">
    </testcase>
    <testcase classname="User Model Valid Users should create user with valid birthdate in past" name="User Model Valid Users should create user with valid birthdate in past" time="0.08">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 1" name="User Model Invalid Users should not create user with invalid data - case 1" time="0.002">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 2" name="User Model Invalid Users should not create user with invalid data - case 2" time="0.002">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 3" name="User Model Invalid Users should not create user with invalid data - case 3" time="0.002">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with invalid data - case 4" name="User Model Invalid Users should not create user with invalid data - case 4" time="0.002">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with future birthdate" name="User Model Invalid Users should not create user with future birthdate" time="0.05">
    </testcase>
    <testcase classname="User Model Invalid Users should not create user with today as birthdate" name="User Model Invalid Users should not create user with today as birthdate" time="0.008">
    </testcase>
    <testcase classname="User Model Associations should belong to a school" name="User Model Associations should belong to a school" time="0.016">
    </testcase>
    <testcase classname="User Model Associations should have one StudentTeacher" name="User Model Associations should have one StudentTeacher" time="0.016">
    </testcase>
    <testcase classname="User Model Associations should have one Teacher" name="User Model Associations should have one Teacher" time="0.011">
    </testcase>
    <testcase classname="User Model Associations should have one Admin" name="User Model Associations should have one Admin" time="0.013">
    </testcase>
    <testcase classname="User Model Associations should have one Learner" name="User Model Associations should have one Learner" time="0.177">
    </testcase>
    <testcase classname="User Model Associations should cascade soft delete to associated roles" name="User Model Associations should cascade soft delete to associated roles" time="0.014">
    </testcase>
    <testcase classname="User Model Password Management should rehash password on update" name="User Model Password Management should rehash password on update" time="0.015">
    </testcase>
    <testcase classname="User Model Password Management should have comparePassword instance method" name="User Model Password Management should have comparePassword instance method" time="0.007">
    </testcase>
    <testcase classname="User Model Data Validation should enforce contact number format" name="User Model Data Validation should enforce contact number format" time="0.024">
    </testcase>
    <testcase classname="User Model Data Validation should enforce unique email" name="User Model Data Validation should enforce unique email" time="0.041">
    </testcase>
    <testcase classname="User Model Data Validation should validate email format" name="User Model Data Validation should validate email format" time="0.011">
    </testcase>
    <testcase classname="User Model Data Validation should require school_id" name="User Model Data Validation should require school_id" time="0.011">
    </testcase>
    <testcase classname="User Model Role Management should enforce valid role types" name="User Model Role Management should enforce valid role types" time="0.013">
    </testcase>
    <testcase classname="User Model Soft Delete should soft delete user" name="User Model Soft Delete should soft delete user" time="0.013">
    </testcase>
    <testcase classname="User Model Soft Delete should restore soft deleted user" name="User Model Soft Delete should restore soft deleted user" time="0.016">
    </testcase>
    <testcase classname="User Model Update Operations should update user details" name="User Model Update Operations should update user details" time="0.011">
    </testcase>
    <testcase classname="User Model Query Operations should find user by email" name="User Model Query Operations should find user by email" time="0.008">
    </testcase>
    <testcase classname="User Model Query Operations should not return soft deleted users in normal queries" name="User Model Query Operations should not return soft deleted users in normal queries" time="0.009">
    </testcase>
    <testcase classname="User Model Attributes should have all required attributes" name="User Model Attributes should have all required attributes" time="0.008">
    </testcase>
    <testcase classname="User Model Data Sanitization should trim whitespace from string fields" name="User Model Data Sanitization should trim whitespace from string fields" time="0.013">
    </testcase>
    <testcase classname="User Model Error Handling should handle concurrent updates correctly" name="User Model Error Handling should handle concurrent updates correctly" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="Server Configuration and Middleware" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:03" time="1.991" tests="52">
    <testcase classname="Server Configuration and Middleware CORS options should allow configured origin" name="Server Configuration and Middleware CORS options should allow configured origin" time="0.006">
    </testcase>
    <testcase classname="Server Configuration and Middleware CORS options should disallow unconfigured origin" name="Server Configuration and Middleware CORS options should disallow unconfigured origin" time="0.009">
    </testcase>
    <testcase classname="Server Configuration and Middleware CORS options should allow requests with no origin (e.g., same-origin)" name="Server Configuration and Middleware CORS options should allow requests with no origin (e.g., same-origin)" time="0.001">
    </testcase>
    <testcase classname="Server Configuration and Middleware Rate limit handler should return 429" name="Server Configuration and Middleware Rate limit handler should return 429" time="0.002">
    </testcase>
    <testcase classname="Server Configuration and Middleware General rate limiter should apply to non-auth API routes" name="Server Configuration and Middleware General rate limiter should apply to non-auth API routes" time="0.003">
    </testcase>
    <testcase classname="Server Configuration and Middleware General rate limiter should NOT apply to specific auth API routes" name="Server Configuration and Middleware General rate limiter should NOT apply to specific auth API routes" time="0.002">
    </testcase>
    <testcase classname="Server Routes GET / should return API is running message" name="Server Routes GET / should return API is running message" time="0.082">
    </testcase>
    <testcase classname="Server Routes Unknown route should return 404" name="Server Routes Unknown route should return 404" time="0.016">
    </testcase>
    <testcase classname="Server Routes /api/health should return UP when database is connected" name="Server Routes /api/health should return UP when database is connected" time="0.015">
    </testcase>
    <testcase classname="Server Routes /api/health should return DOWN when database connection fails" name="Server Routes /api/health should return DOWN when database connection fails" time="0.021">
    </testcase>
    <testcase classname="Server Routes GET /api/swagger.json should return the API documentation spec" name="Server Routes GET /api/swagger.json should return the API documentation spec" time="0.025">
    </testcase>
    <testcase classname="Cache Middleware Application should attempt to get from cache for /api/courses" name="Cache Middleware Application should attempt to get from cache for /api/courses" time="0.002">
    </testcase>
    <testcase classname="Cache Middleware Application should serve from cache if cache hit for /api/courses" name="Cache Middleware Application should serve from cache if cache hit for /api/courses" time="0.002">
    </testcase>
    <testcase classname="App Initialization (initializeApp) should attempt database connection" name="App Initialization (initializeApp) should attempt database connection" time="0.003">
    </testcase>
    <testcase classname="App Initialization (initializeApp) should initialize database if not in test environment" name="App Initialization (initializeApp) should initialize database if not in test environment" time="0.008">
    </testcase>
    <testcase classname="App Initialization (initializeApp) should NOT initialize database if in test environment" name="App Initialization (initializeApp) should NOT initialize database if in test environment" time="0.003">
    </testcase>
    <testcase classname="App Initialization (initializeApp) should start HTTP server by default in test env" name="App Initialization (initializeApp) should start HTTP server by default in test env" time="0.002">
    </testcase>
    <testcase classname="App Initialization (initializeApp) should attempt HTTPS server in production when SSL is enabled" name="App Initialization (initializeApp) should attempt HTTPS server in production when SSL is enabled" time="0.003">
    </testcase>
    <testcase classname="App Initialization (initializeApp) should fallback to HTTP when SSL files cannot be read in production" name="App Initialization (initializeApp) should fallback to HTTP when SSL files cannot be read in production" time="0.005">
    </testcase>
    <testcase classname="App Initialization (initializeApp) should log correct HTTP startup message in development" name="App Initialization (initializeApp) should log correct HTTP startup message in development" time="0.002">
    </testcase>
    <testcase classname="App Initialization (initializeApp) should log correct HTTPS startup message in production" name="App Initialization (initializeApp) should log correct HTTPS startup message in production" time="0.002">
    </testcase>
    <testcase classname="App Initialization (initializeApp) should log fallback HTTP startup message in production if SSL fails" name="App Initialization (initializeApp) should log fallback HTTP startup message in production if SSL fails" time="0.002">
    </testcase>
    <testcase classname="App Initialization (initializeApp) should NOT log startup message in test environment" name="App Initialization (initializeApp) should NOT log startup message in test environment" time="0.002">
    </testcase>
    <testcase classname="Graceful Shutdown signal handlers should be registered during app initialization" name="Graceful Shutdown signal handlers should be registered during app initialization" time="0.008">
    </testcase>
    <testcase classname="Graceful Shutdown SIGTERM handler should close server and database connections" name="Graceful Shutdown SIGTERM handler should close server and database connections" time="0.119">
    </testcase>
    <testcase classname="Graceful Shutdown SIGINT handler should trigger SIGTERM logic" name="Graceful Shutdown SIGINT handler should trigger SIGTERM logic" time="0.109">
    </testcase>
    <testcase classname="Graceful Shutdown shutdown handler should handle database close errors" name="Graceful Shutdown shutdown handler should handle database close errors" time="0.108">
    </testcase>
    <testcase classname="Debug Endpoints should return request counts in development mode" name="Debug Endpoints should return request counts in development mode" time="0.001">
    </testcase>
    <testcase classname="Debug Endpoints should return 404 for debug endpoint in production" name="Debug Endpoints should return 404 for debug endpoint in production" time="0.002">
    </testcase>
    <testcase classname="Debug Endpoints should have test error endpoint in non-production environments" name="Debug Endpoints should have test error endpoint in non-production environments" time="0.002">
    </testcase>
    <testcase classname="Debug Endpoints should return 404 for test error endpoint in production" name="Debug Endpoints should return 404 for test error endpoint in production" time="0.002">
    </testcase>
    <testcase classname="Rate Limiting Application should apply general and auth rate limiters in development" name="Rate Limiting Application should apply general and auth rate limiters in development" time="0.002">
    </testcase>
    <testcase classname="Rate Limiting Application should NOT apply rate limiters in test environment" name="Rate Limiting Application should NOT apply rate limiters in test environment" time="0.002">
    </testcase>
    <testcase classname="Token Cleanup Scheduling should schedule token cleanup in non-test environments" name="Token Cleanup Scheduling should schedule token cleanup in non-test environments" time="0.003">
    </testcase>
    <testcase classname="Token Cleanup Scheduling should NOT schedule token cleanup in test environment" name="Token Cleanup Scheduling should NOT schedule token cleanup in test environment" time="0.002">
    </testcase>
    <testcase classname="Token Cleanup Scheduling should handle default cleanup interval if not specified" name="Token Cleanup Scheduling should handle default cleanup interval if not specified" time="0.003">
    </testcase>
    <testcase classname="startServer Function should call initializeApp if not in test mode" name="startServer Function should call initializeApp if not in test mode" time="0.004">
    </testcase>
    <testcase classname="startServer Function should NOT call initializeApp if in test mode" name="startServer Function should NOT call initializeApp if in test mode" time="0.002">
    </testcase>
    <testcase classname="startServer Function should handle errors during initialization" name="startServer Function should handle errors during initialization" time="0.003">
    </testcase>
    <testcase classname="Pagination Middleware should apply pagination middleware with config values" name="Pagination Middleware should apply pagination middleware with config values" time="0.002">
    </testcase>
    <testcase classname="Pagination Middleware should use default pagination values when config is missing" name="Pagination Middleware should use default pagination values when config is missing" time="0.001">
    </testcase>
    <testcase classname="Cache Middleware Extended should handle undefined cache durations gracefully" name="Cache Middleware Extended should handle undefined cache durations gracefully" time="0.002">
    </testcase>
    <testcase classname="Cache Middleware Extended should handle cache key construction with various request objects" name="Cache Middleware Extended should handle cache key construction with various request objects" time="0.008">
    </testcase>
    <testcase classname="Rate Limiting Details should skip auth limiter for non-auth paths" name="Rate Limiting Details should skip auth limiter for non-auth paths" time="0.001">
    </testcase>
    <testcase classname="Rate Limiting Details should use auth limiter for auth login path" name="Rate Limiting Details should use auth limiter for auth login path" time="0.002">
    </testcase>
    <testcase classname="Rate Limiting Details should use auth limiter for user registration path" name="Rate Limiting Details should use auth limiter for user registration path" time="0.002">
    </testcase>
    <testcase classname="Error Middleware Application should pass errors to errorMiddleware" name="Error Middleware Application should pass errors to errorMiddleware" time="0.002">
    </testcase>
    <testcase classname="Error Middleware Application should handle SpecificError with status code" name="Error Middleware Application should handle SpecificError with status code" time="0.002">
    </testcase>
    <testcase classname="TokenCleanup scheduling details should schedule token cleanup with correct interval" name="TokenCleanup scheduling details should schedule token cleanup with correct interval" time="0.006">
    </testcase>
    <testcase classname="TokenCleanup scheduling details should handle default cleanup interval if not specified" name="TokenCleanup scheduling details should handle default cleanup interval if not specified" time="0.003">
    </testcase>
    <testcase classname="HTTPS Server Configuration should add additional SSL options when available in config" name="HTTPS Server Configuration should add additional SSL options when available in config" time="0.003">
    </testcase>
    <testcase classname="HTTPS Server Configuration should handle partial SSL configuration gracefully" name="HTTPS Server Configuration should handle partial SSL configuration gracefully" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Blacklist Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:05" time="1.972" tests="2">
    <testcase classname="Blacklist Model Creation should create a valid blacklist" name="Blacklist Model Creation should create a valid blacklist" time="0.859">
    </testcase>
    <testcase classname="Blacklist Model Creation should fail without required fields" name="Blacklist Model Creation should fail without required fields" time="0.561">
    </testcase>
  </testsuite>
  <testsuite name="PasswordlessAuthService" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:07" time="1.579" tests="22">
    <testcase classname="PasswordlessAuthService generateMagicLink should generate a magic link and store a token" name="PasswordlessAuthService generateMagicLink should generate a magic link and store a token" time="0.023">
    </testcase>
    <testcase classname="PasswordlessAuthService generateMagicLink should call sendEmail in non-test environment" name="PasswordlessAuthService generateMagicLink should call sendEmail in non-test environment" time="0.007">
    </testcase>
    <testcase classname="PasswordlessAuthService generateMagicLink should throw error if user not found" name="PasswordlessAuthService generateMagicLink should throw error if user not found" time="0.027">
    </testcase>
    <testcase classname="PasswordlessAuthService generateNumericCode should generate a numeric code for student login" name="PasswordlessAuthService generateNumericCode should generate a numeric code for student login" time="0.016">
    </testcase>
    <testcase classname="PasswordlessAuthService generateNumericCode should throw error if student not found" name="PasswordlessAuthService generateNumericCode should throw error if student not found" time="0.004">
    </testcase>
    <testcase classname="PasswordlessAuthService generateNumericCode should throw error if teacher has no authority over student" name="PasswordlessAuthService generateNumericCode should throw error if teacher has no authority over student" time="0.006">
    </testcase>
    <testcase classname="PasswordlessAuthService generatePictureCode should generate a picture code for young students" name="PasswordlessAuthService generatePictureCode should generate a picture code for young students" time="0.01">
    </testcase>
    <testcase classname="PasswordlessAuthService generatePictureCode should throw error if email is not provided" name="PasswordlessAuthService generatePictureCode should throw error if email is not provided" time="0.006">
    </testcase>
    <testcase classname="PasswordlessAuthService generatePictureCode should throw error if student not found" name="PasswordlessAuthService generatePictureCode should throw error if student not found" time="0.005">
    </testcase>
    <testcase classname="PasswordlessAuthService generatePictureCode should throw error if teacher has no authority" name="PasswordlessAuthService generatePictureCode should throw error if teacher has no authority" time="0.008">
    </testcase>
    <testcase classname="PasswordlessAuthService verifyToken should verify token and return JWT tokens" name="PasswordlessAuthService verifyToken should verify token and return JWT tokens" time="0.028">
    </testcase>
    <testcase classname="PasswordlessAuthService verifyToken should handle rate limiting with IP address" name="PasswordlessAuthService verifyToken should handle rate limiting with IP address" time="0.006">
    </testcase>
    <testcase classname="PasswordlessAuthService verifyToken should handle token-specific rate limiting for picture codes" name="PasswordlessAuthService verifyToken should handle token-specific rate limiting for picture codes" time="0.009">
    </testcase>
    <testcase classname="PasswordlessAuthService verifyToken should track failed attempts for IP addresses" name="PasswordlessAuthService verifyToken should track failed attempts for IP addresses" time="0.005">
    </testcase>
    <testcase classname="PasswordlessAuthService verifyToken should throw error if token is invalid" name="PasswordlessAuthService verifyToken should throw error if token is invalid" time="0.007">
    </testcase>
    <testcase classname="PasswordlessAuthService verifyToken should throw error if token is expired" name="PasswordlessAuthService verifyToken should throw error if token is expired" time="0.007">
    </testcase>
    <testcase classname="PasswordlessAuthService verifyToken should throw error if token is already used" name="PasswordlessAuthService verifyToken should throw error if token is already used" time="0.009">
    </testcase>
    <testcase classname="PasswordlessAuthService _sendMagicLinkEmail should call sendEmail with correct parameters" name="PasswordlessAuthService _sendMagicLinkEmail should call sendEmail with correct parameters" time="0.002">
    </testcase>
    <testcase classname="PasswordlessAuthService _verifyTeacherAuthority should return true in test environment" name="PasswordlessAuthService _verifyTeacherAuthority should return true in test environment" time="0.001">
    </testcase>
    <testcase classname="PasswordlessAuthService _verifyTeacherAuthority should return false if user is not found" name="PasswordlessAuthService _verifyTeacherAuthority should return false if user is not found" time="0.001">
    </testcase>
    <testcase classname="PasswordlessAuthService _verifyTeacherAuthority should return false if user is not a teacher or student_teacher" name="PasswordlessAuthService _verifyTeacherAuthority should return false if user is not a teacher or student_teacher" time="0.003">
    </testcase>
    <testcase classname="PasswordlessAuthService _verifyTeacherAuthority should handle error case gracefully" name="PasswordlessAuthService _verifyTeacherAuthority should handle error case gracefully" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Question Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:09" time="1.371" tests="3">
    <testcase classname="Question Model should create a valid question" name="Question Model should create a valid question" time="0.01">
    </testcase>
    <testcase classname="Question Model should not create question without required fields" name="Question Model should not create question without required fields" time="0.052">
    </testcase>
    <testcase classname="Question Model should validate question type" name="Question Model should validate question type" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="Assessment Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:10" time="1.498" tests="3">
    <testcase classname="Assessment Model should create a valid assessment" name="Assessment Model should create a valid assessment" time="0.033">
    </testcase>
    <testcase classname="Assessment Model should not create assessment without required fields" name="Assessment Model should not create assessment without required fields" time="0.05">
    </testcase>
    <testcase classname="Assessment Model should validate assessment type" name="Assessment Model should validate assessment type" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Assessment Service" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:11" time="0.87" tests="68">
    <testcase classname="Assessment Service createAssessment should create an assessment successfully" name="Assessment Service createAssessment should create an assessment successfully" time="0.013">
    </testcase>
    <testcase classname="Assessment Service createAssessment should throw error if module does not exist" name="Assessment Service createAssessment should throw error if module does not exist" time="0.062">
    </testcase>
    <testcase classname="Assessment Service createAssessment should throw an error if allowed_attempts is 0 or negative" name="Assessment Service createAssessment should throw an error if allowed_attempts is 0 or negative" time="0.013">
    </testcase>
    <testcase classname="Assessment Service createAssessment should throw error when passing score exceeds max score" name="Assessment Service createAssessment should throw error when passing score exceeds max score" time="0.004">
    </testcase>
    <testcase classname="Assessment Service addQuestion should add a multiple choice question successfully" name="Assessment Service addQuestion should add a multiple choice question successfully" time="0.002">
    </testcase>
    <testcase classname="Assessment Service addQuestion should add a short answer question successfully" name="Assessment Service addQuestion should add a short answer question successfully" time="0.002">
    </testcase>
    <testcase classname="Assessment Service addQuestion should throw error if assessment does not exist" name="Assessment Service addQuestion should throw error if assessment does not exist" time="0.006">
    </testcase>
    <testcase classname="Assessment Service getAssessmentsForModule should get assessments without questions" name="Assessment Service getAssessmentsForModule should get assessments without questions" time="0.003">
    </testcase>
    <testcase classname="Assessment Service getAssessmentsForModule should get assessments with questions" name="Assessment Service getAssessmentsForModule should get assessments with questions" time="0.002">
    </testcase>
    <testcase classname="Assessment Service getAssessmentById should get assessment without questions" name="Assessment Service getAssessmentById should get assessment without questions" time="0.001">
    </testcase>
    <testcase classname="Assessment Service getAssessmentById should get assessment with questions in teacher view" name="Assessment Service getAssessmentById should get assessment with questions in teacher view" time="0.003">
    </testcase>
    <testcase classname="Assessment Service getAssessmentById should get assessment with questions in student view" name="Assessment Service getAssessmentById should get assessment with questions in student view" time="0.004">
    </testcase>
    <testcase classname="Assessment Service getAssessmentById should throw error if assessment not found" name="Assessment Service getAssessmentById should throw error if assessment not found" time="0.004">
    </testcase>
    <testcase classname="Assessment Service startSubmission should return existing submission if one exists" name="Assessment Service startSubmission should return existing submission if one exists" time="0.002">
    </testcase>
    <testcase classname="Assessment Service startSubmission should throw error if assessment does not exist" name="Assessment Service startSubmission should throw error if assessment does not exist" time="0.012">
    </testcase>
    <testcase classname="Assessment Service startSubmission should throw error when user exceeds allowed attempts" name="Assessment Service startSubmission should throw error when user exceeds allowed attempts" time="0.003">
    </testcase>
    <testcase classname="Assessment Service startSubmission should throw error when previous module not completed" name="Assessment Service startSubmission should throw error when previous module not completed" time="0.005">
    </testcase>
    <testcase classname="Assessment Service saveAnswer should save a new multiple choice answer" name="Assessment Service saveAnswer should save a new multiple choice answer" time="0.002">
    </testcase>
    <testcase classname="Assessment Service saveAnswer should update an existing answer" name="Assessment Service saveAnswer should update an existing answer" time="0.002">
    </testcase>
    <testcase classname="Assessment Service saveAnswer should throw error if submission is not in progress" name="Assessment Service saveAnswer should throw error if submission is not in progress" time="0.003">
    </testcase>
    <testcase classname="Assessment Service saveAnswer should validate answer type based on question type" name="Assessment Service saveAnswer should validate answer type based on question type" time="0.004">
    </testcase>
    <testcase classname="Assessment Service saveAnswer should throw error if submission not found" name="Assessment Service saveAnswer should throw error if submission not found" time="0.007">
    </testcase>
    <testcase classname="Assessment Service submitAssessment should submit an assessment and auto-grade multiple choice questions" name="Assessment Service submitAssessment should submit an assessment and auto-grade multiple choice questions" time="0.002">
    </testcase>
    <testcase classname="Assessment Service submitAssessment should submit an assessment without auto-grading" name="Assessment Service submitAssessment should submit an assessment without auto-grading" time="0.003">
    </testcase>
    <testcase classname="Assessment Service submitAssessment should detect late submissions" name="Assessment Service submitAssessment should detect late submissions" time="0.004">
    </testcase>
    <testcase classname="Assessment Service submitAssessment should throw error for unauthorized user" name="Assessment Service submitAssessment should throw error for unauthorized user" time="0.005">
    </testcase>
    <testcase classname="Assessment Service submitAssessment should throw error if already submitted" name="Assessment Service submitAssessment should throw error if already submitted" time="0.005">
    </testcase>
    <testcase classname="Assessment Service getSubmissionsForAssessment should get all submissions for an assessment" name="Assessment Service getSubmissionsForAssessment should get all submissions for an assessment" time="0.002">
    </testcase>
    <testcase classname="Assessment Service getSubmissionsForAssessment should return empty array if no submissions exist" name="Assessment Service getSubmissionsForAssessment should return empty array if no submissions exist" time="0.002">
    </testcase>
    <testcase classname="Assessment Service getStudentSubmission should get student submission with answers" name="Assessment Service getStudentSubmission should get student submission with answers" time="0.004">
    </testcase>
    <testcase classname="Assessment Service getStudentSubmission should get student submission without answers" name="Assessment Service getStudentSubmission should get student submission without answers" time="0.002">
    </testcase>
    <testcase classname="Assessment Service getStudentSubmission should return null if student has no submission" name="Assessment Service getStudentSubmission should return null if student has no submission" time="0.001">
    </testcase>
    <testcase classname="Assessment Service getStudentSubmissions should get student submissions with answers" name="Assessment Service getStudentSubmissions should get student submissions with answers" time="0.001">
    </testcase>
    <testcase classname="Assessment Service getStudentSubmissions should get student submissions without answers" name="Assessment Service getStudentSubmissions should get student submissions without answers" time="0.001">
    </testcase>
    <testcase classname="Assessment Service getStudentSubmissions should return null if student has no submission" name="Assessment Service getStudentSubmissions should return null if student has no submission" time="0.001">
    </testcase>
    <testcase classname="Assessment Service gradeSubmission should grade a submission successfully" name="Assessment Service gradeSubmission should grade a submission successfully" time="0.002">
    </testcase>
    <testcase classname="Assessment Service gradeSubmission should skip missing answers when grading" name="Assessment Service gradeSubmission should skip missing answers when grading" time="0.002">
    </testcase>
    <testcase classname="Assessment Service gradeSubmission should throw error if submission not found" name="Assessment Service gradeSubmission should throw error if submission not found" time="0.009">
    </testcase>
    <testcase classname="Assessment Service updateAssessment should update an assessment successfully" name="Assessment Service updateAssessment should update an assessment successfully" time="0.002">
    </testcase>
    <testcase classname="Assessment Service updateAssessment should throw error if assessment does not exist" name="Assessment Service updateAssessment should throw error if assessment does not exist" time="0.005">
    </testcase>
    <testcase classname="Assessment Service updateAssessment should throw an error if allowed_attempts is 0 or negative" name="Assessment Service updateAssessment should throw an error if allowed_attempts is 0 or negative" time="0.004">
    </testcase>
    <testcase classname="Assessment Service updateAssessment should throw error when assessment is published" name="Assessment Service updateAssessment should throw error when assessment is published" time="0.005">
    </testcase>
    <testcase classname="Assessment Service updateAssessment should throw error when passing score exceeds max score" name="Assessment Service updateAssessment should throw error when passing score exceeds max score" time="0.005">
    </testcase>
    <testcase classname="Assessment Service updateAssessment should throw error when updating to non-existent module" name="Assessment Service updateAssessment should throw error when updating to non-existent module" time="0.004">
    </testcase>
    <testcase classname="Assessment Service deleteAssessment should delete an assessment successfully" name="Assessment Service deleteAssessment should delete an assessment successfully" time="0.001">
    </testcase>
    <testcase classname="Assessment Service deleteAssessment should throw error if assessment does not exist" name="Assessment Service deleteAssessment should throw error if assessment does not exist" time="0.005">
    </testcase>
    <testcase classname="Assessment Service deleteAssessment should throw error when assessment is published" name="Assessment Service deleteAssessment should throw error when assessment is published" time="0.011">
    </testcase>
    <testcase classname="Assessment Service deleteAssessment should throw error when assessment has existing submissions" name="Assessment Service deleteAssessment should throw error when assessment has existing submissions" time="0.005">
    </testcase>
    <testcase classname="Assessment Service updateQuestion should update a question successfully" name="Assessment Service updateQuestion should update a question successfully" time="0.003">
    </testcase>
    <testcase classname="Assessment Service updateQuestion should throw error if assessment does not exist" name="Assessment Service updateQuestion should throw error if assessment does not exist" time="0.006">
    </testcase>
    <testcase classname="Assessment Service updateQuestion should throw error if question does not exist" name="Assessment Service updateQuestion should throw error if question does not exist" time="0.005">
    </testcase>
    <testcase classname="Assessment Service updateQuestion should update question type and handle options correctly" name="Assessment Service updateQuestion should update question type and handle options correctly" time="0.002">
    </testcase>
    <testcase classname="Assessment Service updateQuestion should throw error when changing to multiple choice without options" name="Assessment Service updateQuestion should throw error when changing to multiple choice without options" time="0.005">
    </testcase>
    <testcase classname="Assessment Service updateQuestion should throw error when assessment is published" name="Assessment Service updateQuestion should throw error when assessment is published" time="0.005">
    </testcase>
    <testcase classname="Assessment Service updateQuestion should throw error when total points exceeds assessment max score" name="Assessment Service updateQuestion should throw error when total points exceeds assessment max score" time="0.005">
    </testcase>
    <testcase classname="Assessment Service deleteQuestion should delete a question successfully" name="Assessment Service deleteQuestion should delete a question successfully" time="0.002">
    </testcase>
    <testcase classname="Assessment Service deleteQuestion should throw error if assessment does not exist" name="Assessment Service deleteQuestion should throw error if assessment does not exist" time="0.01">
    </testcase>
    <testcase classname="Assessment Service deleteQuestion should throw error if question does not exist" name="Assessment Service deleteQuestion should throw error if question does not exist" time="0.004">
    </testcase>
    <testcase classname="Assessment Service deleteQuestion should throw error if question belongs to different assessment" name="Assessment Service deleteQuestion should throw error if question belongs to different assessment" time="0.004">
    </testcase>
    <testcase classname="Assessment Service deleteQuestion should throw error when assessment is published" name="Assessment Service deleteQuestion should throw error when assessment is published" time="0.005">
    </testcase>
    <testcase classname="Assessment Service deleteQuestion should throw error when question has existing answers" name="Assessment Service deleteQuestion should throw error when question has existing answers" time="0.004">
    </testcase>
    <testcase classname="Assessment Service getSubmissionById should get submission by ID successfully" name="Assessment Service getSubmissionById should get submission by ID successfully" time="0.001">
    </testcase>
    <testcase classname="Assessment Service getSubmissionById should throw error if submission does not exist" name="Assessment Service getSubmissionById should throw error if submission does not exist" time="0.003">
    </testcase>
    <testcase classname="Assessment Service publishAssessment should publish an assessment successfully" name="Assessment Service publishAssessment should publish an assessment successfully" time="0.003">
    </testcase>
    <testcase classname="Assessment Service publishAssessment should throw an error if total points do not match max score" name="Assessment Service publishAssessment should throw an error if total points do not match max score" time="0.004">
    </testcase>
    <testcase classname="Assessment Service publishAssessment should throw an error if assessment not found" name="Assessment Service publishAssessment should throw an error if assessment not found" time="0.003">
    </testcase>
    <testcase classname="Assessment Service unpublishAssessment should unpublish an assessment successfully" name="Assessment Service unpublishAssessment should unpublish an assessment successfully" time="0.004">
    </testcase>
    <testcase classname="Assessment Service unpublishAssessment should throw an error if assessment not found" name="Assessment Service unpublishAssessment should throw an error if assessment not found" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Password Utils" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:12" time="1.012" tests="12">
    <testcase classname="Password Utils hashPassword should hash a password successfully" name="Password Utils hashPassword should hash a password successfully" time="0.094">
    </testcase>
    <testcase classname="Password Utils hashPassword should create different hashes for the same password" name="Password Utils hashPassword should create different hashes for the same password" time="0.151">
    </testcase>
    <testcase classname="Password Utils hashPassword should use the provided salt rounds" name="Password Utils hashPassword should use the provided salt rounds" time="0.291">
    </testcase>
    <testcase classname="Password Utils comparePassword should return true for matching passwords" name="Password Utils comparePassword should return true for matching passwords" time="0.145">
    </testcase>
    <testcase classname="Password Utils comparePassword should return false for non-matching passwords" name="Password Utils comparePassword should return false for non-matching passwords" time="0.146">
    </testcase>
    <testcase classname="Password Utils validatePassword should return true for valid passwords" name="Password Utils validatePassword should return true for valid passwords" time="0.002">
    </testcase>
    <testcase classname="Password Utils validatePassword should reject passwords shorter than 8 characters" name="Password Utils validatePassword should reject passwords shorter than 8 characters" time="0.001">
    </testcase>
    <testcase classname="Password Utils validatePassword should reject passwords without uppercase letters" name="Password Utils validatePassword should reject passwords without uppercase letters" time="0.001">
    </testcase>
    <testcase classname="Password Utils validatePassword should reject passwords without lowercase letters" name="Password Utils validatePassword should reject passwords without lowercase letters" time="0.001">
    </testcase>
    <testcase classname="Password Utils validatePassword should reject passwords without numbers" name="Password Utils validatePassword should reject passwords without numbers" time="0.001">
    </testcase>
    <testcase classname="Password Utils validatePassword should reject passwords without special characters" name="Password Utils validatePassword should reject passwords without special characters" time="0.002">
    </testcase>
    <testcase classname="Password Utils validatePassword should handle null or invalid values" name="Password Utils validatePassword should handle null or invalid values" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="User Controller" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:13" time="0.949" tests="36">
    <testcase classname="User Controller getAllUsers should return all users successfully" name="User Controller getAllUsers should return all users successfully" time="0.017">
    </testcase>
    <testcase classname="User Controller forgotPassword should send password reset email successfully" name="User Controller forgotPassword should send password reset email successfully" time="0.006">
    </testcase>
    <testcase classname="User Controller forgotPassword should return 404 if user is not found" name="User Controller forgotPassword should return 404 if user is not found" time="0.03">
    </testcase>
    <testcase classname="User Controller forgotPassword should return 500 if an error occurs" name="User Controller forgotPassword should return 500 if an error occurs" time="0.008">
    </testcase>
    <testcase classname="User Controller verifyResetCode should verify reset code successfully" name="User Controller verifyResetCode should verify reset code successfully" time="0.005">
    </testcase>
    <testcase classname="User Controller verifyResetCode should return 404 if user is not found" name="User Controller verifyResetCode should return 404 if user is not found" time="0.007">
    </testcase>
    <testcase classname="User Controller verifyResetCode should return 400 if code is invalid" name="User Controller verifyResetCode should return 400 if code is invalid" time="0.012">
    </testcase>
    <testcase classname="User Controller verifyResetCode should return 500 if an error occurs" name="User Controller verifyResetCode should return 500 if an error occurs" time="0.006">
    </testcase>
    <testcase classname="User Controller resetPassword should reset password successfully" name="User Controller resetPassword should reset password successfully" time="0.005">
    </testcase>
    <testcase classname="User Controller resetPassword should return 404 if user is not found" name="User Controller resetPassword should return 404 if user is not found" time="0.007">
    </testcase>
    <testcase classname="User Controller resetPassword should return 500 if an error occurs" name="User Controller resetPassword should return 500 if an error occurs" time="0.008">
    </testcase>
    <testcase classname="User Controller resetPassword should return 400 if password is invalid" name="User Controller resetPassword should return 400 if password is invalid" time="0.007">
    </testcase>
    <testcase classname="User Controller deleteUser should delete a user successfully" name="User Controller deleteUser should delete a user successfully" time="0.004">
    </testcase>
    <testcase classname="User Controller deleteUser should return 404 if user to delete is not found" name="User Controller deleteUser should return 404 if user to delete is not found" time="0.002">
    </testcase>
    <testcase classname="User Controller deleteUser should return 500 if an error occurs during deletion" name="User Controller deleteUser should return 500 if an error occurs during deletion" time="0.013">
    </testcase>
    <testcase classname="User Controller createUser should create a user successfully" name="User Controller createUser should create a user successfully" time="0.005">
    </testcase>
    <testcase classname="User Controller createUser should return 400 for validation errors during user creation" name="User Controller createUser should return 400 for validation errors during user creation" time="0.006">
    </testcase>
    <testcase classname="User Controller createUser should return 409 for duplicate email during user creation" name="User Controller createUser should return 409 for duplicate email during user creation" time="0.007">
    </testcase>
    <testcase classname="User Controller createUser should return 500 if an unexpected error occurs during user creation" name="User Controller createUser should return 500 if an unexpected error occurs during user creation" time="0.007">
    </testcase>
    <testcase classname="User Controller getAvailableLearners should return all available learners successfully" name="User Controller getAvailableLearners should return all available learners successfully" time="0.005">
    </testcase>
    <testcase classname="User Controller getAvailableLearners should return 500 if an error occurs" name="User Controller getAvailableLearners should return 500 if an error occurs" time="0.006">
    </testcase>
    <testcase classname="User Controller getAvailableStudentTeachers should return all available student teachers successfully" name="User Controller getAvailableStudentTeachers should return all available student teachers successfully" time="0.007">
    </testcase>
    <testcase classname="User Controller getAvailableStudentTeachers should return 500 if an error occurs" name="User Controller getAvailableStudentTeachers should return 500 if an error occurs" time="0.009">
    </testcase>
    <testcase classname="User Controller updateUser should update a user successfully" name="User Controller updateUser should update a user successfully" time="0.005">
    </testcase>
    <testcase classname="User Controller updateUser should return 400 if admin role is provided" name="User Controller updateUser should return 400 if admin role is provided" time="0.002">
    </testcase>
    <testcase classname="User Controller updateUser should return 400 if invalid role is provided" name="User Controller updateUser should return 400 if invalid role is provided" time="0.002">
    </testcase>
    <testcase classname="User Controller updateUser should return 404 if user is not found" name="User Controller updateUser should return 404 if user is not found" time="0.004">
    </testcase>
    <testcase classname="User Controller updateUser should return 500 if an error occurs during update" name="User Controller updateUser should return 500 if an error occurs during update" time="0.008">
    </testcase>
    <testcase classname="User Controller changePassword should change the password of the user" name="User Controller changePassword should change the password of the user" time="0.004">
    </testcase>
    <testcase classname="User Controller changePassword should return 400 if old password is incorrect" name="User Controller changePassword should return 400 if old password is incorrect" time="0.004">
    </testcase>
    <testcase classname="User Controller restoreUser should restore a user successfully" name="User Controller restoreUser should restore a user successfully" time="0.005">
    </testcase>
    <testcase classname="User Controller restoreUser should return 404 if user to restore is not found" name="User Controller restoreUser should return 404 if user to restore is not found" time="0.005">
    </testcase>
    <testcase classname="User Controller restoreUser should return 500 if an error occurs during restoration" name="User Controller restoreUser should return 500 if an error occurs during restoration" time="0.005">
    </testcase>
    <testcase classname="User Controller getAllDeletedUsers should return all deleted users with pagination" name="User Controller getAllDeletedUsers should return all deleted users with pagination" time="0.009">
    </testcase>
    <testcase classname="User Controller getAllDeletedUsers should use default pagination if not provided" name="User Controller getAllDeletedUsers should use default pagination if not provided" time="0.003">
    </testcase>
    <testcase classname="User Controller getAllDeletedUsers should return 500 if an error occurs during retrieval" name="User Controller getAllDeletedUsers should return 500 if an error occurs during retrieval" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Enrollment Controller" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:14" time="0.885" tests="35">
    <testcase classname="Enrollment Controller createEnrollment should create enrollment successfully" name="Enrollment Controller createEnrollment should create enrollment successfully" time="0.012">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle missing required fields" name="Enrollment Controller createEnrollment should handle missing required fields" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle password mismatch" name="Enrollment Controller createEnrollment should handle password mismatch" time="0.015">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle weak password (no number and symbol)" name="Enrollment Controller createEnrollment should handle weak password (no number and symbol)" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle invalid contact number format" name="Enrollment Controller createEnrollment should handle invalid contact number format" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle middle initial too long" name="Enrollment Controller createEnrollment should handle middle initial too long" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle duplicate email error" name="Enrollment Controller createEnrollment should handle duplicate email error" time="0.029">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle Sequelize validation errors" name="Enrollment Controller createEnrollment should handle Sequelize validation errors" time="0.012">
    </testcase>
    <testcase classname="Enrollment Controller createEnrollment should handle unexpected server errors during enrollment" name="Enrollment Controller createEnrollment should handle unexpected server errors during enrollment" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentById should retrieve enrollment by ID successfully" name="Enrollment Controller getEnrollmentById should retrieve enrollment by ID successfully" time="0.005">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentById should handle enrollment not found" name="Enrollment Controller getEnrollmentById should handle enrollment not found" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentById should handle unexpected server errors during retrieval" name="Enrollment Controller getEnrollmentById should handle unexpected server errors during retrieval" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller approveEnrollment should approve enrollment successfully" name="Enrollment Controller approveEnrollment should approve enrollment successfully" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller approveEnrollment should handle enrollment not found" name="Enrollment Controller approveEnrollment should handle enrollment not found" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller approveEnrollment should handle unexpected server errors during approval" name="Enrollment Controller approveEnrollment should handle unexpected server errors during approval" time="0.011">
    </testcase>
    <testcase classname="Enrollment Controller rejectEnrollment should reject enrollment successfully" name="Enrollment Controller rejectEnrollment should reject enrollment successfully" time="0.008">
    </testcase>
    <testcase classname="Enrollment Controller rejectEnrollment should handle enrollment not found during rejection" name="Enrollment Controller rejectEnrollment should handle enrollment not found during rejection" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller rejectEnrollment should handle unexpected server errors during rejection" name="Enrollment Controller rejectEnrollment should handle unexpected server errors during rejection" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller getAllEnrollments should retrieve all enrollments successfully" name="Enrollment Controller getAllEnrollments should retrieve all enrollments successfully" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller getAllEnrollments should handle unexpected server errors during retrieving all enrollments" name="Enrollment Controller getAllEnrollments should handle unexpected server errors during retrieving all enrollments" time="0.007">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentsBySchool should retrieve enrollments by school ID successfully" name="Enrollment Controller getEnrollmentsBySchool should retrieve enrollments by school ID successfully" time="0.005">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentsBySchool should handle school not found" name="Enrollment Controller getEnrollmentsBySchool should handle school not found" time="0.008">
    </testcase>
    <testcase classname="Enrollment Controller getEnrollmentsBySchool should handle errors when retrieving enrollments by school" name="Enrollment Controller getEnrollmentsBySchool should handle errors when retrieving enrollments by school" time="0.005">
    </testcase>
    <testcase classname="Enrollment Controller checkEnrollmentStatus should check enrollment status by email successfully" name="Enrollment Controller checkEnrollmentStatus should check enrollment status by email successfully" time="0.011">
    </testcase>
    <testcase classname="Enrollment Controller checkEnrollmentStatus should handle enrollment not found" name="Enrollment Controller checkEnrollmentStatus should handle enrollment not found" time="0.002">
    </testcase>
    <testcase classname="Enrollment Controller checkEnrollmentStatus should handle errors when checking enrollment status" name="Enrollment Controller checkEnrollmentStatus should handle errors when checking enrollment status" time="0.005">
    </testcase>
    <testcase classname="Enrollment Controller checkEnrollmentStatus should handle missing email" name="Enrollment Controller checkEnrollmentStatus should handle missing email" time="0.001">
    </testcase>
    <testcase classname="Enrollment Controller updateEnrollment should update enrollment successfully" name="Enrollment Controller updateEnrollment should update enrollment successfully" time="0.006">
    </testcase>
    <testcase classname="Enrollment Controller updateEnrollment should handle enrollment not found during update" name="Enrollment Controller updateEnrollment should handle enrollment not found during update" time="0.005">
    </testcase>
    <testcase classname="Enrollment Controller updateEnrollment should handle Sequelize validation errors during update" name="Enrollment Controller updateEnrollment should handle Sequelize validation errors during update" time="0.005">
    </testcase>
    <testcase classname="Enrollment Controller updateEnrollment should handle duplicate email error during update" name="Enrollment Controller updateEnrollment should handle duplicate email error during update" time="0.008">
    </testcase>
    <testcase classname="Enrollment Controller updateEnrollment should handle unexpected server errors during update" name="Enrollment Controller updateEnrollment should handle unexpected server errors during update" time="0.004">
    </testcase>
    <testcase classname="Enrollment Controller deleteEnrollment should delete enrollment successfully" name="Enrollment Controller deleteEnrollment should delete enrollment successfully" time="0.005">
    </testcase>
    <testcase classname="Enrollment Controller deleteEnrollment should handle enrollment not found during delete" name="Enrollment Controller deleteEnrollment should handle enrollment not found during delete" time="0.009">
    </testcase>
    <testcase classname="Enrollment Controller deleteEnrollment should handle unexpected server errors during delete" name="Enrollment Controller deleteEnrollment should handle unexpected server errors during delete" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="AuthController" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:15" time="0.832" tests="16">
    <testcase classname="AuthController refreshToken should return 401 if refresh token is not provided" name="AuthController refreshToken should return 401 if refresh token is not provided" time="0.007">
    </testcase>
    <testcase classname="AuthController refreshToken should return 401 if refresh token is invalid" name="AuthController refreshToken should return 401 if refresh token is invalid" time="0.006">
    </testcase>
    <testcase classname="AuthController refreshToken should return 401 if user is not found" name="AuthController refreshToken should return 401 if user is not found" time="0.006">
    </testcase>
    <testcase classname="AuthController refreshToken should generate new access token for valid refresh token" name="AuthController refreshToken should generate new access token for valid refresh token" time="0.012">
    </testcase>
    <testcase classname="AuthController refreshToken should handle unexpected errors during token refresh" name="AuthController refreshToken should handle unexpected errors during token refresh" time="0.002">
    </testcase>
    <testcase classname="AuthController logout should return 401 if no token is provided" name="AuthController logout should return 401 if no token is provided" time="0.002">
    </testcase>
    <testcase classname="AuthController logout should successfully log out a user with valid token" name="AuthController logout should successfully log out a user with valid token" time="0.005">
    </testcase>
    <testcase classname="AuthController logout should handle errors during logout" name="AuthController logout should handle errors during logout" time="0.025">
    </testcase>
    <testcase classname="AuthController validateToken should return valid status and user info for valid token" name="AuthController validateToken should return valid status and user info for valid token" time="0.002">
    </testcase>
    <testcase classname="AuthController validateToken should handle errors during token validation" name="AuthController validateToken should handle errors during token validation" time="0.017">
    </testcase>
    <testcase classname="AuthController login should return 400 if captchaResponse is missing" name="AuthController login should return 400 if captchaResponse is missing" time="0.006">
    </testcase>
    <testcase classname="AuthController login should return 400 if CAPTCHA verification fails" name="AuthController login should return 400 if CAPTCHA verification fails" time="0.005">
    </testcase>
    <testcase classname="AuthController login should proceed with login if CAPTCHA verification succeeds" name="AuthController login should proceed with login if CAPTCHA verification succeeds" time="0.01">
    </testcase>
    <testcase classname="AuthController login should handle authentication errors properly" name="AuthController login should handle authentication errors properly" time="0.01">
    </testcase>
    <testcase classname="AuthController login should handle unexpected errors during login process" name="AuthController login should handle unexpected errors during login process" time="0.006">
    </testcase>
    <testcase classname="AuthController login should handle empty request body gracefully" name="AuthController login should handle empty request body gracefully" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Module Controller" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:16" time="0.783" tests="23">
    <testcase classname="Module Controller createModule should create a module successfully" name="Module Controller createModule should create a module successfully" time="0.012">
    </testcase>
    <testcase classname="Module Controller createModule should handle errors when creating a module" name="Module Controller createModule should handle errors when creating a module" time="0.024">
    </testcase>
    <testcase classname="Module Controller updateModule should update a module successfully" name="Module Controller updateModule should update a module successfully" time="0.015">
    </testcase>
    <testcase classname="Module Controller updateModule should handle errors when updating a module" name="Module Controller updateModule should handle errors when updating a module" time="0.005">
    </testcase>
    <testcase classname="Module Controller deleteModule should delete a module successfully" name="Module Controller deleteModule should delete a module successfully" time="0.005">
    </testcase>
    <testcase classname="Module Controller deleteModule should handle errors when deleting a module" name="Module Controller deleteModule should handle errors when deleting a module" time="0.005">
    </testcase>
    <testcase classname="Module Controller addModuleContent should add content to a module successfully" name="Module Controller addModuleContent should add content to a module successfully" time="0.005">
    </testcase>
    <testcase classname="Module Controller addModuleContent should handle errors when adding content to a module" name="Module Controller addModuleContent should handle errors when adding content to a module" time="0.008">
    </testcase>
    <testcase classname="Module Controller updateModuleContent should update module content successfully" name="Module Controller updateModuleContent should update module content successfully" time="0.004">
    </testcase>
    <testcase classname="Module Controller updateModuleContent should handle errors when updating module content" name="Module Controller updateModuleContent should handle errors when updating module content" time="0.012">
    </testcase>
    <testcase classname="Module Controller deleteModuleContent should delete module content successfully" name="Module Controller deleteModuleContent should delete module content successfully" time="0.004">
    </testcase>
    <testcase classname="Module Controller deleteModuleContent should handle errors when deleting module content" name="Module Controller deleteModuleContent should handle errors when deleting module content" time="0.008">
    </testcase>
    <testcase classname="Module Controller getContentsByModuleId should retrieve contents by module ID successfully" name="Module Controller getContentsByModuleId should retrieve contents by module ID successfully" time="0.004">
    </testcase>
    <testcase classname="Module Controller getContentsByModuleId should handle errors when fetching contents by module ID" name="Module Controller getContentsByModuleId should handle errors when fetching contents by module ID" time="0.005">
    </testcase>
    <testcase classname="Module Controller getModuleById should retrieve a module successfully" name="Module Controller getModuleById should retrieve a module successfully" time="0.005">
    </testcase>
    <testcase classname="Module Controller getModuleById should handle errors when retrieving a module" name="Module Controller getModuleById should handle errors when retrieving a module" time="0.005">
    </testcase>
    <testcase classname="Module Controller getModulesByCourseId should retrieve all modules for a course" name="Module Controller getModulesByCourseId should retrieve all modules for a course" time="0.004">
    </testcase>
    <testcase classname="Module Controller getModulesByCourseId should handle errors when retrieving modules" name="Module Controller getModulesByCourseId should handle errors when retrieving modules" time="0.01">
    </testcase>
    <testcase classname="Module Controller getModuleGradeOfUser should retrieve module grade successfully" name="Module Controller getModuleGradeOfUser should retrieve module grade successfully" time="0.004">
    </testcase>
    <testcase classname="Module Controller getModuleGradeOfUser should handle user not found error" name="Module Controller getModuleGradeOfUser should handle user not found error" time="0.007">
    </testcase>
    <testcase classname="Module Controller getModuleGradeOfUser should handle module not found error" name="Module Controller getModuleGradeOfUser should handle module not found error" time="0.006">
    </testcase>
    <testcase classname="Module Controller getModuleGradeOfUser should handle generic errors" name="Module Controller getModuleGradeOfUser should handle generic errors" time="0.005">
    </testcase>
    <testcase classname="Module Controller getModuleGradeOfUser should handle missing parameters" name="Module Controller getModuleGradeOfUser should handle missing parameters" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Course Controller" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:17" time="0.916" tests="45">
    <testcase classname="Course Controller getAllCourses should retrieve all courses successfully (get all courses)" name="Course Controller getAllCourses should retrieve all courses successfully (get all courses)" time="0.022">
    </testcase>
    <testcase classname="Course Controller getAllCourses should handle errors (get all courses)" name="Course Controller getAllCourses should handle errors (get all courses)" time="0.033">
    </testcase>
    <testcase classname="Course Controller createCourse should create a new course successfully (create course)" name="Course Controller createCourse should create a new course successfully (create course)" time="0.004">
    </testcase>
    <testcase classname="Course Controller createCourse should return 400 if course name exceeds 255 characters (create course)" name="Course Controller createCourse should return 400 if course name exceeds 255 characters (create course)" time="0.002">
    </testcase>
    <testcase classname="Course Controller createCourse should handle validation errors (create course)" name="Course Controller createCourse should handle validation errors (create course)" time="0.008">
    </testcase>
    <testcase classname="Course Controller createCourse should handle unique constraint errors (create course)" name="Course Controller createCourse should handle unique constraint errors (create course)" time="0.011">
    </testcase>
    <testcase classname="Course Controller createCourse should handle when course name is too long (create course)" name="Course Controller createCourse should handle when course name is too long (create course)" time="0.007">
    </testcase>
    <testcase classname="Course Controller createCourse should handle error when creating the course (create course)" name="Course Controller createCourse should handle error when creating the course (create course)" time="0.006">
    </testcase>
    <testcase classname="Course Controller createCourse should validate teacher ID and return 400 for invalid teacher" name="Course Controller createCourse should validate teacher ID and return 400 for invalid teacher" time="0.005">
    </testcase>
    <testcase classname="Course Controller createCourse should validate teacher role and return 400 for non-teacher user" name="Course Controller createCourse should validate teacher role and return 400 for non-teacher user" time="0.002">
    </testcase>
    <testcase classname="Course Controller createCourse should validate learner group ID and return 400 for invalid learner group" name="Course Controller createCourse should validate learner group ID and return 400 for invalid learner group" time="0.003">
    </testcase>
    <testcase classname="Course Controller createCourse should validate student teacher group ID and return 400 for invalid student teacher group" name="Course Controller createCourse should validate student teacher group ID and return 400 for invalid student teacher group" time="0.002">
    </testcase>
    <testcase classname="Course Controller createCourse should validate multiple fields and return combined errors" name="Course Controller createCourse should validate multiple fields and return combined errors" time="0.001">
    </testcase>
    <testcase classname="Course Controller createCourse should successfully create course with valid IDs" name="Course Controller createCourse should successfully create course with valid IDs" time="0.005">
    </testcase>
    <testcase classname="Course Controller createCourse should return 403 if the user is not an admin (create course)" name="Course Controller createCourse should return 403 if the user is not an admin (create course)" time="0.002">
    </testcase>
    <testcase classname="Course Controller assignStudentTeacherGroupCourse should assign a student-teacher group to a course (assign student teacher group course)" name="Course Controller assignStudentTeacherGroupCourse should assign a student-teacher group to a course (assign student teacher group course)" time="0.004">
    </testcase>
    <testcase classname="Course Controller assignStudentTeacherGroupCourse should handle when course not found (assign student teacher group course)" name="Course Controller assignStudentTeacherGroupCourse should handle when course not found (assign student teacher group course)" time="0.011">
    </testcase>
    <testcase classname="Course Controller assignStudentTeacherGroupCourse should handle error when assigning the student-teacher group (assign student teacher group course)" name="Course Controller assignStudentTeacherGroupCourse should handle error when assigning the student-teacher group (assign student teacher group course)" time="0.004">
    </testcase>
    <testcase classname="Course Controller assignStudentTeacherGroupCourse should return 403 if user is not admin or teacher (assign student-teacher group course)" name="Course Controller assignStudentTeacherGroupCourse should return 403 if user is not admin or teacher (assign student-teacher group course)" time="0.001">
    </testcase>
    <testcase classname="Course Controller assignLearnerGroupCourse should assign a learner group to a course (assign learner group course)" name="Course Controller assignLearnerGroupCourse should assign a learner group to a course (assign learner group course)" time="0.003">
    </testcase>
    <testcase classname="Course Controller assignLearnerGroupCourse should handle when course not found (assign learner group course)" name="Course Controller assignLearnerGroupCourse should handle when course not found (assign learner group course)" time="0.007">
    </testcase>
    <testcase classname="Course Controller assignLearnerGroupCourse should handle error when assigning the learner group (assign learner group course)" name="Course Controller assignLearnerGroupCourse should handle error when assigning the learner group (assign learner group course)" time="0.006">
    </testcase>
    <testcase classname="Course Controller assignLearnerGroupCourse should return 403 if user is not admin or teacher (assign learner group course)" name="Course Controller assignLearnerGroupCourse should return 403 if user is not admin or teacher (assign learner group course)" time="0.001">
    </testcase>
    <testcase classname="Course Controller assignTeacherCourse should return 403 if user is not admin (assign teacher course)" name="Course Controller assignTeacherCourse should return 403 if user is not admin (assign teacher course)" time="0.002">
    </testcase>
    <testcase classname="Course Controller assignTeacherCourse should assign a teacher to a course (assign teacher course)" name="Course Controller assignTeacherCourse should assign a teacher to a course (assign teacher course)" time="0.006">
    </testcase>
    <testcase classname="Course Controller assignTeacherCourse should handle when course not found (assign teacher course)" name="Course Controller assignTeacherCourse should handle when course not found (assign teacher course)" time="0.005">
    </testcase>
    <testcase classname="Course Controller assignTeacherCourse should handle error when assigning the teacher (assign teacher course)" name="Course Controller assignTeacherCourse should handle error when assigning the teacher (assign teacher course)" time="0.004">
    </testcase>
    <testcase classname="Course Controller getCourseById should return a course by ID successfully (get course by id)" name="Course Controller getCourseById should return a course by ID successfully (get course by id)" time="0.011">
    </testcase>
    <testcase classname="Course Controller getCourseById should handle when course not found (get course by id)" name="Course Controller getCourseById should handle when course not found (get course by id)" time="0.004">
    </testcase>
    <testcase classname="Course Controller getCourseById should handle error when fetching the course (get course by id)" name="Course Controller getCourseById should handle error when fetching the course (get course by id)" time="0.007">
    </testcase>
    <testcase classname="Course Controller softDeleteCourse should soft delete a course successfully (soft delete course)" name="Course Controller softDeleteCourse should soft delete a course successfully (soft delete course)" time="0.004">
    </testcase>
    <testcase classname="Course Controller softDeleteCourse should handle when course not found (soft delete course)" name="Course Controller softDeleteCourse should handle when course not found (soft delete course)" time="0.003">
    </testcase>
    <testcase classname="Course Controller softDeleteCourse should handle error when deleting the course (soft delete course)" name="Course Controller softDeleteCourse should handle error when deleting the course (soft delete course)" time="0.016">
    </testcase>
    <testcase classname="Course Controller updateCourse should return 403 if user is not an admin" name="Course Controller updateCourse should return 403 if user is not an admin" time="0.002">
    </testcase>
    <testcase classname="Course Controller updateCourse should return 400 if course name is missing" name="Course Controller updateCourse should return 400 if course name is missing" time="0.001">
    </testcase>
    <testcase classname="Course Controller updateCourse should update the course successfully" name="Course Controller updateCourse should update the course successfully" time="0.005">
    </testcase>
    <testcase classname="Course Controller updateCourse should return 404 if course not found" name="Course Controller updateCourse should return 404 if course not found" time="0.005">
    </testcase>
    <testcase classname="Course Controller updateCourse should return 400 for SequelizeValidationError" name="Course Controller updateCourse should return 400 for SequelizeValidationError" time="0.012">
    </testcase>
    <testcase classname="Course Controller updateCourse should return 409 if course name already exists" name="Course Controller updateCourse should return 409 if course name already exists" time="0.004">
    </testcase>
    <testcase classname="Course Controller updateCourse should return 500 for other errors" name="Course Controller updateCourse should return 500 for other errors" time="0.006">
    </testcase>
    <testcase classname="Course Controller deleteCourse should return 403 if user is not an admin" name="Course Controller deleteCourse should return 403 if user is not an admin" time="0.002">
    </testcase>
    <testcase classname="Course Controller deleteCourse should permanently delete course and return 204 when successful" name="Course Controller deleteCourse should permanently delete course and return 204 when successful" time="0.006">
    </testcase>
    <testcase classname="Course Controller deleteCourse should return 404 if course not found" name="Course Controller deleteCourse should return 404 if course not found" time="0.004">
    </testcase>
    <testcase classname="Course Controller deleteCourse should return 500 for any other error" name="Course Controller deleteCourse should return 500 for any other error" time="0.005">
    </testcase>
    <testcase classname="Course Controller getCoursesOfUser should return courses for a user" name="Course Controller getCoursesOfUser should return courses for a user" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Assessment Controller" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:18" time="1.074" tests="22">
    <testcase classname="Assessment Controller createAssessment should create assessment successfully" name="Assessment Controller createAssessment should create assessment successfully" time="0.006">
    </testcase>
    <testcase classname="Assessment Controller createAssessment should handle errors when creating assessment fails" name="Assessment Controller createAssessment should handle errors when creating assessment fails" time="0.029">
    </testcase>
    <testcase classname="Assessment Controller getAssessmentById should get assessment by ID successfully" name="Assessment Controller getAssessmentById should get assessment by ID successfully" time="0.003">
    </testcase>
    <testcase classname="Assessment Controller getAssessmentById should handle assessment not found" name="Assessment Controller getAssessmentById should handle assessment not found" time="0.006">
    </testcase>
    <testcase classname="Assessment Controller getAssessmentsForModule should get all assessments for a module successfully" name="Assessment Controller getAssessmentsForModule should get all assessments for a module successfully" time="0.001">
    </testcase>
    <testcase classname="Assessment Controller getAssessmentsForModule should handle module not found" name="Assessment Controller getAssessmentsForModule should handle module not found" time="0.013">
    </testcase>
    <testcase classname="Assessment Controller addQuestion should add a question to an assessment successfully" name="Assessment Controller addQuestion should add a question to an assessment successfully" time="0.003">
    </testcase>
    <testcase classname="Assessment Controller addQuestion should handle assessment not found when adding question" name="Assessment Controller addQuestion should handle assessment not found when adding question" time="0.005">
    </testcase>
    <testcase classname="Assessment Controller startSubmission should start a submission successfully" name="Assessment Controller startSubmission should start a submission successfully" time="0.003">
    </testcase>
    <testcase classname="Assessment Controller startSubmission should handle assessment not found when starting submission" name="Assessment Controller startSubmission should handle assessment not found when starting submission" time="0.006">
    </testcase>
    <testcase classname="Assessment Controller saveAnswer should save an answer successfully" name="Assessment Controller saveAnswer should save an answer successfully" time="0.002">
    </testcase>
    <testcase classname="Assessment Controller saveAnswer should handle submission not found when saving answer" name="Assessment Controller saveAnswer should handle submission not found when saving answer" time="0.006">
    </testcase>
    <testcase classname="Assessment Controller submitAssessment should submit assessment successfully" name="Assessment Controller submitAssessment should submit assessment successfully" time="0.002">
    </testcase>
    <testcase classname="Assessment Controller submitAssessment should handle unauthorized submission" name="Assessment Controller submitAssessment should handle unauthorized submission" time="0.004">
    </testcase>
    <testcase classname="Assessment Controller getSubmissionsForAssessment should get all submissions for an assessment" name="Assessment Controller getSubmissionsForAssessment should get all submissions for an assessment" time="0.001">
    </testcase>
    <testcase classname="Assessment Controller getSubmissionsForAssessment should handle assessment not found when getting submissions" name="Assessment Controller getSubmissionsForAssessment should handle assessment not found when getting submissions" time="0.011">
    </testcase>
    <testcase classname="Assessment Controller getStudentSubmissions should get a student submissions successfully" name="Assessment Controller getStudentSubmissions should get a student submissions successfully" time="0.002">
    </testcase>
    <testcase classname="Assessment Controller getStudentSubmissions should return null if student has no submissions" name="Assessment Controller getStudentSubmissions should return null if student has no submissions" time="0.001">
    </testcase>
    <testcase classname="Assessment Controller getStudentSubmission should get a student submission successfully" name="Assessment Controller getStudentSubmission should get a student submission successfully" time="0.001">
    </testcase>
    <testcase classname="Assessment Controller getStudentSubmission should return null if student has no submission" name="Assessment Controller getStudentSubmission should return null if student has no submission" time="0.002">
    </testcase>
    <testcase classname="Assessment Controller gradeSubmission should grade a submission successfully" name="Assessment Controller gradeSubmission should grade a submission successfully" time="0.003">
    </testcase>
    <testcase classname="Assessment Controller gradeSubmission should handle submission not found when grading" name="Assessment Controller gradeSubmission should handle submission not found when grading" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Auth Middleware" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:19" time="0.81" tests="7">
    <testcase classname="Auth Middleware should authenticate valid token and call next" name="Auth Middleware should authenticate valid token and call next" time="0.134">
    </testcase>
    <testcase classname="Auth Middleware should return 401 when no token provided" name="Auth Middleware should return 401 when no token provided" time="0.006">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for invalid token format" name="Auth Middleware should return 401 for invalid token format" time="0.005">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for expired token" name="Auth Middleware should return 401 for expired token" time="0.004">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for invalid JWT" name="Auth Middleware should return 401 for invalid JWT" time="0.005">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for user not found" name="Auth Middleware should return 401 for user not found" time="0.009">
    </testcase>
    <testcase classname="Auth Middleware should return 500 for database errors" name="Auth Middleware should return 500 for database errors" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Enrollment Service" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:20" time="0.662" tests="27">
    <testcase classname="Enrollment Service enroll should enroll a new user successfully (enroll)" name="Enrollment Service enroll should enroll a new user successfully (enroll)" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service enroll should throw an error if email already exists (enroll)" name="Enrollment Service enroll should throw an error if email already exists (enroll)" time="0.041">
    </testcase>
    <testcase classname="Enrollment Service enroll should throw an error if enrollment fails (enroll)" name="Enrollment Service enroll should throw an error if enrollment fails (enroll)" time="0.004">
    </testcase>
    <testcase classname="Enrollment Service approveEnrollment should approve an enrollment successfully (approve enrollment)" name="Enrollment Service approveEnrollment should approve an enrollment successfully (approve enrollment)" time="0.006">
    </testcase>
    <testcase classname="Enrollment Service approveEnrollment should throw an error if enrollment is not found (approve enrollment)" name="Enrollment Service approveEnrollment should throw an error if enrollment is not found (approve enrollment)" time="0.004">
    </testcase>
    <testcase classname="Enrollment Service approveEnrollment should throw an error if updating enrollment fails (approve enrollment)" name="Enrollment Service approveEnrollment should throw an error if updating enrollment fails (approve enrollment)" time="0.006">
    </testcase>
    <testcase classname="Enrollment Service rejectEnrollment should reject an enrollment successfully (reject enrollment)" name="Enrollment Service rejectEnrollment should reject an enrollment successfully (reject enrollment)" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service rejectEnrollment should throw an error if enrollment is not found (reject enrollment)" name="Enrollment Service rejectEnrollment should throw an error if enrollment is not found (reject enrollment)" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service rejectEnrollment should throw an error if updating enrollment fails (reject enrollment)" name="Enrollment Service rejectEnrollment should throw an error if updating enrollment fails (reject enrollment)" time="0.014">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentById should retrieve an enrollment by ID successfully (get enrollment by id)" name="Enrollment Service getEnrollmentById should retrieve an enrollment by ID successfully (get enrollment by id)" time="0.002">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentById should throw an error when the enrollment does not exist (get enrollment by id)" name="Enrollment Service getEnrollmentById should throw an error when the enrollment does not exist (get enrollment by id)" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentById should throw an error when fetching of enrollment fails (get enrollment by id)" name="Enrollment Service getEnrollmentById should throw an error when fetching of enrollment fails (get enrollment by id)" time="0.006">
    </testcase>
    <testcase classname="Enrollment Service getAllEnrollments should throw an error when fetching fails" name="Enrollment Service getAllEnrollments should throw an error when fetching fails" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentsBySchool should retrieve enrollments by school successfully (get enrollments by school)" name="Enrollment Service getEnrollmentsBySchool should retrieve enrollments by school successfully (get enrollments by school)" time="0.001">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentsBySchool should throw an error if the school does not exist (get enrollments by school)" name="Enrollment Service getEnrollmentsBySchool should throw an error if the school does not exist (get enrollments by school)" time="0.004">
    </testcase>
    <testcase classname="Enrollment Service getEnrollmentsBySchool should throw an error if fetching enrollments by school fails (get enrollments by school)" name="Enrollment Service getEnrollmentsBySchool should throw an error if fetching enrollments by school fails (get enrollments by school)" time="0.006">
    </testcase>
    <testcase classname="Enrollment Service checkEnrollmentStatus should retrieve the enrollment status by email successfully (check enrollment status)" name="Enrollment Service checkEnrollmentStatus should retrieve the enrollment status by email successfully (check enrollment status)" time="0.001">
    </testcase>
    <testcase classname="Enrollment Service checkEnrollmentStatus should return null if the enrollment does not exist (check enrollment status)" name="Enrollment Service checkEnrollmentStatus should return null if the enrollment does not exist (check enrollment status)" time="0.004">
    </testcase>
    <testcase classname="Enrollment Service checkEnrollmentStatus should throw an error if fetching the enrollment status fails (check enrollment status)" name="Enrollment Service checkEnrollmentStatus should throw an error if fetching the enrollment status fails (check enrollment status)" time="0.008">
    </testcase>
    <testcase classname="Enrollment Service updateEnrollment should update enrollment data successfully" name="Enrollment Service updateEnrollment should update enrollment data successfully" time="0.003">
    </testcase>
    <testcase classname="Enrollment Service updateEnrollment should throw an error if enrollment is not found" name="Enrollment Service updateEnrollment should throw an error if enrollment is not found" time="0.004">
    </testcase>
    <testcase classname="Enrollment Service updateEnrollment should handle validation errors correctly" name="Enrollment Service updateEnrollment should handle validation errors correctly" time="0.004">
    </testcase>
    <testcase classname="Enrollment Service updateEnrollment should handle email already exists" name="Enrollment Service updateEnrollment should handle email already exists" time="0.006">
    </testcase>
    <testcase classname="Enrollment Service updateEnrollment should re-throw other errors during update" name="Enrollment Service updateEnrollment should re-throw other errors during update" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service deleteEnrollment should delete enrollment successfully" name="Enrollment Service deleteEnrollment should delete enrollment successfully" time="0.002">
    </testcase>
    <testcase classname="Enrollment Service deleteEnrollment should throw an error if enrollment is not found" name="Enrollment Service deleteEnrollment should throw an error if enrollment is not found" time="0.005">
    </testcase>
    <testcase classname="Enrollment Service deleteEnrollment should re-throw errors during deletion" name="Enrollment Service deleteEnrollment should re-throw errors during deletion" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="ModuleGrade Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:21" time="0.73" tests="3">
    <testcase classname="ModuleGrade Model should have correct table name" name="ModuleGrade Model should have correct table name" time="0.002">
    </testcase>
    <testcase classname="ModuleGrade Model should have correct model properties" name="ModuleGrade Model should have correct model properties" time="0.002">
    </testcase>
    <testcase classname="ModuleGrade Model should validate grade is at least 0" name="ModuleGrade Model should validate grade is at least 0" time="0.047">
    </testcase>
  </testsuite>
  <testsuite name="Content Model" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:21" time="0.722" tests="3">
    <testcase classname="Content Model should have correct table name" name="Content Model should have correct table name" time="0.002">
    </testcase>
    <testcase classname="Content Model should have correct attributes" name="Content Model should have correct attributes" time="0.004">
    </testcase>
    <testcase classname="Content Model should enforce validation rules" name="Content Model should enforce validation rules" time="0.049">
    </testcase>
  </testsuite>
  <testsuite name="Security Middleware" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:22" time="0.526" tests="5">
    <testcase classname="Security Middleware Helmet should set security headers" name="Security Middleware Helmet should set security headers" time="0.026">
    </testcase>
    <testcase classname="Security Middleware Rate Limiting should limit standard requests" name="Security Middleware Rate Limiting should limit standard requests" time="0.062">
    </testcase>
    <testcase classname="Security Middleware Rate Limiting should apply stricter limits to auth endpoints" name="Security Middleware Rate Limiting should apply stricter limits to auth endpoints" time="0.079">
    </testcase>
    <testcase classname="Security Middleware XSS Protection should sanitize input with potential XSS" name="Security Middleware XSS Protection should sanitize input with potential XSS" time="0.018">
    </testcase>
    <testcase classname="Security Middleware MongoDB Sanitization should remove MongoDB operators from request" name="Security Middleware MongoDB Sanitization should remove MongoDB operators from request" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="Group Controller" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:23" time="0.803" tests="26">
    <testcase classname="Group Controller getAllGroups should retrieve all groups successfully (get all groups)" name="Group Controller getAllGroups should retrieve all groups successfully (get all groups)" time="0.012">
    </testcase>
    <testcase classname="Group Controller getAllGroups should handle errors when retrieving all groups (get all groups)" name="Group Controller getAllGroups should handle errors when retrieving all groups (get all groups)" time="0.025">
    </testcase>
    <testcase classname="Group Controller getAllGroups should filter groups by valid group_type" name="Group Controller getAllGroups should filter groups by valid group_type" time="0.009">
    </testcase>
    <testcase classname="Group Controller getAllGroups should return 400 for invalid group_type" name="Group Controller getAllGroups should return 400 for invalid group_type" time="0.009">
    </testcase>
    <testcase classname="Group Controller createGroup should create a new group successfully (create group)" name="Group Controller createGroup should create a new group successfully (create group)" time="0.008">
    </testcase>
    <testcase classname="Group Controller createGroup should handle missing fields when creating a group (create group)" name="Group Controller createGroup should handle missing fields when creating a group (create group)" time="0.006">
    </testcase>
    <testcase classname="Group Controller createGroup should handle errors when creating a group (create group)" name="Group Controller createGroup should handle errors when creating a group (create group)" time="0.009">
    </testcase>
    <testcase classname="Group Controller getGroupById should return a group by ID successfully (get group by id)" name="Group Controller getGroupById should return a group by ID successfully (get group by id)" time="0.004">
    </testcase>
    <testcase classname="Group Controller getGroupById should handle when group is not found (get group by id)" name="Group Controller getGroupById should handle when group is not found (get group by id)" time="0.002">
    </testcase>
    <testcase classname="Group Controller getGroupById should handle errors when retrieving a group by ID (get group by id)" name="Group Controller getGroupById should handle errors when retrieving a group by ID (get group by id)" time="0.012">
    </testcase>
    <testcase classname="Group Controller assignLearnerMembers should assign learners to a group successfully (assign learner members)" name="Group Controller assignLearnerMembers should assign learners to a group successfully (assign learner members)" time="0.004">
    </testcase>
    <testcase classname="Group Controller assignLearnerMembers should handle errors when assigning learners to a group (assign learner members)" name="Group Controller assignLearnerMembers should handle errors when assigning learners to a group (assign learner members)" time="0.011">
    </testcase>
    <testcase classname="Group Controller assignLearnerMembers should handle missing fields when assigning learners to a group (assign learner members)" name="Group Controller assignLearnerMembers should handle missing fields when assigning learners to a group (assign learner members)" time="0.006">
    </testcase>
    <testcase classname="Group Controller assignStudentTeacherMembers should assign student teachers to a group successfully (assign student teacher members)" name="Group Controller assignStudentTeacherMembers should assign student teachers to a group successfully (assign student teacher members)" time="0.007">
    </testcase>
    <testcase classname="Group Controller assignStudentTeacherMembers should handle errors when assigning student teachers to a group (assign student teacher members)" name="Group Controller assignStudentTeacherMembers should handle errors when assigning student teachers to a group (assign student teacher members)" time="0.004">
    </testcase>
    <testcase classname="Group Controller assignStudentTeacherMembers should handle missing fields when assigning student teachers to a group (assign student teacher members)" name="Group Controller assignStudentTeacherMembers should handle missing fields when assigning student teachers to a group (assign student teacher members)" time="0.005">
    </testcase>
    <testcase classname="Group Controller updateGroup should update a group successfully" name="Group Controller updateGroup should update a group successfully" time="0.006">
    </testcase>
    <testcase classname="Group Controller updateGroup should handle group not found error" name="Group Controller updateGroup should handle group not found error" time="0.005">
    </testcase>
    <testcase classname="Group Controller deleteGroup should delete a group successfully" name="Group Controller deleteGroup should delete a group successfully" time="0.003">
    </testcase>
    <testcase classname="Group Controller deleteGroup should handle group not found error during deletion" name="Group Controller deleteGroup should handle group not found error during deletion" time="0.004">
    </testcase>
    <testcase classname="Group Controller getGroupMembers should retrieve group members successfully" name="Group Controller getGroupMembers should retrieve group members successfully" time="0.009">
    </testcase>
    <testcase classname="Group Controller getGroupMembers should handle group not found error when retrieving group members" name="Group Controller getGroupMembers should handle group not found error when retrieving group members" time="0.005">
    </testcase>
    <testcase classname="Group Controller getGroupMembers should handle errors when retrieving group members" name="Group Controller getGroupMembers should handle errors when retrieving group members" time="0.004">
    </testcase>
    <testcase classname="Group Controller removeMember should remove a member from a group successfully" name="Group Controller removeMember should remove a member from a group successfully" time="0.004">
    </testcase>
    <testcase classname="Group Controller removeMember should handle member not found when trying to remove (remove member)" name="Group Controller removeMember should handle member not found when trying to remove (remove member)" time="0.004">
    </testcase>
    <testcase classname="Group Controller removeMember should handle errors when removing a member (remove member)" name="Group Controller removeMember should handle errors when removing a member (remove member)" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="PasswordlessAuthController" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:23" time="0.873" tests="13">
    <testcase classname="PasswordlessAuthController requestMagicLink should send a magic link when email is provided" name="PasswordlessAuthController requestMagicLink should send a magic link when email is provided" time="0.008">
    </testcase>
    <testcase classname="PasswordlessAuthController requestMagicLink should return 400 when email is not provided" name="PasswordlessAuthController requestMagicLink should return 400 when email is not provided" time="0.002">
    </testcase>
    <testcase classname="PasswordlessAuthController requestMagicLink should handle errors from service" name="PasswordlessAuthController requestMagicLink should handle errors from service" time="0.003">
    </testcase>
    <testcase classname="PasswordlessAuthController requestNumericCode should generate a numeric code when identifier is provided" name="PasswordlessAuthController requestNumericCode should generate a numeric code when identifier is provided" time="0.012">
    </testcase>
    <testcase classname="PasswordlessAuthController requestNumericCode should return 400 when identifier is not provided" name="PasswordlessAuthController requestNumericCode should return 400 when identifier is not provided" time="0.002">
    </testcase>
    <testcase classname="PasswordlessAuthController requestPictureCode should generate a picture code when identifier is provided" name="PasswordlessAuthController requestPictureCode should generate a picture code when identifier is provided" time="0.002">
    </testcase>
    <testcase classname="PasswordlessAuthController requestPictureCode should return 400 when email is not provided" name="PasswordlessAuthController requestPictureCode should return 400 when email is not provided" time="0.002">
    </testcase>
    <testcase classname="PasswordlessAuthController requestPictureCode should handle errors from service when generating picture code" name="PasswordlessAuthController requestPictureCode should handle errors from service when generating picture code" time="0.002">
    </testcase>
    <testcase classname="PasswordlessAuthController verifyToken should verify token and return authentication details" name="PasswordlessAuthController verifyToken should verify token and return authentication details" time="0.003">
    </testcase>
    <testcase classname="PasswordlessAuthController verifyToken should return 400 when token is not provided" name="PasswordlessAuthController verifyToken should return 400 when token is not provided" time="0.002">
    </testcase>
    <testcase classname="PasswordlessAuthController verifyToken should handle invalid token errors" name="PasswordlessAuthController verifyToken should handle invalid token errors" time="0.001">
    </testcase>
    <testcase classname="PasswordlessAuthController verifyToken should handle too many attempts error" name="PasswordlessAuthController verifyToken should handle too many attempts error" time="0.003">
    </testcase>
    <testcase classname="PasswordlessAuthController verifyToken should handle code already used error" name="PasswordlessAuthController verifyToken should handle code already used error" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Module Service" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:24" time="0.572" tests="51">
    <testcase classname="Module Service createModule should create a module when the course exists and name is valid" name="Module Service createModule should create a module when the course exists and name is valid" time="0.003">
    </testcase>
    <testcase classname="Module Service createModule should throw an error when the course does not exist" name="Module Service createModule should throw an error when the course does not exist" time="0.05">
    </testcase>
    <testcase classname="Module Service createModule should throw an error when name is missing" name="Module Service createModule should throw an error when name is missing" time="0.007">
    </testcase>
    <testcase classname="Module Service createModule should throw an error when name exceeds 255 characters" name="Module Service createModule should throw an error when name exceeds 255 characters" time="0.005">
    </testcase>
    <testcase classname="Module Service createModule should throw a generic error when moduleModel.create fails" name="Module Service createModule should throw a generic error when moduleModel.create fails" time="0.008">
    </testcase>
    <testcase classname="Module Service createModule should rethrow SequelizeValidationError" name="Module Service createModule should rethrow SequelizeValidationError" time="0.006">
    </testcase>
    <testcase classname="Module Service getModuleById should return a module when found" name="Module Service getModuleById should return a module when found" time="0.002">
    </testcase>
    <testcase classname="Module Service getModuleById should throw an error when the module is not found" name="Module Service getModuleById should throw an error when the module is not found" time="0.013">
    </testcase>
    <testcase classname="Module Service getModuleById should throw a generic error when findByPk fails" name="Module Service getModuleById should throw a generic error when findByPk fails" time="0.005">
    </testcase>
    <testcase classname="Module Service getModulesByCourseId should return an array of modules when the course exists" name="Module Service getModulesByCourseId should return an array of modules when the course exists" time="0.004">
    </testcase>
    <testcase classname="Module Service getModulesByCourseId should return an empty array when no modules are found" name="Module Service getModulesByCourseId should return an empty array when no modules are found" time="0.001">
    </testcase>
    <testcase classname="Module Service getModulesByCourseId should throw an error when the course does not exist" name="Module Service getModulesByCourseId should throw an error when the course does not exist" time="0.004">
    </testcase>
    <testcase classname="Module Service getModulesByCourseId should throw a generic error when fetching modules fails" name="Module Service getModulesByCourseId should throw a generic error when fetching modules fails" time="0.005">
    </testcase>
    <testcase classname="Module Service updateModule should update a module when found" name="Module Service updateModule should update a module when found" time="0.002">
    </testcase>
    <testcase classname="Module Service updateModule should throw an error when the module is not found" name="Module Service updateModule should throw an error when the module is not found" time="0.005">
    </testcase>
    <testcase classname="Module Service updateModule should throw an error when the name is missing" name="Module Service updateModule should throw an error when the name is missing" time="0.006">
    </testcase>
    <testcase classname="Module Service updateModule should throw an error when the name exceeds 255 characters" name="Module Service updateModule should throw an error when the name exceeds 255 characters" time="0.007">
    </testcase>
    <testcase classname="Module Service updateModule should throw a generic error when save fails" name="Module Service updateModule should throw a generic error when save fails" time="0.009">
    </testcase>
    <testcase classname="Module Service updateModule should rethrow SequelizeValidationError" name="Module Service updateModule should rethrow SequelizeValidationError" time="0.004">
    </testcase>
    <testcase classname="Module Service deleteModule should delete a module when found" name="Module Service deleteModule should delete a module when found" time="0.002">
    </testcase>
    <testcase classname="Module Service deleteModule should throw an error when the module is not found" name="Module Service deleteModule should throw an error when the module is not found" time="0.004">
    </testcase>
    <testcase classname="Module Service deleteModule should throw a generic error when destroy fails" name="Module Service deleteModule should throw a generic error when destroy fails" time="0.004">
    </testcase>
    <testcase classname="Module Service addModuleContent should add content when module exists" name="Module Service addModuleContent should add content when module exists" time="0.001">
    </testcase>
    <testcase classname="Module Service addModuleContent should throw an error when the module is not found" name="Module Service addModuleContent should throw an error when the module is not found" time="0.006">
    </testcase>
    <testcase classname="Module Service addModuleContent should throw an error when the name is missing" name="Module Service addModuleContent should throw an error when the name is missing" time="0.004">
    </testcase>
    <testcase classname="Module Service addModuleContent should throw an error when the name exceeds 255 characters" name="Module Service addModuleContent should throw an error when the name exceeds 255 characters" time="0.004">
    </testcase>
    <testcase classname="Module Service addModuleContent should throw an error when the link is missing" name="Module Service addModuleContent should throw an error when the link is missing" time="0.004">
    </testcase>
    <testcase classname="Module Service addModuleContent should throw an error when the link is invalid" name="Module Service addModuleContent should throw an error when the link is invalid" time="0.005">
    </testcase>
    <testcase classname="Module Service addModuleContent should throw a generic error when create fails" name="Module Service addModuleContent should throw a generic error when create fails" time="0.004">
    </testcase>
    <testcase classname="Module Service deleteModuleContent should delete content when found" name="Module Service deleteModuleContent should delete content when found" time="0.007">
    </testcase>
    <testcase classname="Module Service deleteModuleContent should throw an error when the content is not found" name="Module Service deleteModuleContent should throw an error when the content is not found" time="0.004">
    </testcase>
    <testcase classname="Module Service deleteModuleContent should throw a generic error when destroy fails" name="Module Service deleteModuleContent should throw a generic error when destroy fails" time="0.003">
    </testcase>
    <testcase classname="Module Service getContentsByModuleId should return an array of contents when the module exists" name="Module Service getContentsByModuleId should return an array of contents when the module exists" time="0.001">
    </testcase>
    <testcase classname="Module Service getContentsByModuleId should return an empty array when no contents are found" name="Module Service getContentsByModuleId should return an empty array when no contents are found" time="0.001">
    </testcase>
    <testcase classname="Module Service getContentsByModuleId should throw an error when the module does not exist" name="Module Service getContentsByModuleId should throw an error when the module does not exist" time="0.004">
    </testcase>
    <testcase classname="Module Service getContentsByModuleId should throw a generic error when fetching contents fails" name="Module Service getContentsByModuleId should throw a generic error when fetching contents fails" time="0.004">
    </testcase>
    <testcase classname="Module Service updateModuleContent should update content when found and valid inputs are provided" name="Module Service updateModuleContent should update content when found and valid inputs are provided" time="0.002">
    </testcase>
    <testcase classname="Module Service updateModuleContent should throw an error if the content does not exist" name="Module Service updateModuleContent should throw an error if the content does not exist" time="0.003">
    </testcase>
    <testcase classname="Module Service updateModuleContent should throw an error if the content name is missing" name="Module Service updateModuleContent should throw an error if the content name is missing" time="0.005">
    </testcase>
    <testcase classname="Module Service updateModuleContent should throw an error if the content name exceeds 255 characters" name="Module Service updateModuleContent should throw an error if the content name exceeds 255 characters" time="0.006">
    </testcase>
    <testcase classname="Module Service updateModuleContent should throw an error if the content link is missing" name="Module Service updateModuleContent should throw an error if the content link is missing" time="0.004">
    </testcase>
    <testcase classname="Module Service updateModuleContent should throw an error if the content link is invalid" name="Module Service updateModuleContent should throw an error if the content link is invalid" time="0.003">
    </testcase>
    <testcase classname="Module Service updateModuleContent should throw a generic error when the update fails" name="Module Service updateModuleContent should throw a generic error when the update fails" time="0.012">
    </testcase>
    <testcase classname="Module Service getModuleGradeOfUser should throw error when user not found" name="Module Service getModuleGradeOfUser should throw error when user not found" time="0.003">
    </testcase>
    <testcase classname="Module Service getModuleGradeOfUser should throw error when module not found" name="Module Service getModuleGradeOfUser should throw error when module not found" time="0.005">
    </testcase>
    <testcase classname="Module Service getModuleGradeOfUser should return default values when no assessments exist" name="Module Service getModuleGradeOfUser should return default values when no assessments exist" time="0.001">
    </testcase>
    <testcase classname="Module Service getModuleGradeOfUser should return correct values when some submissions are missing" name="Module Service getModuleGradeOfUser should return correct values when some submissions are missing" time="0.002">
    </testcase>
    <testcase classname="Module Service getModuleGradeOfUser should return correct values when all submissions exist and passed" name="Module Service getModuleGradeOfUser should return correct values when all submissions exist and passed" time="0.001">
    </testcase>
    <testcase classname="Module Service getModuleGradeOfUser should return correct values when all submissions exist but some failed" name="Module Service getModuleGradeOfUser should return correct values when all submissions exist but some failed" time="0.001">
    </testcase>
    <testcase classname="Module Service getModuleGradeOfUser should upsert the module grade with the calculated average" name="Module Service getModuleGradeOfUser should upsert the module grade with the calculated average" time="0.001">
    </testcase>
    <testcase classname="Module Service getModuleGradeOfUser should throw generic error when unexpected error occurs" name="Module Service getModuleGradeOfUser should throw generic error when unexpected error occurs" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="AnnouncementService" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:25" time="0.263" tests="21">
    <testcase classname="AnnouncementService createAnnouncement (course) creates announcement and sends emails" name="AnnouncementService createAnnouncement (course) creates announcement and sends emails" time="0.006">
    </testcase>
    <testcase classname="AnnouncementService createAnnouncement (course) throws if course not found" name="AnnouncementService createAnnouncement (course) throws if course not found" time="0.026">
    </testcase>
    <testcase classname="AnnouncementService createAnnouncement (course) throws if postedBy not found" name="AnnouncementService createAnnouncement (course) throws if postedBy not found" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService createAnnouncement (course) skips email if skipEmail=true" name="AnnouncementService createAnnouncement (course) skips email if skipEmail=true" time="0.003">
    </testcase>
    <testcase classname="AnnouncementService createAnnouncement (global) creates global announcement and sends emails" name="AnnouncementService createAnnouncement (global) creates global announcement and sends emails" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService createAnnouncement (global) throws if postedBy not found" name="AnnouncementService createAnnouncement (global) throws if postedBy not found" time="0.001">
    </testcase>
    <testcase classname="AnnouncementService getAnnouncementsByCourseId returns announcements for course" name="AnnouncementService getAnnouncementsByCourseId returns announcements for course" time="0.001">
    </testcase>
    <testcase classname="AnnouncementService getAnnouncementsByCourseId throws if course not found" name="AnnouncementService getAnnouncementsByCourseId throws if course not found" time="0.001">
    </testcase>
    <testcase classname="AnnouncementService getGlobalAnnouncements returns global announcements" name="AnnouncementService getGlobalAnnouncements returns global announcements" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService getAnnouncementById returns announcement" name="AnnouncementService getAnnouncementById returns announcement" time="0.01">
    </testcase>
    <testcase classname="AnnouncementService getAnnouncementById throws if not found" name="AnnouncementService getAnnouncementById throws if not found" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService getAnnouncementsByUserIdAndCourseId returns announcements" name="AnnouncementService getAnnouncementsByUserIdAndCourseId returns announcements" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService getAnnouncementsByUserIdAndCourseId throws if user not found" name="AnnouncementService getAnnouncementsByUserIdAndCourseId throws if user not found" time="0.001">
    </testcase>
    <testcase classname="AnnouncementService getAnnouncementsByUserIdAndCourseId throws if course not found" name="AnnouncementService getAnnouncementsByUserIdAndCourseId throws if course not found" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService getAnnouncementsByUserId returns announcements" name="AnnouncementService getAnnouncementsByUserId returns announcements" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService getAnnouncementsByUserId throws if user not found" name="AnnouncementService getAnnouncementsByUserId throws if user not found" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService updateAnnouncement updates announcement" name="AnnouncementService updateAnnouncement updates announcement" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService updateAnnouncement throws if announcement not found" name="AnnouncementService updateAnnouncement throws if announcement not found" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService updateAnnouncement throws if course not found" name="AnnouncementService updateAnnouncement throws if course not found" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService deleteAnnouncement deletes announcement" name="AnnouncementService deleteAnnouncement deletes announcement" time="0.002">
    </testcase>
    <testcase classname="AnnouncementService deleteAnnouncement throws if announcement not found" name="AnnouncementService deleteAnnouncement throws if announcement not found" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Database Configuration" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:25" time="0.644" tests="6">
    <testcase classname="Database Configuration should create Sequelize instance with correct config" name="Database Configuration should create Sequelize instance with correct config" time="0.005">
    </testcase>
    <testcase classname="Database Configuration should establish database connection successfully" name="Database Configuration should establish database connection successfully" time="0.082">
    </testcase>
    <testcase classname="Database Configuration should handle connection failure" name="Database Configuration should handle connection failure" time="0.012">
    </testcase>
    <testcase classname="Database Configuration should handle sync failure" name="Database Configuration should handle sync failure" time="0.002">
    </testcase>
    <testcase classname="Database Configuration Environment Configuration should validate required environment variables" name="Database Configuration Environment Configuration should validate required environment variables" time="0.002">
    </testcase>
    <testcase classname="Database Configuration Connection Timeout should handle connection timeout" name="Database Configuration Connection Timeout should handle connection timeout" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Error Classes" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:26" time="0.289" tests="13">
    <testcase classname="Error Classes AppError should create an error with default values" name="Error Classes AppError should create an error with default values" time="0.003">
    </testcase>
    <testcase classname="Error Classes AppError should create an error with custom values" name="Error Classes AppError should create an error with custom values" time="0.001">
    </testcase>
    <testcase classname="Error Classes BadRequestError should create a 400 error with default values" name="Error Classes BadRequestError should create a 400 error with default values" time="0.001">
    </testcase>
    <testcase classname="Error Classes BadRequestError should create a 400 error with custom message" name="Error Classes BadRequestError should create a 400 error with custom message" time="0.001">
    </testcase>
    <testcase classname="Error Classes BadRequestError should create a 400 error with custom errorCode" name="Error Classes BadRequestError should create a 400 error with custom errorCode" time="0.001">
    </testcase>
    <testcase classname="Error Classes UnauthorizedError should create a 401 error with default values" name="Error Classes UnauthorizedError should create a 401 error with default values" time="0.001">
    </testcase>
    <testcase classname="Error Classes UnauthorizedError should create a 401 error with custom values" name="Error Classes UnauthorizedError should create a 401 error with custom values" time="0.002">
    </testcase>
    <testcase classname="Error Classes ForbiddenError should create a 403 error with default values" name="Error Classes ForbiddenError should create a 403 error with default values" time="0.001">
    </testcase>
    <testcase classname="Error Classes NotFoundError should create a 404 error with default values" name="Error Classes NotFoundError should create a 404 error with default values" time="0.002">
    </testcase>
    <testcase classname="Error Classes ConflictError should create a 409 error with default values" name="Error Classes ConflictError should create a 409 error with default values" time="0.001">
    </testcase>
    <testcase classname="Error Classes ValidationError should create a 422 error with default values" name="Error Classes ValidationError should create a 422 error with default values" time="0.001">
    </testcase>
    <testcase classname="Error Classes ValidationError should create a 422 error with custom errors object" name="Error Classes ValidationError should create a 422 error with custom errors object" time="0.001">
    </testcase>
    <testcase classname="Error Classes RateLimitError should create a 429 error with default values" name="Error Classes RateLimitError should create a 429 error with default values" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Course Service" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:26" time="0.564" tests="40">
    <testcase classname="Course Service getAllCourses should retrieve all courses (get all courses)" name="Course Service getAllCourses should retrieve all courses (get all courses)" time="0.005">
    </testcase>
    <testcase classname="Course Service getAllCourses should throw an error when the query fails (get all courses)" name="Course Service getAllCourses should throw an error when the query fails (get all courses)" time="0.056">
    </testcase>
    <testcase classname="Course Service createCourse should create a course successfully (create course)" name="Course Service createCourse should create a course successfully (create course)" time="0.004">
    </testcase>
    <testcase classname="Course Service createCourse should throw error when course name is empty (create course)" name="Course Service createCourse should throw error when course name is empty (create course)" time="0.005">
    </testcase>
    <testcase classname="Course Service createCourse should throw error when course name is too long (create course)" name="Course Service createCourse should throw error when course name is too long (create course)" time="0.01">
    </testcase>
    <testcase classname="Course Service createCourse should throw error when course creation fails (create course)" name="Course Service createCourse should throw error when course creation fails (create course)" time="0.006">
    </testcase>
    <testcase classname="Course Service createCourse should throw validation error when SequelizeValidationError occurs" name="Course Service createCourse should throw validation error when SequelizeValidationError occurs" time="0.008">
    </testcase>
    <testcase classname="Course Service createCourse should throw user-friendly error when course name already exists (unique constraint)" name="Course Service createCourse should throw user-friendly error when course name already exists (unique constraint)" time="0.011">
    </testcase>
    <testcase classname="Course Service getCourseById should return the course when it exists (get course by id)" name="Course Service getCourseById should return the course when it exists (get course by id)" time="0.003">
    </testcase>
    <testcase classname="Course Service getCourseById should throw an error when the course does not exist (get course by id)" name="Course Service getCourseById should throw an error when the course does not exist (get course by id)" time="0.005">
    </testcase>
    <testcase classname="Course Service getCourseById should throw an error when the query fails (get course by id)" name="Course Service getCourseById should throw an error when the query fails (get course by id)" time="0.005">
    </testcase>
    <testcase classname="Course Service assignStudentTeacherGroupCourse should successfully assign student teacher group to a course (assign student teacher group course)" name="Course Service assignStudentTeacherGroupCourse should successfully assign student teacher group to a course (assign student teacher group course)" time="0.002">
    </testcase>
    <testcase classname="Course Service assignStudentTeacherGroupCourse should throw an error if the course does not exist (assign student teacher group course)" name="Course Service assignStudentTeacherGroupCourse should throw an error if the course does not exist (assign student teacher group course)" time="0.004">
    </testcase>
    <testcase classname="Course Service assignStudentTeacherGroupCourse should throw an error if assigning fails (assign student teacher group course)" name="Course Service assignStudentTeacherGroupCourse should throw an error if assigning fails (assign student teacher group course)" time="0.003">
    </testcase>
    <testcase classname="Course Service assignLearnerGroupCourse should successfully assign learner group to a course (assign learner group course)" name="Course Service assignLearnerGroupCourse should successfully assign learner group to a course (assign learner group course)" time="0.004">
    </testcase>
    <testcase classname="Course Service assignLearnerGroupCourse should throw an error if the course does not exist (assign learner group course)" name="Course Service assignLearnerGroupCourse should throw an error if the course does not exist (assign learner group course)" time="0.005">
    </testcase>
    <testcase classname="Course Service assignLearnerGroupCourse should throw an error if assigning fails (assign learner group course)" name="Course Service assignLearnerGroupCourse should throw an error if assigning fails (assign learner group course)" time="0.005">
    </testcase>
    <testcase classname="Course Service assignTeacherCourse should successfully assign teacher to a course (assign teacher course)" name="Course Service assignTeacherCourse should successfully assign teacher to a course (assign teacher course)" time="0.005">
    </testcase>
    <testcase classname="Course Service assignTeacherCourse should throw an error if the course does not exist (assign teacher course)" name="Course Service assignTeacherCourse should throw an error if the course does not exist (assign teacher course)" time="0.005">
    </testcase>
    <testcase classname="Course Service assignTeacherCourse should throw an error if assigning fails (assign teacher course)" name="Course Service assignTeacherCourse should throw an error if assigning fails (assign teacher course)" time="0.005">
    </testcase>
    <testcase classname="Course Service assignTeacherCourse should throw an error if the teacher does not exist (assign teacher course)" name="Course Service assignTeacherCourse should throw an error if the teacher does not exist (assign teacher course)" time="0.004">
    </testcase>
    <testcase classname="Course Service assignTeacherCourse should throw an error if the user is not a teacher (assign teacher course)" name="Course Service assignTeacherCourse should throw an error if the user is not a teacher (assign teacher course)" time="0.005">
    </testcase>
    <testcase classname="Course Service softDeleteCourse should successfully soft delete a course (soft delete course)" name="Course Service softDeleteCourse should successfully soft delete a course (soft delete course)" time="0.002">
    </testcase>
    <testcase classname="Course Service softDeleteCourse should throw an error if the course does not exist (soft delete course)" name="Course Service softDeleteCourse should throw an error if the course does not exist (soft delete course)" time="0.004">
    </testcase>
    <testcase classname="Course Service softDeleteCourse should throw an error if deleting the course fails (soft delete course)" name="Course Service softDeleteCourse should throw an error if deleting the course fails (soft delete course)" time="0.004">
    </testcase>
    <testcase classname="Course Service deleteCourse should permanently delete a course successfully" name="Course Service deleteCourse should permanently delete a course successfully" time="0.002">
    </testcase>
    <testcase classname="Course Service deleteCourse should throw an error if the course does not exist" name="Course Service deleteCourse should throw an error if the course does not exist" time="0.004">
    </testcase>
    <testcase classname="Course Service deleteCourse should throw an error if permanently deleting the course fails" name="Course Service deleteCourse should throw an error if permanently deleting the course fails" time="0.007">
    </testcase>
    <testcase classname="Course Service updateCourse should update a course successfully" name="Course Service updateCourse should update a course successfully" time="0.002">
    </testcase>
    <testcase classname="Course Service updateCourse should throw an error if the course does not exist" name="Course Service updateCourse should throw an error if the course does not exist" time="0.011">
    </testcase>
    <testcase classname="Course Service updateCourse should throw an error if updating with duplicate course name" name="Course Service updateCourse should throw an error if updating with duplicate course name" time="0.003">
    </testcase>
    <testcase classname="Course Service updateCourse should re-throw validation errors as-is" name="Course Service updateCourse should re-throw validation errors as-is" time="0.002">
    </testcase>
    <testcase classname="Course Service updateCourse should throw a generic error for other failures" name="Course Service updateCourse should throw a generic error for other failures" time="0.003">
    </testcase>
    <testcase classname="Course Service getCoursesOfUser should return courses for a learner" name="Course Service getCoursesOfUser should return courses for a learner" time="0.002">
    </testcase>
    <testcase classname="Course Service getCoursesOfUser should return courses for a student teacher" name="Course Service getCoursesOfUser should return courses for a student teacher" time="0.003">
    </testcase>
    <testcase classname="Course Service getCoursesOfUser should return courses for a teacher" name="Course Service getCoursesOfUser should return courses for a teacher" time="0.002">
    </testcase>
    <testcase classname="Course Service getCoursesOfUser should throw an error if user is not found" name="Course Service getCoursesOfUser should throw an error if user is not found" time="0.003">
    </testcase>
    <testcase classname="Course Service getCoursesOfUser should throw an error if learner is not found" name="Course Service getCoursesOfUser should throw an error if learner is not found" time="0.003">
    </testcase>
    <testcase classname="Course Service getCoursesOfUser should throw an error if student teacher is not found" name="Course Service getCoursesOfUser should throw an error if student teacher is not found" time="0.004">
    </testcase>
    <testcase classname="Course Service getCoursesOfUser should throw a generic error if fetching courses fails" name="Course Service getCoursesOfUser should throw a generic error if fetching courses fails" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Group Service" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:27" time="0.454" tests="31">
    <testcase classname="Group Service createGroup should successfully create a group (create group)" name="Group Service createGroup should successfully create a group (create group)" time="0.004">
    </testcase>
    <testcase classname="Group Service createGroup should throw error if required fields are missing (create group)" name="Group Service createGroup should throw error if required fields are missing (create group)" time="0.033">
    </testcase>
    <testcase classname="Group Service createGroup should throw error if group creation fails (create group)" name="Group Service createGroup should throw error if group creation fails (create group)" time="0.001">
    </testcase>
    <testcase classname="Group Service getAllGroups should retrieve all groups (get all groups)" name="Group Service getAllGroups should retrieve all groups (get all groups)" time="0.002">
    </testcase>
    <testcase classname="Group Service getAllGroups should throw error if fetching all groups fails (get all groups)" name="Group Service getAllGroups should throw error if fetching all groups fails (get all groups)" time="0.015">
    </testcase>
    <testcase classname="Group Service assignStudentTeacherMembers should assign student-teacher members to a group successfully (assign student teacher members)" name="Group Service assignStudentTeacherMembers should assign student-teacher members to a group successfully (assign student teacher members)" time="0.005">
    </testcase>
    <testcase classname="Group Service assignStudentTeacherMembers should throw error if required fields are missing (assign student teacher members)" name="Group Service assignStudentTeacherMembers should throw error if required fields are missing (assign student teacher members)" time="0.003">
    </testcase>
    <testcase classname="Group Service assignStudentTeacherMembers should throw error if assignment fails (assign student teacher members)" name="Group Service assignStudentTeacherMembers should throw error if assignment fails (assign student teacher members)" time="0.002">
    </testcase>
    <testcase classname="Group Service assignLearnerMembers should assign learner members to a group successfully (assign learner members)" name="Group Service assignLearnerMembers should assign learner members to a group successfully (assign learner members)" time="0.004">
    </testcase>
    <testcase classname="Group Service assignLearnerMembers should throw error if required fields are missing (assign learner members)" name="Group Service assignLearnerMembers should throw error if required fields are missing (assign learner members)" time="0.005">
    </testcase>
    <testcase classname="Group Service assignLearnerMembers should throw error if assignment fails (assign learner members)" name="Group Service assignLearnerMembers should throw error if assignment fails (assign learner members)" time="0.002">
    </testcase>
    <testcase classname="Group Service getGroupById should retrieve a group by ID (get group by id)" name="Group Service getGroupById should retrieve a group by ID (get group by id)" time="0.004">
    </testcase>
    <testcase classname="Group Service getGroupById should throw error if group is not found (get group by id)" name="Group Service getGroupById should throw error if group is not found (get group by id)" time="0.002">
    </testcase>
    <testcase classname="Group Service getGroupById should throw error if fetching the group fails (get group by id)" name="Group Service getGroupById should throw error if fetching the group fails (get group by id)" time="0.008">
    </testcase>
    <testcase classname="Group Service updateGroup should update a group successfully" name="Group Service updateGroup should update a group successfully" time="0.002">
    </testcase>
    <testcase classname="Group Service updateGroup should throw error if group is not found (update group)" name="Group Service updateGroup should throw error if group is not found (update group)" time="0.005">
    </testcase>
    <testcase classname="Group Service updateGroup should throw error if update fails" name="Group Service updateGroup should throw error if update fails" time="0.005">
    </testcase>
    <testcase classname="Group Service deleteGroup should delete a group successfully" name="Group Service deleteGroup should delete a group successfully" time="0.002">
    </testcase>
    <testcase classname="Group Service deleteGroup should throw error if group is not found (delete group)" name="Group Service deleteGroup should throw error if group is not found (delete group)" time="0.005">
    </testcase>
    <testcase classname="Group Service deleteGroup should throw error if deletion fails" name="Group Service deleteGroup should throw error if deletion fails" time="0.006">
    </testcase>
    <testcase classname="Group Service getGroupMembers should retrieve student teacher members of the group (get group members)" name="Group Service getGroupMembers should retrieve student teacher members of the group (get group members)" time="0.001">
    </testcase>
    <testcase classname="Group Service getGroupMembers should retrieve learner members of the group (get group members)" name="Group Service getGroupMembers should retrieve learner members of the group (get group members)" time="0.001">
    </testcase>
    <testcase classname="Group Service getGroupMembers should throw error if group is not found (get group members)" name="Group Service getGroupMembers should throw error if group is not found (get group members)" time="0.001">
    </testcase>
    <testcase classname="Group Service getGroupMembers should throw error if model query fails (get group members)" name="Group Service getGroupMembers should throw error if model query fails (get group members)" time="0.003">
    </testcase>
    <testcase classname="Group Service removeMember should successfully remove a student teacher member from the group (remove member)" name="Group Service removeMember should successfully remove a student teacher member from the group (remove member)" time="0.002">
    </testcase>
    <testcase classname="Group Service removeMember should successfully remove a learner member from the group (remove member)" name="Group Service removeMember should successfully remove a learner member from the group (remove member)" time="0.002">
    </testcase>
    <testcase classname="Group Service removeMember should throw error if group is not found (remove member)" name="Group Service removeMember should throw error if group is not found (remove member)" time="0.005">
    </testcase>
    <testcase classname="Group Service removeMember should throw error if member is not found in student teacher group (remove member)" name="Group Service removeMember should throw error if member is not found in student teacher group (remove member)" time="0.002">
    </testcase>
    <testcase classname="Group Service removeMember should throw error if member is not found in learner group (remove member)" name="Group Service removeMember should throw error if member is not found in learner group (remove member)" time="0.003">
    </testcase>
    <testcase classname="Group Service removeMember should throw error if member removal fails due to save error (remove member)" name="Group Service removeMember should throw error if member removal fails due to save error (remove member)" time="0.002">
    </testcase>
    <testcase classname="Group Service removeMember should throw error if unexpected model query fails (remove member)" name="Group Service removeMember should throw error if unexpected model query fails (remove member)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Log Middleware" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:27" time="0.495" tests="3">
    <testcase classname="Log Middleware should log incoming GET requests" name="Log Middleware should log incoming GET requests" time="0.051">
    </testcase>
    <testcase classname="Log Middleware should log incoming POST requests with body" name="Log Middleware should log incoming POST requests with body" time="0.047">
    </testcase>
    <testcase classname="Log Middleware should handle responses correctly" name="Log Middleware should handle responses correctly" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="Assessment Schemas" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:28" time="0.491" tests="88">
    <testcase classname="Assessment Schemas createAssessment Schema should validate correct assessment data" name="Assessment Schemas createAssessment Schema should validate correct assessment data" time="0.004">
    </testcase>
    <testcase classname="Assessment Schemas createAssessment Schema should invalidate missing required title" name="Assessment Schemas createAssessment Schema should invalidate missing required title" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas createAssessment Schema should invalidate invalid type" name="Assessment Schemas createAssessment Schema should invalidate invalid type" time="0.011">
    </testcase>
    <testcase classname="Assessment Schemas createAssessment Schema should invalidate if passing_score &gt; max_score" name="Assessment Schemas createAssessment Schema should invalidate if passing_score &gt; max_score" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas createAssessment Schema should validate if passing_score is null" name="Assessment Schemas createAssessment Schema should validate if passing_score is null" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas createAssessment Schema should apply default for max_score if not provided" name="Assessment Schemas createAssessment Schema should apply default for max_score if not provided" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas createAssessment Schema should apply default for is_published if not provided" name="Assessment Schemas createAssessment Schema should apply default for is_published if not provided" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas createAssessment Schema should invalidate missing required allowed_attempts" name="Assessment Schemas createAssessment Schema should invalidate missing required allowed_attempts" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should validate correct multiple choice question data" name="Assessment Schemas addQuestion Schema should validate correct multiple choice question data" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should validate correct true/false question data" name="Assessment Schemas addQuestion Schema should validate correct true/false question data" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should validate correct short answer question data" name="Assessment Schemas addQuestion Schema should validate correct short answer question data" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should validate correct essay question data" name="Assessment Schemas addQuestion Schema should validate correct essay question data" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should invalidate multiple choice with less than 2 options" name="Assessment Schemas addQuestion Schema should invalidate multiple choice with less than 2 options" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should invalidate multiple choice with no correct option" name="Assessment Schemas addQuestion Schema should invalidate multiple choice with no correct option" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should invalidate if options provided for short_answer" name="Assessment Schemas addQuestion Schema should invalidate if options provided for short_answer" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should invalidate if answer_key provided for multiple_choice" name="Assessment Schemas addQuestion Schema should invalidate if answer_key provided for multiple_choice" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should invalidate if word_limit provided for non-essay" name="Assessment Schemas addQuestion Schema should invalidate if word_limit provided for non-essay" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should apply default for points if not provided" name="Assessment Schemas addQuestion Schema should apply default for points if not provided" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas addQuestion Schema should apply default for order_index if not provided" name="Assessment Schemas addQuestion Schema should apply default for order_index if not provided" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas updateAssessment Schema should validate correct partial update data" name="Assessment Schemas updateAssessment Schema should validate correct partial update data" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas updateAssessment Schema should validate correct full update data" name="Assessment Schemas updateAssessment Schema should validate correct full update data" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas updateAssessment Schema should invalidate if passing_score &gt; max_score" name="Assessment Schemas updateAssessment Schema should invalidate if passing_score &gt; max_score" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas updateAssessment Schema should validate if only passing_score is provided (max_score undefined)" name="Assessment Schemas updateAssessment Schema should validate if only passing_score is provided (max_score undefined)" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas updateAssessment Schema should validate if only max_score is provided (passing_score undefined)" name="Assessment Schemas updateAssessment Schema should validate if only max_score is provided (passing_score undefined)" time="0.006">
    </testcase>
    <testcase classname="Assessment Schemas updateAssessment Schema should invalidate if empty object is provided (min(1))" name="Assessment Schemas updateAssessment Schema should invalidate if empty object is provided (min(1))" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas updateAssessment Schema should validate correct params" name="Assessment Schemas updateAssessment Schema should validate correct params" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas updateAssessment Schema should invalidate incorrect params type" name="Assessment Schemas updateAssessment Schema should invalidate incorrect params type" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should validate partial update (text)" name="Assessment Schemas updateQuestion Schema should validate partial update (text)" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should validate partial update (options for existing MC question)" name="Assessment Schemas updateQuestion Schema should validate partial update (options for existing MC question)" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should invalidate multiple choice question with less than 2 options" name="Assessment Schemas updateQuestion Schema should invalidate multiple choice question with less than 2 options" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should invalidate true/false question with less than 2 options" name="Assessment Schemas updateQuestion Schema should invalidate true/false question with less than 2 options" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should invalidate multiple choice question with no correct options" name="Assessment Schemas updateQuestion Schema should invalidate multiple choice question with no correct options" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should invalidate true/false question with no correct options" name="Assessment Schemas updateQuestion Schema should invalidate true/false question with no correct options" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should validate multiple choice question with valid options" name="Assessment Schemas updateQuestion Schema should validate multiple choice question with valid options" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should validate true/false question with valid options" name="Assessment Schemas updateQuestion Schema should validate true/false question with valid options" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should not apply options validation for short_answer question type" name="Assessment Schemas updateQuestion Schema should not apply options validation for short_answer question type" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should invalidate if empty object is provided (min(1))" name="Assessment Schemas updateQuestion Schema should invalidate if empty object is provided (min(1))" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should validate correct params" name="Assessment Schemas updateQuestion Schema should validate correct params" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas updateQuestion Schema should invalidate missing questionId param" name="Assessment Schemas updateQuestion Schema should invalidate missing questionId param" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas saveAnswer Schema should validate with optionId only" name="Assessment Schemas saveAnswer Schema should validate with optionId only" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas saveAnswer Schema should validate with textResponse only" name="Assessment Schemas saveAnswer Schema should validate with textResponse only" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas saveAnswer Schema should invalidate if both optionId and textResponse are provided (xor)" name="Assessment Schemas saveAnswer Schema should invalidate if both optionId and textResponse are provided (xor)" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas saveAnswer Schema should invalidate if neither optionId nor textResponse are provided (xor)" name="Assessment Schemas saveAnswer Schema should invalidate if neither optionId nor textResponse are provided (xor)" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas saveAnswer Schema should validate correct params" name="Assessment Schemas saveAnswer Schema should validate correct params" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas gradeSubmission Schema should validate correct grade data" name="Assessment Schemas gradeSubmission Schema should validate correct grade data" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas gradeSubmission Schema should invalidate missing grade object" name="Assessment Schemas gradeSubmission Schema should invalidate missing grade object" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas gradeSubmission Schema should invalidate missing grade.questionId" name="Assessment Schemas gradeSubmission Schema should invalidate missing grade.questionId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas gradeSubmission Schema should invalidate missing grade.points" name="Assessment Schemas gradeSubmission Schema should invalidate missing grade.points" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas gradeSubmission Schema should validate with null feedback" name="Assessment Schemas gradeSubmission Schema should validate with null feedback" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas gradeSubmission Schema should validate correct params" name="Assessment Schemas gradeSubmission Schema should validate correct params" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas deleteAssessment Schema should validate correct assessmentId" name="Assessment Schemas Parameter-only Schemas deleteAssessment Schema should validate correct assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas deleteAssessment Schema should invalidate incorrect assessmentId type" name="Assessment Schemas Parameter-only Schemas deleteAssessment Schema should invalidate incorrect assessmentId type" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas deleteAssessment Schema should invalidate missing assessmentId" name="Assessment Schemas Parameter-only Schemas deleteAssessment Schema should invalidate missing assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas deleteQuestion Schema should validate correct questionId" name="Assessment Schemas Parameter-only Schemas deleteQuestion Schema should validate correct questionId" time="0.006">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas deleteQuestion Schema should invalidate incorrect questionId type" name="Assessment Schemas Parameter-only Schemas deleteQuestion Schema should invalidate incorrect questionId type" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas deleteQuestion Schema should invalidate missing questionId" name="Assessment Schemas Parameter-only Schemas deleteQuestion Schema should invalidate missing questionId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas startSubmission Schema should validate correct assessmentId" name="Assessment Schemas Parameter-only Schemas startSubmission Schema should validate correct assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas startSubmission Schema should invalidate incorrect assessmentId type" name="Assessment Schemas Parameter-only Schemas startSubmission Schema should invalidate incorrect assessmentId type" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas startSubmission Schema should invalidate missing assessmentId" name="Assessment Schemas Parameter-only Schemas startSubmission Schema should invalidate missing assessmentId" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas submitAssessment Schema should validate correct submissionId" name="Assessment Schemas Parameter-only Schemas submitAssessment Schema should validate correct submissionId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas submitAssessment Schema should invalidate incorrect submissionId type" name="Assessment Schemas Parameter-only Schemas submitAssessment Schema should invalidate incorrect submissionId type" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas submitAssessment Schema should invalidate missing submissionId" name="Assessment Schemas Parameter-only Schemas submitAssessment Schema should invalidate missing submissionId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas publishAssessment Schema should validate correct assessmentId" name="Assessment Schemas Parameter-only Schemas publishAssessment Schema should validate correct assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas publishAssessment Schema should invalidate incorrect assessmentId type" name="Assessment Schemas Parameter-only Schemas publishAssessment Schema should invalidate incorrect assessmentId type" time="0.002">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas publishAssessment Schema should invalidate missing assessmentId" name="Assessment Schemas Parameter-only Schemas publishAssessment Schema should invalidate missing assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas unpublishAssessment Schema should validate correct assessmentId" name="Assessment Schemas Parameter-only Schemas unpublishAssessment Schema should validate correct assessmentId" time="0">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas unpublishAssessment Schema should invalidate incorrect assessmentId type" name="Assessment Schemas Parameter-only Schemas unpublishAssessment Schema should invalidate incorrect assessmentId type" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas unpublishAssessment Schema should invalidate missing assessmentId" name="Assessment Schemas Parameter-only Schemas unpublishAssessment Schema should invalidate missing assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getSubmissionsForAssessment Schema should validate correct assessmentId" name="Assessment Schemas Parameter-only Schemas getSubmissionsForAssessment Schema should validate correct assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getSubmissionsForAssessment Schema should invalidate incorrect assessmentId type" name="Assessment Schemas Parameter-only Schemas getSubmissionsForAssessment Schema should invalidate incorrect assessmentId type" time="0.003">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getSubmissionsForAssessment Schema should invalidate missing assessmentId" name="Assessment Schemas Parameter-only Schemas getSubmissionsForAssessment Schema should invalidate missing assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getAssessmentsForModule Schema should validate correct moduleId" name="Assessment Schemas Parameter-only Schemas getAssessmentsForModule Schema should validate correct moduleId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getAssessmentsForModule Schema should invalidate incorrect moduleId type" name="Assessment Schemas Parameter-only Schemas getAssessmentsForModule Schema should invalidate incorrect moduleId type" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getAssessmentsForModule Schema should invalidate missing moduleId" name="Assessment Schemas Parameter-only Schemas getAssessmentsForModule Schema should invalidate missing moduleId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getStudentSubmissions Schema should validate correct assessmentId" name="Assessment Schemas Parameter-only Schemas getStudentSubmissions Schema should validate correct assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getStudentSubmissions Schema should invalidate incorrect assessmentId type" name="Assessment Schemas Parameter-only Schemas getStudentSubmissions Schema should invalidate incorrect assessmentId type" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getStudentSubmissions Schema should invalidate missing assessmentId" name="Assessment Schemas Parameter-only Schemas getStudentSubmissions Schema should invalidate missing assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getStudentSubmission Schema should validate correct assessmentId" name="Assessment Schemas Parameter-only Schemas getStudentSubmission Schema should validate correct assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getStudentSubmission Schema should invalidate incorrect assessmentId type" name="Assessment Schemas Parameter-only Schemas getStudentSubmission Schema should invalidate incorrect assessmentId type" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getStudentSubmission Schema should invalidate missing assessmentId" name="Assessment Schemas Parameter-only Schemas getStudentSubmission Schema should invalidate missing assessmentId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getSubmissionById Schema should validate correct submissionId" name="Assessment Schemas Parameter-only Schemas getSubmissionById Schema should validate correct submissionId" time="0.004">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getSubmissionById Schema should invalidate incorrect submissionId type" name="Assessment Schemas Parameter-only Schemas getSubmissionById Schema should invalidate incorrect submissionId type" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas Parameter-only Schemas getSubmissionById Schema should invalidate missing submissionId" name="Assessment Schemas Parameter-only Schemas getSubmissionById Schema should invalidate missing submissionId" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas getAssessmentById Schema should validate with default query params" name="Assessment Schemas getAssessmentById Schema should validate with default query params" time="0.005">
    </testcase>
    <testcase classname="Assessment Schemas getAssessmentById Schema should validate with specific query params" name="Assessment Schemas getAssessmentById Schema should validate with specific query params" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas getAssessmentById Schema should invalidate invalid page number" name="Assessment Schemas getAssessmentById Schema should invalidate invalid page number" time="0">
    </testcase>
    <testcase classname="Assessment Schemas getAssessmentById Schema should invalidate invalid limit" name="Assessment Schemas getAssessmentById Schema should invalidate invalid limit" time="0.001">
    </testcase>
    <testcase classname="Assessment Schemas getAssessmentById Schema should validate correct params" name="Assessment Schemas getAssessmentById Schema should validate correct params" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Error Middleware" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:28" time="0.324" tests="7">
    <testcase classname="Error Middleware should handle SpecificError" name="Error Middleware should handle SpecificError" time="0.013">
    </testcase>
    <testcase classname="Error Middleware should handle SequelizeUniqueConstraintError" name="Error Middleware should handle SequelizeUniqueConstraintError" time="0.005">
    </testcase>
    <testcase classname="Error Middleware should handle SequelizeValidationError" name="Error Middleware should handle SequelizeValidationError" time="0.014">
    </testcase>
    <testcase classname="Error Middleware should handle JsonWebTokenError" name="Error Middleware should handle JsonWebTokenError" time="0.004">
    </testcase>
    <testcase classname="Error Middleware should handle TokenExpiredError" name="Error Middleware should handle TokenExpiredError" time="0.006">
    </testcase>
    <testcase classname="Error Middleware should handle generic error" name="Error Middleware should handle generic error" time="0.007">
    </testcase>
    <testcase classname="Error Middleware should log error details" name="Error Middleware should log error details" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Validation Middleware" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:29" time="0.41" tests="10">
    <testcase classname="Validation Middleware Body validation should pass with valid body data" name="Validation Middleware Body validation should pass with valid body data" time="0.01">
    </testcase>
    <testcase classname="Validation Middleware Body validation should fail with invalid body data" name="Validation Middleware Body validation should fail with invalid body data" time="0.008">
    </testcase>
    <testcase classname="Validation Middleware Body validation should skip body validation when schema.body is not defined" name="Validation Middleware Body validation should skip body validation when schema.body is not defined" time="0.011">
    </testcase>
    <testcase classname="Validation Middleware Query validation should pass with valid query parameters" name="Validation Middleware Query validation should pass with valid query parameters" time="0.002">
    </testcase>
    <testcase classname="Validation Middleware Query validation should fail with invalid query parameters" name="Validation Middleware Query validation should fail with invalid query parameters" time="0.01">
    </testcase>
    <testcase classname="Validation Middleware Params validation should pass with valid params" name="Validation Middleware Params validation should pass with valid params" time="0.002">
    </testcase>
    <testcase classname="Validation Middleware Params validation should fail with invalid params" name="Validation Middleware Params validation should fail with invalid params" time="0.004">
    </testcase>
    <testcase classname="Validation Middleware Combined validations should validate body, query and params together" name="Validation Middleware Combined validations should validate body, query and params together" time="0.002">
    </testcase>
    <testcase classname="Validation Middleware Combined validations should collect all validation errors from body, query and params" name="Validation Middleware Combined validations should collect all validation errors from body, query and params" time="0.007">
    </testcase>
    <testcase classname="Validation Middleware Error handling should handle thrown errors and pass them to next" name="Validation Middleware Error handling should handle thrown errors and pass them to next" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Logger" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:29" time="0.283" tests="3">
    <testcase classname="Logger should log info messages" name="Logger should log info messages" time="0.006">
    </testcase>
    <testcase classname="Logger should log error messages" name="Logger should log error messages" time="0.011">
    </testcase>
    <testcase classname="Logger should include additional metadata" name="Logger should include additional metadata" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Drive Utilities" errors="0" failures="0" skipped="0" timestamp="2025-04-15T07:16:29" time="0.218" tests="7">
    <testcase classname="Drive Utilities validateDriveUrl should return true for valid Google Drive file URLs" name="Drive Utilities validateDriveUrl should return true for valid Google Drive file URLs" time="0.003">
    </testcase>
    <testcase classname="Drive Utilities validateDriveUrl should return true for valid Google Drive folder URLs" name="Drive Utilities validateDriveUrl should return true for valid Google Drive folder URLs" time="0.002">
    </testcase>
    <testcase classname="Drive Utilities validateDriveUrl should return false for invalid Google Drive URLs" name="Drive Utilities validateDriveUrl should return false for invalid Google Drive URLs" time="0.001">
    </testcase>
    <testcase classname="Drive Utilities generatePreviewUrl should convert file URLs to preview URLs" name="Drive Utilities generatePreviewUrl should convert file URLs to preview URLs" time="0.001">
    </testcase>
    <testcase classname="Drive Utilities generatePreviewUrl should handle file URLs with different query parameters" name="Drive Utilities generatePreviewUrl should handle file URLs with different query parameters" time="0.002">
    </testcase>
    <testcase classname="Drive Utilities generatePreviewUrl should return the original URL for folder URLs" name="Drive Utilities generatePreviewUrl should return the original URL for folder URLs" time="0.001">
    </testcase>
    <testcase classname="Drive Utilities generatePreviewUrl should return the original URL for non-Google Drive URLs" name="Drive Utilities generatePreviewUrl should return the original URL for non-Google Drive URLs" time="0.001">
    </testcase>
  </testsuite>
</testsuites>