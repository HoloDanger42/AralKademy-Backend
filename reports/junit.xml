<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="81" failures="0" errors="0" time="10.851">
  <testsuite name="Course Endpoints (Integration Tests)" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:25" time="3.31" tests="4">
    <testcase classname="Course Endpoints (Integration Tests) should create a new course" name="Course Endpoints (Integration Tests) should create a new course" time="0.058">
    </testcase>
    <testcase classname="Course Endpoints (Integration Tests) should handle course creation errors" name="Course Endpoints (Integration Tests) should handle course creation errors" time="0.047">
    </testcase>
    <testcase classname="Course Endpoints (Integration Tests) should retrieve all courses" name="Course Endpoints (Integration Tests) should retrieve all courses" time="0.052">
    </testcase>
    <testcase classname="Course Endpoints (Integration Tests) should handle errors when retrieving courses" name="Course Endpoints (Integration Tests) should handle errors when retrieving courses" time="0.046">
    </testcase>
  </testsuite>
  <testsuite name="Security Middleware" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:28" time="1.305" tests="7">
    <testcase classname="Security Middleware CORS should allow requests from allowed origins" name="Security Middleware CORS should allow requests from allowed origins" time="0.032">
    </testcase>
    <testcase classname="Security Middleware CORS should block requests from unauthorized origins" name="Security Middleware CORS should block requests from unauthorized origins" time="0.015">
    </testcase>
    <testcase classname="Security Middleware Helmet should set security headers" name="Security Middleware Helmet should set security headers" time="0.016">
    </testcase>
    <testcase classname="Security Middleware Rate Limiting should limit standard requests" name="Security Middleware Rate Limiting should limit standard requests" time="0.867">
    </testcase>
    <testcase classname="Security Middleware Rate Limiting should apply stricter limits to auth endpoints" name="Security Middleware Rate Limiting should apply stricter limits to auth endpoints" time="0.085">
    </testcase>
    <testcase classname="Security Middleware XSS Protection should sanitize input with potential XSS" name="Security Middleware XSS Protection should sanitize input with potential XSS" time="0.015">
    </testcase>
    <testcase classname="Security Middleware MongoDB Sanitization should remove MongoDB operators from request" name="Security Middleware MongoDB Sanitization should remove MongoDB operators from request" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="User Endpoints" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:30" time="1.282" tests="3">
    <testcase classname="User Endpoints should sign up a new user" name="User Endpoints should sign up a new user" time="0.168">
    </testcase>
    <testcase classname="User Endpoints should log in the user and return a token" name="User Endpoints should log in the user and return a token" time="0.129">
    </testcase>
    <testcase classname="User Endpoints should retrieve all users" name="User Endpoints should retrieve all users" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="User Model" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:31" time="0.732" tests="6">
    <testcase classname="User Model should create a user successfully: john_doe" name="User Model should create a user successfully: john_doe" time="0.02">
    </testcase>
    <testcase classname="User Model should create a user successfully: jane_smith" name="User Model should create a user successfully: jane_smith" time="0.012">
    </testcase>
    <testcase classname="User Model should fail to create a user with data: {&quot;email&quot;:&quot;no_username@example.com&quot;,&quot;password&quot;:&quot;password123&quot;}" name="User Model should fail to create a user with data: {&quot;email&quot;:&quot;no_username@example.com&quot;,&quot;password&quot;:&quot;password123&quot;}" time="0.045">
    </testcase>
    <testcase classname="User Model should fail to create a user with data: {&quot;username&quot;:&quot;invalid_email&quot;,&quot;email&quot;:&quot;invalid-email&quot;,&quot;password&quot;:&quot;password123&quot;}" name="User Model should fail to create a user with data: {&quot;username&quot;:&quot;invalid_email&quot;,&quot;email&quot;:&quot;invalid-email&quot;,&quot;password&quot;:&quot;password123&quot;}" time="0.007">
    </testcase>
    <testcase classname="User Model should fail to create a user with data: {&quot;username&quot;:&quot;short_password&quot;,&quot;email&quot;:&quot;shortpass@example.com&quot;,&quot;password&quot;:&quot;short&quot;}" name="User Model should fail to create a user with data: {&quot;username&quot;:&quot;short_password&quot;,&quot;email&quot;:&quot;shortpass@example.com&quot;,&quot;password&quot;:&quot;short&quot;}" time="0.006">
    </testcase>
    <testcase classname="User Model Duplicate Email should fail to create a user with a duplicate email" name="User Model Duplicate Email should fail to create a user with a duplicate email" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="Course Model" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:32" time="0.74" tests="6">
    <testcase classname="Course Model should create a course successfully: Introduction to Programming" name="Course Model should create a course successfully: Introduction to Programming" time="0.019">
    </testcase>
    <testcase classname="Course Model should create a course successfully: Advanced JavaScript" name="Course Model should create a course successfully: Advanced JavaScript" time="0.008">
    </testcase>
    <testcase classname="Course Model should create a course successfully: Database Management System" name="Course Model should create a course successfully: Database Management System" time="0.009">
    </testcase>
    <testcase classname="Course Model should fail to create a course with data: {&quot;description&quot;:&quot;Course without a name.&quot;}" name="Course Model should fail to create a course with data: {&quot;description&quot;:&quot;Course without a name.&quot;}" time="0.045">
    </testcase>
    <testcase classname="Course Model should fail to create a course with data: {&quot;name&quot;:&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;,&quot;description&quot;:&quot;Course with a very long name.&quot;}" name="Course Model should fail to create a course with data: {&quot;name&quot;:&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;,&quot;description&quot;:&quot;Course with a very long name.&quot;}" time="0.006">
    </testcase>
    <testcase classname="Course Model Duplicate Course Name should fail to create a course with a duplicate name" name="Course Model Duplicate Course Name should fail to create a course with a duplicate name" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="User Controller" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:33" time="0.618" tests="8">
    <testcase classname="User Controller signup should create user successfully" name="User Controller signup should create user successfully" time="0.019">
    </testcase>
    <testcase classname="User Controller signup should handle duplicate user error" name="User Controller signup should handle duplicate user error" time="0.019">
    </testcase>
    <testcase classname="User Controller signup should handle validation errors" name="User Controller signup should handle validation errors" time="0.009">
    </testcase>
    <testcase classname="User Controller signup should handle general server errors" name="User Controller signup should handle general server errors" time="0.009">
    </testcase>
    <testcase classname="User Controller login should login user successfully" name="User Controller login should login user successfully" time="0.008">
    </testcase>
    <testcase classname="User Controller login should handle invalid credentials" name="User Controller login should handle invalid credentials" time="0.007">
    </testcase>
    <testcase classname="User Controller login should handle general server errors during login" name="User Controller login should handle general server errors during login" time="0.008">
    </testcase>
    <testcase classname="User Controller getAllUsers should return all users successfully" name="User Controller getAllUsers should return all users successfully" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Auth Middleware" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:33" time="0.482" tests="7">
    <testcase classname="Auth Middleware should authenticate valid token and call next" name="Auth Middleware should authenticate valid token and call next" time="0.006">
    </testcase>
    <testcase classname="Auth Middleware should return 401 when no token provided" name="Auth Middleware should return 401 when no token provided" time="0.015">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for invalid token format" name="Auth Middleware should return 401 for invalid token format" time="0.004">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for expired token" name="Auth Middleware should return 401 for expired token" time="0.005">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for invalid JWT" name="Auth Middleware should return 401 for invalid JWT" time="0.005">
    </testcase>
    <testcase classname="Auth Middleware should return 401 for user not found" name="Auth Middleware should return 401 for user not found" time="0.004">
    </testcase>
    <testcase classname="Auth Middleware should return 500 for database errors" name="Auth Middleware should return 500 for database errors" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Course Controller" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:34" time="0.48" tests="5">
    <testcase classname="Course Controller getAllCourses should retrieve all courses successfully" name="Course Controller getAllCourses should retrieve all courses successfully" time="0.015">
    </testcase>
    <testcase classname="Course Controller getAllCourses should handle error when retrieving courses fails" name="Course Controller getAllCourses should handle error when retrieving courses fails" time="0.015">
    </testcase>
    <testcase classname="Course Controller createCourse should create course successfully" name="Course Controller createCourse should create course successfully" time="0.005">
    </testcase>
    <testcase classname="Course Controller createCourse should handle missing course name error" name="Course Controller createCourse should handle missing course name error" time="0.012">
    </testcase>
    <testcase classname="Course Controller createCourse should handle duplicate course error" name="Course Controller createCourse should handle duplicate course error" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Server Setup" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:34" time="0.457" tests="9">
    <testcase classname="Server Setup GET / should return API is running message" name="Server Setup GET / should return API is running message" time="0.027">
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should use compression, JSON, and pagination middleware" name="Server Setup Middleware Configuration should use compression, JSON, and pagination middleware" time="0.002">
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should set up the security middleware" name="Server Setup Middleware Configuration should set up the security middleware" time="0.006">
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should not use cache middleware in test environment" name="Server Setup Middleware Configuration should not use cache middleware in test environment" time="0.002">
    </testcase>
    <testcase classname="Server Setup Middleware Configuration should cache responses for /courses route when not in test environment" name="Server Setup Middleware Configuration should cache responses for /courses route when not in test environment" time="0.003">
    </testcase>
    <testcase classname="Server Setup Routing should register /users and /courses routes" name="Server Setup Routing should register /users and /courses routes" time="0.002">
    </testcase>
    <testcase classname="Server Setup Error Handling should handle unknown routes with 404" name="Server Setup Error Handling should handle unknown routes with 404" time="0.056">
    </testcase>
    <testcase classname="Server Setup Error Handling should handle server errors gracefully" name="Server Setup Error Handling should handle server errors gracefully" time="0.038">
    </testcase>
    <testcase classname="Server Setup Database Connection should connect to the database on server start" name="Server Setup Database Connection should connect to the database on server start" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Log Middleware" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:35" time="0.38" tests="3">
    <testcase classname="Log Middleware should log incoming GET requests" name="Log Middleware should log incoming GET requests" time="0.043">
    </testcase>
    <testcase classname="Log Middleware should log incoming POST requests with body" name="Log Middleware should log incoming POST requests with body" time="0.031">
    </testcase>
    <testcase classname="Log Middleware should handle responses correctly" name="Log Middleware should handle responses correctly" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="Error Middleware" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:35" time="0.257" tests="7">
    <testcase classname="Error Middleware should handle SpecificError" name="Error Middleware should handle SpecificError" time="0.026">
    </testcase>
    <testcase classname="Error Middleware should handle SequelizeUniqueConstraintError" name="Error Middleware should handle SequelizeUniqueConstraintError" time="0.007">
    </testcase>
    <testcase classname="Error Middleware should handle SequelizeValidationError" name="Error Middleware should handle SequelizeValidationError" time="0.009">
    </testcase>
    <testcase classname="Error Middleware should handle JsonWebTokenError" name="Error Middleware should handle JsonWebTokenError" time="0.008">
    </testcase>
    <testcase classname="Error Middleware should handle TokenExpiredError" name="Error Middleware should handle TokenExpiredError" time="0.008">
    </testcase>
    <testcase classname="Error Middleware should handle generic error" name="Error Middleware should handle generic error" time="0.008">
    </testcase>
    <testcase classname="Error Middleware should log error details" name="Error Middleware should log error details" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Logger" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:35" time="0.185" tests="3">
    <testcase classname="Logger should log info messages" name="Logger should log info messages" time="0.011">
    </testcase>
    <testcase classname="Logger should log error messages" name="Logger should log error messages" time="0.002">
    </testcase>
    <testcase classname="Logger should include additional metadata" name="Logger should include additional metadata" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="User Service" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:36" time="0.176" tests="8">
    <testcase classname="User Service createUser should create a user successfully with hashed password" name="User Service createUser should create a user successfully with hashed password" time="0.004">
    </testcase>
    <testcase classname="User Service createUser should throw an error when creating a user with existing email" name="User Service createUser should throw an error when creating a user with existing email" time="0.011">
    </testcase>
    <testcase classname="User Service createUser should throw an error when creating a user with existing username" name="User Service createUser should throw an error when creating a user with existing username" time="0.002">
    </testcase>
    <testcase classname="User Service loginUser should login a user successfully and return user and token" name="User Service loginUser should login a user successfully and return user and token" time="0.003">
    </testcase>
    <testcase classname="User Service loginUser should throw &quot;Invalid credentials&quot; if user does not exist" name="User Service loginUser should throw &quot;Invalid credentials&quot; if user does not exist" time="0.002">
    </testcase>
    <testcase classname="User Service loginUser should throw &quot;Invalid credentials&quot; if password is incorrect" name="User Service loginUser should throw &quot;Invalid credentials&quot; if password is incorrect" time="0.001">
    </testcase>
    <testcase classname="User Service getAllUsers should return all users" name="User Service getAllUsers should return all users" time="0.001">
    </testcase>
    <testcase classname="User Service getAllUsers should return an empty array when no users exist" name="User Service getAllUsers should return an empty array when no users exist" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Course Service" errors="0" failures="0" skipped="0" timestamp="2025-01-15T06:53:36" time="0.137" tests="5">
    <testcase classname="Course Service getAllCourses should retrieve all courses" name="Course Service getAllCourses should retrieve all courses" time="0.003">
    </testcase>
    <testcase classname="Course Service getAllCourses should return empty array when no courses exist" name="Course Service getAllCourses should return empty array when no courses exist" time="0.002">
    </testcase>
    <testcase classname="Course Service createCourse should create a course successfully" name="Course Service createCourse should create a course successfully" time="0.002">
    </testcase>
    <testcase classname="Course Service createCourse should throw error when course name is empty" name="Course Service createCourse should throw error when course name is empty" time="0.01">
    </testcase>
    <testcase classname="Course Service createCourse should throw error when course name is too long" name="Course Service createCourse should throw error when course name is too long" time="0.001">
    </testcase>
  </testsuite>
</testsuites>